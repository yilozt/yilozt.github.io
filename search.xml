<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>interupt in x86</title>
      <link href="/2023/02/08/interupt-in-x86/"/>
      <url>/2023/02/08/interupt-in-x86/</url>
      
        <content type="html"><![CDATA[<h2 id="interupt-from-hardware"><a class="markdownIt-Anchor" href="#interupt-from-hardware"></a> Interupt from Hardware</h2><h2 id="soft-interupt"><a class="markdownIt-Anchor" href="#soft-interupt"></a> Soft interupt</h2><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>]]></content>
      
      
      
        <tags>
            
            <tag> assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数电</title>
      <link href="/2023/01/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/28/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="组合逻辑与布尔代数"><a class="markdownIt-Anchor" href="#组合逻辑与布尔代数"></a> 组合逻辑与布尔代数</h2><ul><li><strong>组合逻辑电路</strong>：输出 = 输入在 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi></math></mjx-assistive-mml></mjx-container> 时刻的布尔函数，与 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi></math></mjx-assistive-mml></mjx-container> 时刻之前的历史输入无关 (无记忆)</li><li>与历史输入有关的电路：<strong>时序逻辑电路</strong>（有记忆）</li><li>n 个布尔变量组成的多维空间：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.998ex" height="1.552ex" role="img" focusable="false" viewBox="0 -686 1325.3 686" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D401" d="M720 510Q720 476 704 448T665 404T619 377T580 362L564 359L583 356Q602 353 632 342T690 312Q712 292 725 276Q752 235 752 189V183Q752 160 741 125Q698 18 547 2Q543 1 288 0H39V62H147V624H39V686H264H409Q502 686 542 681T624 655Q720 607 720 510ZM563 513Q563 553 548 578T518 611T486 622Q479 624 385 624H293V382H375Q458 383 467 385Q563 405 563 513ZM590 192Q590 307 505 329Q504 330 503 330L398 331H293V62H391H400H444Q496 62 528 75T580 131Q590 155 590 192Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mi" transform="translate(851,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">B</mi></mrow><mi>n</mi></msup></math></mjx-assistive-mml></mjx-container>，各个布尔变量之间的每种组合与空间中的一个点对应，常见的表现形式：<ul><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.919ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 3500 688" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width: 3;"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)" style="stroke-width: 3;"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1500,0)" style="stroke-width: 3;"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2000,0)" style="stroke-width: 3;"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)" style="stroke-width: 3;"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(3000,0)" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>0011001</mn></math></mjx-assistive-mml></mjx-container></li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="7.939ex" height="2.776ex" role="img" focusable="false" viewBox="0 -1022 3509 1227" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(14.5,374)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mover" transform="translate(529,0)"><g data-mml-node="mi" transform="translate(35.5,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(0,626)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mi" transform="translate(1029,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1462,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width: 3;"/></g><g data-mml-node="mover" transform="translate(1982,0)"><g data-mml-node="mi" transform="translate(17,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(0,374)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mover" transform="translate(2482,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(25,637)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mi" transform="translate(3032,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mover><mi>a</mi><mo accent="true">―</mo></mover><mover><mi>b</mi><mo accent="true">―</mo></mover><mi>c</mi><mi>d</mi><mover><mi>e</mi><mo accent="true">―</mo></mover><mover><mi>f</mi><mo accent="true">―</mo></mover><mi>g</mi></math></mjx-assistive-mml></mjx-container></li></ul></li><li><em>具有 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi></math></mjx-assistive-mml></mjx-container> 个输入 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi></math></mjx-assistive-mml></mjx-container> 个输出的布尔函数</em><br /><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.443ex" height="1.552ex" role="img" focusable="false" viewBox="0 -686 1521.8 686" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D401" d="M720 510Q720 476 704 448T665 404T619 377T580 362L564 359L583 356Q602 353 632 342T690 312Q712 292 725 276Q752 235 752 189V183Q752 160 741 125Q698 18 547 2Q543 1 288 0H39V62H147V624H39V686H264H409Q502 686 542 681T624 655Q720 607 720 510ZM563 513Q563 553 548 578T518 611T486 622Q479 624 385 624H293V382H375Q458 383 467 385Q563 405 563 513ZM590 192Q590 307 505 329Q504 330 503 330L398 331H293V62H391H400H444Q496 62 528 75T580 131Q590 155 590 192Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mi" transform="translate(851,363) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">B</mi></mrow><mi>m</mi></msup></math></mjx-assistive-mml></mjx-container> 到 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.998ex" height="1.552ex" role="img" focusable="false" viewBox="0 -686 1325.3 686" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D401" d="M720 510Q720 476 704 448T665 404T619 377T580 362L564 359L583 356Q602 353 632 342T690 312Q712 292 725 276Q752 235 752 189V183Q752 160 741 125Q698 18 547 2Q543 1 288 0H39V62H147V624H39V686H264H409Q502 686 542 681T624 655Q720 607 720 510ZM563 513Q563 553 548 578T518 611T486 622Q479 624 385 624H293V382H375Q458 383 467 385Q563 405 563 513ZM590 192Q590 307 505 329Q504 330 503 330L398 331H293V62H391H400H444Q496 62 528 75T580 131Q590 155 590 192Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mi" transform="translate(851,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">B</mi></mrow><mi>n</mi></msup></math></mjx-assistive-mml></mjx-container> 的映射：<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="13.091ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 5786.2 910" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(827.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(1383.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D401" d="M720 510Q720 476 704 448T665 404T619 377T580 362L564 359L583 356Q602 353 632 342T690 312Q712 292 725 276Q752 235 752 189V183Q752 160 741 125Q698 18 547 2Q543 1 288 0H39V62H147V624H39V686H264H409Q502 686 542 681T624 655Q720 607 720 510ZM563 513Q563 553 548 578T518 611T486 622Q479 624 385 624H293V382H375Q458 383 467 385Q563 405 563 513ZM590 192Q590 307 505 329Q504 330 503 330L398 331H293V62H391H400H444Q496 62 528 75T580 131Q590 155 590 192Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mi" transform="translate(851,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(2986.6,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(4264.4,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D401" d="M720 510Q720 476 704 448T665 404T619 377T580 362L564 359L583 356Q602 353 632 342T690 312Q712 292 725 276Q752 235 752 189V183Q752 160 741 125Q698 18 547 2Q543 1 288 0H39V62H147V624H39V686H264H409Q502 686 542 681T624 655Q720 607 720 510ZM563 513Q563 553 548 578T518 611T486 622Q479 624 385 624H293V382H375Q458 383 467 385Q563 405 563 513ZM590 192Q590 307 505 329Q504 330 503 330L398 331H293V62H391H400H444Q496 62 528 75T580 131Q590 155 590 192Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mi" transform="translate(851,363) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mo>:</mo><msup><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">B</mi></mrow><mi>n</mi></msup><mo stretchy="false">→</mo><msup><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">B</mi></mrow><mi>m</mi></msup></math></mjx-assistive-mml></mjx-container></li></ul><h2 id="常见逻辑门"><a class="markdownIt-Anchor" href="#常见逻辑门"></a> 常见逻辑门</h2><p><img src="logic-gates.png" alt="aaa" /></p><h2 id="运算性质"><a class="markdownIt-Anchor" href="#运算性质"></a> 运算性质</h2><table><thead><tr><th style="text-align:left">布尔代数法则</th><th style="text-align:left">积之和形式（SOP）</th><th style="text-align:left">和之积形式 (POS)</th></tr></thead><tbody><tr><td style="text-align:left">0、1组合律</td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="19.556ex" height="1.946ex" role="img" focusable="false" viewBox="0 -666 8643.7 860" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1751.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2529.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3585,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4114,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4558.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5309.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(6310.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(7087.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(8143.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>+</mo><mn>0</mn><mo>=</mo><mi>a</mi><mo>,</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></math></mjx-assistive-mml></mjx-container></td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="17.293ex" height="1.946ex" role="img" focusable="false" viewBox="0 -666 7643.7 860" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1251.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2029.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(3085,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3585,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4029.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4780.9,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(5281.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6058.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(7114.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>⋅</mo><mn>0</mn><mo>=</mo><mn>0</mn><mo>,</mo><mi>a</mi><mo>⋅</mo><mn>1</mn><mo>=</mo><mi>a</mi></math></mjx-assistive-mml></mjx-container></td></tr><tr><td style="text-align:left">交换律</td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.883ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 5694.4 776" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1751.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2458.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3514,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4165.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(5165.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>b</mi><mo>+</mo><mi>a</mi></math></mjx-assistive-mml></mjx-container></td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.621ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 4694.4 776" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1251.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1958.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3014,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3665.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4165.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>⋅</mo><mi>b</mi><mo>=</mo><mi>b</mi><mo>⋅</mo><mi>a</mi></math></mjx-assistive-mml></mjx-container></td></tr><tr><td style="text-align:left">结合律</td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.59ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15730.8 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1751.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2140.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2791.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3791.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4224.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4891.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(5947.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6698.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(7698.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(8087.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(8739.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(9739.3,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(10172.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(10839.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(11894.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(12646.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(13646.3,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(14297.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(15297.8,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>+</mo><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo>+</mo><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></math></mjx-assistive-mml></mjx-container></td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.803ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12730.8 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1251.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1640.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2291.7,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2791.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3224.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3891.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4947.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5698.7,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6198.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(6587.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(7239.1,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(7739.3,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(8172.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(8839.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(9894.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(10646.1,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(11146.3,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(11797.6,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(12297.8,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>b</mi><mo>⋅</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>b</mi><mo>⋅</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo>⋅</mo><mi>b</mi><mo>⋅</mo><mi>c</mi></math></mjx-assistive-mml></mjx-container></td></tr><tr><td style="text-align:left">分配律</td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.051ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7978.6 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(529,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(918,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1569.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2569.4,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3002.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3669.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4725,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(5254,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5960.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(7016.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(7545.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mi>b</mi><mo>=</mo><mi>a</mi><mi>c</mi></math></mjx-assistive-mml></mjx-container></td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="27.355ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12090.8 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1751.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2140.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2791.7,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3291.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3724.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4391.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5447.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(5836.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6587.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(7587.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(8016.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(8628.1,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(9128.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(9517.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(10268.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(11268.8,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(11701.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>+</mo><mo stretchy="false">(</mo><mi>b</mi><mo>⋅</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>c</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container></td></tr><tr><td style="text-align:left">同一律</td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.373ex" height="1.505ex" role="img" focusable="false" viewBox="0 -583 4143 665" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1751.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2558.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3614,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>+</mo><mi>a</mi><mo>=</mo><mi>a</mi></math></mjx-assistive-mml></mjx-container></td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.242ex" height="1.505ex" role="img" focusable="false" viewBox="0 -583 3643 665" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1251.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2058.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3114,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>⋅</mo><mi>a</mi><mo>=</mo><mi>a</mi></math></mjx-assistive-mml></mjx-container></td></tr><tr><td style="text-align:left">还原律</td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.422ex" height="2.98ex" role="img" focusable="false" viewBox="0 -1067 3280.6 1317" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mo" transform="translate(55.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(0,682)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mover" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(14.5,374)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(1029,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1695.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2751.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mover><mo stretchy="false">(</mo><mo accent="true">―</mo></mover><mover><mi>a</mi><mo accent="true">―</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi></math></mjx-assistive-mml></mjx-container></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">互补律</td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.308ex" height="1.903ex" role="img" focusable="false" viewBox="0 -759 4114 841" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mover" transform="translate(1751.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(14.5,374)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(2558.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(3614,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>+</mo><mover><mi>a</mi><mo accent="true">―</mo></mover><mo>=</mo><mn>1</mn></math></mjx-assistive-mml></mjx-container></td><td style="text-align:left"><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.176ex" height="1.903ex" role="img" focusable="false" viewBox="0 -759 3614 841" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mover" transform="translate(1251.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(14.5,374)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(2058.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(3114,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>⋅</mo><mover><mi>a</mi><mo accent="true">―</mo></mover><mo>=</mo><mn>0</mn></math></mjx-assistive-mml></mjx-container></td></tr></tbody></table><ul><li>0、1组合律：分别与 0、1 作运算</li><li>同一律：和自己作运算</li><li>还原律：两次取反后等于自身</li><li>互补律：和区反后的自己作运算</li></ul><h2 id="狄摩根定律"><a class="markdownIt-Anchor" href="#狄摩根定律"></a> 狄摩根定律</h2><p>将<em>积之和形式</em>的电路转换成<em>和之积形式</em>的电路：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -2.74ex;" xmlns="http://www.w3.org/2000/svg" width="23.601ex" height="6.611ex" role="img" focusable="false" viewBox="0 -1711 10431.6 2922" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mover"><g data-mml-node="mrow"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1751.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2402.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3402.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4058.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5058.3,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(0,626)"><svg width="6230.3" height="237" x="0" y="148" viewBox="1557.6 148 6230.3 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(18.691,1)" style="stroke-width: 3;"/></svg></g></g><g data-mml-node="mo" transform="translate(6508.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mover" transform="translate(7563.9,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(14.5,374)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mover" transform="translate(8092.9,0)"><g data-mml-node="mi" transform="translate(35.5,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(0,626)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mover" transform="translate(8592.9,0)"><g data-mml-node="mi" transform="translate(33.5,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(0,374)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(9259.6,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mtr" transform="translate(0,-961)"><g data-mml-node="mtd" transform="translate(0,0)"><g data-mml-node="mover"><g data-mml-node="mrow"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(958,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1557.7,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(0,626)"><svg width="2729.7" height="237" x="0" y="148" viewBox="682.4 148 2729.7 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(8.189,1)" style="stroke-width: 3;"/></svg></g></g><g data-mml-node="mo" transform="translate(3007.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mover" transform="translate(4063.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(14.5,374)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(4814.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mover" transform="translate(5814.7,0)"><g data-mml-node="mi" transform="translate(35.5,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(0,626)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(6536.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mover" transform="translate(7537.1,0)"><g data-mml-node="mi" transform="translate(33.5,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(0,374)"><path data-c="2013" d="M0 248V285H499V248H0Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(8259.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(9259.6,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z" style="stroke-width: 3;"/></g></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtable columnspacing="1em" rowspacing="4pt"><mtr><mtd><mover><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>+</mo><mo>…</mo></mrow><mo accent="true">―</mo></mover><mo>=</mo><mover><mi>a</mi><mo accent="true">―</mo></mover><mover><mi>b</mi><mo accent="true">―</mo></mover><mover><mi>c</mi><mo accent="true">―</mo></mover><mo>…</mo></mtd></mtr><mtr><mtd><mover><mrow><mi>a</mi><mi>b</mi><mi>c</mi><mo>…</mo></mrow><mo accent="true">―</mo></mover><mo>=</mo><mover><mi>a</mi><mo accent="true">―</mo></mover><mo>+</mo><mover><mi>b</mi><mo accent="true">―</mo></mover><mo>+</mo><mover><mi>c</mi><mo accent="true">―</mo></mover><mo>+</mo><mo>…</mo></mtd></mtr></mtable></math></mjx-assistive-mml></mjx-container><h2 id="布尔代数化简定理"><a class="markdownIt-Anchor" href="#布尔代数化简定理"></a> 布尔代数化简定理</h2><table><thead><tr><th style="text-align:left">定理</th><th style="text-align:left">SOP 形式</th><th style="text-align:left">POS 形式</th></tr></thead><tbody><tr><td style="text-align:left">逻辑相邻</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">吸收</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">或</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">乘法与因式分解</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">一致性</td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> verilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win32 API 使用 GDI 输出文字</title>
      <link href="/2023/01/20/Win32-API-%E4%BD%BF%E7%94%A8-GDI-%E8%BE%93%E5%87%BA%E6%96%87%E5%AD%97/"/>
      <url>/2023/01/20/Win32-API-%E4%BD%BF%E7%94%A8-GDI-%E8%BE%93%E5%87%BA%E6%96%87%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<ul><li><p>gdi Windows 早期的图形接口???</p></li><li><p>设备内容对象 DC，所有的 gdi 绘制操作都需要传入 DC</p><ul><li>获取 DC:<br />在 WM_PAINT 里 BeginPaint() EndPaint()<br />GetDC() ReleaseDC()</li></ul></li><li><p>TextOut</p><p>字符大小：<br />GetSystemMetrics()<br />GetTextMetrics()</p></li><li><p>滚动条<br />WS_VSCROLL<br />GetScrollPos<br />SetScrollPos<br />SetScrollRange</p></li><li><p>滚动条2<br />GetScrollInfo / SetScrollInfo<br />ScrollWindow</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Win32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win32 API 多任务多线程</title>
      <link href="/2023/01/15/Win32-API-%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/01/15/Win32-API-%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>头文件：</p><p>#include &lt;process.h&gt;</p><ul><li><p>如何创建线程？<code>CreateThread</code><br />简便一点的 API：<code>_beginthread</code></p></li><li><p>进程同步<br />临界区：CRITICAL_SECTION<br />进入临界区：EnterCriticalSection<br />离开临界区：LeaveCriticalSection<br />初始化： InitializeCriticalSection<br />释放资源：DeleteCriticalSection</p></li><li><p>事件对象 可以看成是一个特殊的 bool 变量，但是可以阻塞线程<br />CreateEvent<br />WaitForSingleObject</p></li><li><p>TLS 线程区域存储空间<br />线程共享全局变量？如果需要给线程设置不同的值：TLS</p><p>可以理解为一块特殊的内存区域，在里面定义的全局变量后，每个线程都可以给变量设置自己的值</p><p>_declspec (thread) int a = 0;<br />_declspec (thread) static int a = 0;</p><p>TlsAlloc()    // 分配索引<br />TlsSetValue() // 为索引设置存储的内容<br />TlsGetValue() // 获取内容<br />GlobalFree()  // 释放空间<br />TlsFree()     // 回收索引</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Win32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Hello World (NixOS)</title>
      <link href="/2022/11/11/csharp-hello-world/"/>
      <url>/2022/11/11/csharp-hello-world/</url>
      
        <content type="html"><![CDATA[<p>自己在 NixOS 上学习 C# 的一些笔记。</p><h2 id="安装-mono-和-net-sdk"><a class="markdownIt-Anchor" href="#安装-mono-和-net-sdk"></a> 安装 Mono 和 .Net SDK</h2><p>C# 在 .Net 之上运行，安装 .Net SDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-shell -p dotnetCorePackages.sdk_6_0 mono</span><br></pre></td></tr></table></figure><h2 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> Hello World</h2><p>C# 的程序结构一般长这样，以 cs 作为拓展名：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello_world.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">com.example</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C# 的语法结构和 Java、C++ 类似：</p><ul><li>using 可以用来导入命名空间</li><li>程序的入口是 Main 函数，这里的语法和 Java 类似</li><li>Console.WriteLine 方法类似于 C 里的 printf，这个方法从 System 命名空间里引入</li></ul><h2 id="编译执行"><a class="markdownIt-Anchor" href="#编译执行"></a> 编译执行</h2><p>安装 mono 使用 csc 编译程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csc hello_world.cs</span><br></pre></td></tr></table></figure><p>编译通过后会在当前目录生成 hello_world.exe：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file hello_world.exe </span><br><span class="line">hello_world.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mono hello_world.exe</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h2 id="vscode-插件"><a class="markdownIt-Anchor" href="#vscode-插件"></a> Vscode 插件</h2><p>主要安装两个插件：</p><ul><li>C#</li><li>Mono Debug</li></ul><p>C# 插件其实有调试功能，但这个功能只能在 Windows 里使用，在 Linux 下需要安装 Mono Debug 来进行调试。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">environment.<span class="attr">systemPackages</span> = <span class="keyword">with</span> pkgs; [</span><br><span class="line">  (vscode-<span class="keyword">with</span>-extensions.override &#123;</span><br><span class="line">    <span class="attr">vscode</span> = vscodium;</span><br><span class="line">    <span class="attr">vscodeExtensions</span> = <span class="keyword">with</span> vscode-extensions; [</span><br><span class="line">      vscode-extensions.ms-dotnettools.csharp</span><br><span class="line">    ] ++ pkgs.vscode-utils.extensionsFromVscodeMarketplace [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span> = <span class="string">&quot;mono-debug&quot;</span>;</span><br><span class="line">        <span class="attr">publisher</span> = <span class="string">&quot;ms-vscode&quot;</span>;</span><br><span class="line">        <span class="attr">version</span> = <span class="string">&quot;0.16.3&quot;</span>;</span><br><span class="line">        <span class="attr">sha256</span> = <span class="string">&quot;sha256-6IU8aP4FQVbEMZAgssGiyqM+PAbwipxou5Wk3Q2mjZg=&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">  &#125;)</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="debug"><a class="markdownIt-Anchor" href="#debug"></a> Debug</h2><p>主要参考了 CSDN 上的文章：<a href="https://blog.csdn.net/qinyuanpei/article/details/57419539">https://blog.csdn.net/qinyuanpei/article/details/57419539</a></p><p>tasks.json：以 -debug 模式编译 c# 源文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span> <span class="comment">// 用来标识任务</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;csc&quot;</span><span class="punctuation">,</span> <span class="comment">// 运行 csc -debug $&#123;file&#125; 编译文件</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span>     <span class="comment">// $&#123;file&#125; 将被替换成源文件的路径</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>launch.json：通过 mono debug 插件进行调试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mono&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;runtimeExecutable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mono&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integratedTerminal&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果 vscode 报错提示找不到 mono runtime，可以将 runtimeExecutable 设置成 mono 的绝对路径</p><p>就可以在源文件里设置断点，F5 调试了：</p><p><img src="./debug-in-vscode.png" alt="" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NixOS 下搭建 MySQL 环境学习</title>
      <link href="/2022/10/31/SQL-init/"/>
      <url>/2022/10/31/SQL-init/</url>
      
        <content type="html"><![CDATA[<p>这里记录了自己在 NixOS 搭建 MySQL 学习环境的过程，毕竟已经换上了 NixOS，因此希望在学习 SQL 时最好不要污染当前的环境。</p><p>我自己的话打算将所有数据库文件都放在 home 目录下的某个文件夹里，这里暂且称这个文件夹为 <code>sql-exercises</code></p><h2 id="进入-mysql-环境"><a class="markdownIt-Anchor" href="#进入-mysql-环境"></a> 进入 mysql 环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd sql-exercises</span><br><span class="line">nix-shell -p mariadb</span><br></pre></td></tr></table></figure><h2 id="初始化数据库文件"><a class="markdownIt-Anchor" href="#初始化数据库文件"></a> 初始化数据库文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mariadb-install-db</span><br></pre></td></tr></table></figure><p>在这个执行完毕后，会发现 sql-exercises 下多了一个 data 的文件夹，之前初始化命令的输出也给出了提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Two all-privilege accounts were created.</span><br><span class="line">One is root@localhost, it has no password, but you need to</span><br><span class="line">be system &#x27;root&#x27; user to connect. Use, for example, sudo mysql</span><br><span class="line">The second is luo@localhost, it has no password either, but</span><br><span class="line">you need to be the system &#x27;luo&#x27; user to connect.</span><br><span class="line">After connecting you can set the password, if you would need to be</span><br><span class="line">able to connect as any of these users with a password and without sudo</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">You can start the MariaDB daemon with:</span><br><span class="line">cd &#x27;/nix/store/18qzgvfd4bc3lq2nizhb9l0yhj1np0gj-mariadb-server-10.6.10&#x27; ; /nix/store/18qzgvfd4bc3lq2nizhb9l0yhj1np0gj-mariadb-server-10.6.10/bin/mysqld_safe --datadir=&#x27;./data&#x27;</span><br></pre></td></tr></table></figure><p>大概意思就是为我们创建了两个 mysql 数据库用户，一个是 root，另一个与自己的用户名相同。同时也给出了启动服务的命令。</p><h2 id="启动数据库"><a class="markdownIt-Anchor" href="#启动数据库"></a> 启动数据库</h2><p>试着执行下上面提示的命令，这里使用 $(pwd) 展开 sql-exercises 的路径，这样子就可以拿到 sql-exercises/data 这个文件夹的绝对路径了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[nix-shell:~/code/sql-exercises]$ mysqld_safe --datadir=&quot;$(pwd)/data&quot;</span><br><span class="line">221031 22:33:49 mysqld_safe Logging to &#x27;./data/luo.err&#x27;.</span><br><span class="line">mkdir: cannot create directory ‘/run/mysqld’: Permission denied</span><br><span class="line">221031 22:33:49 mysqld_safe Fatal error Can&#x27;t create database directory &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这里可以看出启动数据库需要 /run/mysqld 这个文件夹，也给出了查看错误日志的路径。可以直接创建 /run/mysqld 这个文件夹然后赋予正确的权限，但感觉还是有一点丑陋。最好是能使用 sql-exercises 下的一个目录。</p><p>很自然就能想到 -h 查看帮助了，最后给了一个提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqld_safe --help</span><br><span class="line">... </span><br><span class="line">All other options are passed to the mysqld program.</span><br></pre></td></tr></table></figure><p>可以看到 mysqld_safe 其实是对 mysqld 的一个包装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[nix-shell:~/code/sql-exercises]$ mysqld --help</span><br><span class="line">mysqld  Ver 10.6.10-MariaDB for Linux on x86_64 (MariaDB Server)</span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Starts the MariaDB database server.</span><br><span class="line"></span><br><span class="line">Usage: mysqld [OPTIONS]</span><br><span class="line"></span><br><span class="line">For more help options (several pages), use mysqld --verbose --help.</span><br></pre></td></tr></table></figure><p>试试 <code>mysqld --verbose --help| /run/mysqld/mysqld.sock</code>，发现可以通过 --socket 选项来修改套接字的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqld --verbose --help|grep /run/mysqld/mysqld.sock</span><br><span class="line">socket  /run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure><p>启动服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld_safe --datadir=&quot;$(pwd)/data&quot; --socket=&quot;$(pwd)/run/mysqld/mysqld.sock&quot;</span><br></pre></td></tr></table></figure><p>没有报错，说明服务已经在运行了。</p><h3 id="连接数据库"><a class="markdownIt-Anchor" href="#连接数据库"></a> 连接数据库</h3><p>当然别忘了使用 <code>--socket</code> 指定套接字的路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[nix-shell:~/code/sql-exercises]$  mariadb --socket=&quot;$(pwd)/run/mysqld/mysqld.sock&quot;</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 3</span><br><span class="line">Server version: 10.6.10-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br></pre></td></tr></table></figure><h3 id="编写-shellnix"><a class="markdownIt-Anchor" href="#编写-shellnix"></a> 编写 shell.nix</h3><p>模板：<a href="https://nixos.org/manual/nixpkgs/unstable/#sec-pkgs-mkShell">https://nixos.org/manual/nixpkgs/unstable/#sec-pkgs-mkShell</a></p><p>将上面的步骤写进 shell.nix：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123; pkgs ? <span class="built_in">import</span> &lt;nixpkgs&gt; &#123; &#125; &#125;:</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> </span><br><span class="line">  <span class="attr">rootDir</span> = <span class="built_in">builtins</span>.<span class="built_in">toString</span> ./.;</span><br><span class="line">  <span class="attr">dataDir</span> = <span class="built_in">builtins</span>.<span class="built_in">toString</span> ./data;</span><br><span class="line">  <span class="attr">socketPath</span> = <span class="built_in">builtins</span>.<span class="built_in">toString</span> ./run/mysqld/mysqld.sock;</span><br><span class="line"><span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">pkgs.mkShell &#123;</span><br><span class="line">  <span class="attr">packages</span> = <span class="keyword">with</span> pkgs; [ mariadb ];</span><br><span class="line"></span><br><span class="line">  <span class="attr">shellHook</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">    [[ -d data ]] || mariadb-install-db</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    function start_db() &#123;</span></span><br><span class="line"><span class="string">      mysqld_safe --datadir=&quot;<span class="subst">$&#123;dataDir&#125;</span>&quot; --socket=&quot;<span class="subst">$&#123;socketPath&#125;</span>&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function connect_db() &#123;</span></span><br><span class="line"><span class="string">      mariadb --socket=&quot;<span class="subst">$&#123;socketPath&#125;</span>&quot; -t</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function runsql() &#123;</span></span><br><span class="line"><span class="string">      connect_db &lt; &quot;$@&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后只需要在 sql-exercises 文件夹下使用 <code>nix-shell</code> 就可以进入 MySQL 环境了。这里简单地定义了几个函数，start_db 用来启动数据库，connect_db 用来连接数据库，最后的 runsql 可以从文件执行 SQL 语句。</p><h2 id="样例下载"><a class="markdownIt-Anchor" href="#样例下载"></a> 样例下载</h2><p><a href="https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip">https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp: 格式化输出</title>
      <link href="/2022/10/23/Cpp-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
      <url>/2022/10/23/Cpp-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="十进制-八进制-十六进制输出"><a class="markdownIt-Anchor" href="#十进制-八进制-十六进制输出"></a> 十进制、八进制、十六进制输出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;hex:&quot;</span> &lt;&lt; hex &lt;&lt; <span class="number">11</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">12</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">13</span> &lt;&lt; endl</span><br><span class="line">     &lt;&lt; <span class="string">&quot;oct:&quot;</span> &lt;&lt; oct &lt;&lt; <span class="number">11</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">12</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">13</span> &lt;&lt; endl</span><br><span class="line">     &lt;&lt; <span class="string">&quot;dec:&quot;</span> &lt;&lt; dec &lt;&lt; <span class="number">11</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">12</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">13</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>hex 以 16 进制输出流后面的整数，oct 以 8 进制输出流后面的整数，dec 恢复回十进制。<br />hex、oct 这种改变流的行为的关键字被称为<strong>操纵符</strong>。</p><p>hex、oct 这种一旦改变输出格式、后面的数字将一直以这种进制输出（持久）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; hex &lt;&lt; <span class="number">10</span> &lt;&lt; endl;  <span class="comment">// 输出 a</span></span><br><span class="line">cout &lt;&lt; <span class="number">10</span> &lt;&lt; endl;         <span class="comment">// 还是输出 a</span></span><br></pre></td></tr></table></figure><p>showbase 显示进制前缀，输出十六进制数时添加前缀 0x，输出八进制数时添加前缀 0：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; showbase &lt;&lt; hex &lt;&lt; <span class="number">11</span> &lt;&lt; endl; <span class="comment">// 0xb</span></span><br><span class="line">cout &lt;&lt; oct &lt;&lt; <span class="number">11</span> &lt;&lt; endl; <span class="comment">// 013</span></span><br></pre></td></tr></table></figure><p>unshowbase 取消前缀：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; showbase &lt;&lt; hex;</span><br><span class="line">cout &lt;&lt; <span class="number">11</span> &lt;&lt; endl; <span class="comment">// 0xb</span></span><br><span class="line">cout &lt;&lt; unshowbase;</span><br><span class="line">cout &lt;&lt; <span class="number">11</span>;         <span class="comment">// b</span></span><br></pre></td></tr></table></figure><h2 id="十进制-八进制-十六进制输入"><a class="markdownIt-Anchor" href="#十进制-八进制-十六进制输入"></a> 十进制、八进制、十六进制输入</h2><p>hex oct dec 也可以用在 cin 上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; hex &gt;&gt; b &gt;&gt; oct &gt;&gt; c;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c;</span><br></pre></td></tr></table></figure><p>输入和输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: 10 0xa 012</span><br><span class="line">输出: 10 10 10</span><br><span class="line">输入: 10 a 12</span><br><span class="line">输出: 10 10 10</span><br></pre></td></tr></table></figure><h2 id="浮点数输出"><a class="markdownIt-Anchor" href="#浮点数输出"></a> 浮点数输出</h2><p>三种输出格式：</p><ul><li>defaultfloat：最多输出6位数字，太大的数字会以科学技术法的形式输出</li><li>fixed：显示小数点后六位</li><li>scientific：科学技术法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> num = <span class="number">1234567890.123456789</span>;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; <span class="string">&quot;\n&quot;</span>                <span class="comment">// defaultfloat: 1.23457e+09</span></span><br><span class="line">     &lt;&lt; fixed &lt;&lt; num &lt;&lt; <span class="string">&quot;\n&quot;</span>       <span class="comment">// fixed:        1234567890.123457</span></span><br><span class="line">     &lt;&lt; scientific &lt;&lt; num &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// scientific:   1.234568e+09</span></span><br></pre></td></tr></table></figure><p>显示小数点后 n 位：fixed + setprecision()，需要引入 iomanip 库</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="type">double</span> num = <span class="number">1234567890.123456789</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">12</span>) &lt;&lt; num &lt;&lt; <span class="string">&quot;\n&quot;</span> <span class="comment">// 1234567890.12</span></span><br><span class="line">     &lt;&lt; fixed &lt;&lt; num &lt;&lt; <span class="string">&quot;\n&quot;</span>            <span class="comment">// 1234567890.123456716537</span></span><br><span class="line">     &lt;&lt; scientific &lt;&lt; num &lt;&lt; <span class="string">&quot;\n&quot;</span>;      <span class="comment">// 1.234567890123e+09</span></span><br></pre></td></tr></table></figure><h2 id="设置输出宽度"><a class="markdownIt-Anchor" href="#设置输出宽度"></a> 设置输出宽度</h2><p>set()，非持久，只对下一次的输出有效：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> w = <span class="number">16</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; <span class="built_in">setw</span>(w) &lt;&lt; <span class="string">&quot;Hello&quot;</span> &lt;&lt; <span class="string">&quot;|\n&quot;</span>; <span class="comment">// |           Hello|</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; <span class="built_in">setw</span>(w) &lt;&lt; <span class="string">&quot;123&quot;</span>   &lt;&lt; <span class="string">&quot;|\n&quot;</span>; <span class="comment">// |             123|</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; <span class="built_in">setw</span>(w) &lt;&lt; <span class="string">&quot;abc&quot;</span>   &lt;&lt; <span class="string">&quot;|\n&quot;</span>; <span class="comment">// |             abc|</span></span><br></pre></td></tr></table></figure><h2 id="字符串流"><a class="markdownIt-Anchor" href="#字符串流"></a> 字符串流</h2><p>需要引入头文件:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br></pre></td></tr></table></figure><p>字符串转数字：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">istringstream is &#123; s &#125;;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line">is &gt;&gt; d;</span><br><span class="line"><span class="keyword">if</span> (!is) <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;double format error: &quot;</span> + s);</span><br></pre></td></tr></table></figure><p>数字转字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ostringstream os;</span><br><span class="line"><span class="type">int</span> x = <span class="number">12</span>, y = <span class="number">34</span>;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;Point &#123; &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line">string s = os.<span class="built_in">str</span>();</span><br></pre></td></tr></table></figure><h2 id="按行输入"><a class="markdownIt-Anchor" href="#按行输入"></a> 按行输入</h2><p>使用 getline() 函数，返回的字符串不包含回车符号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string l;</span><br><span class="line"><span class="built_in">getline</span>(cin, l);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp: 类与枚举</title>
      <link href="/2022/10/23/Cpp-%E7%B1%BB%E4%B8%8E%E6%9E%9A%E4%B8%BE/"/>
      <url>/2022/10/23/Cpp-%E7%B1%BB%E4%B8%8E%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a class="markdownIt-Anchor" href="#声明"></a> 声明</h2><p>一个类的声明大概长这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;   <span class="comment">// 类的名字叫做 A</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 描述接口</span></span><br><span class="line">    <span class="comment">// 公开的接口（方法）、数据、类型</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 私有的接口、数据、类型</span></span><br><span class="line">    <span class="comment">// 隐藏实现细节</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类成员默认是 private 的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    cout &lt;&lt; a.x; <span class="comment">// 错误：‘int A::x’ is private within this context</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>struct 可以看成是简化版的 class，成员默认是共有的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function">A <span class="title">add</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> A &#123;x+<span class="number">1</span>&#125;; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a&#123;<span class="number">0</span>&#125;; </span><br><span class="line">    cout &lt;&lt; a.<span class="built_in">add</span>().<span class="built_in">add</span>().x &lt;&lt; endl; <span class="comment">// 2</span></span><br><span class="line">    cout &lt;&lt; a.x;                     <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数"></a> 构造函数</h2><p>与类的名字相同，特殊的成员函数，用来完成类的初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Date</span> &#123;</span><br><span class="line">    <span class="type">int</span> y, m, d;</span><br><span class="line">    <span class="built_in">Date</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用构造函数创建对象，只是写法不同：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Date <span class="title">a</span><span class="params">(<span class="number">2002</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">Date b &#123; <span class="number">2002</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">Date c = <span class="built_in">Date</span>(<span class="number">2002</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">Date d = Date &#123; <span class="number">2002</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="定义实现成员函数"><a class="markdownIt-Anchor" href="#定义实现成员函数"></a> 定义（实现）成员函数</h2><p>将函数实现放在类声明之外：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Counter</span>(<span class="type">int</span> init_value);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Counter::<span class="built_in">Counter</span>(<span class="type">int</span> init_value)</span><br><span class="line">    : v &#123; init_value &#125;</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Counter::add</span><span class="params">()</span> </span>&#123; v++; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Counter::get_value</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> v; &#125;</span><br></pre></td></tr></table></figure><p>将实现放在类声明内，代码会被编译器嵌入到调用者中，没有调用开销。但滥用会降低可读性，难以在凌乱的实现中找到类的接口：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Counter</span>(<span class="type">int</span> init_value)</span><br><span class="line">        : v &#123; init_value &#125;</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123; v++; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_value</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5行以上的代码不适合内联形式。</p><h2 id="枚举类型"><a class="markdownIt-Anchor" href="#枚举类型"></a> 枚举类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">Month</span> &#123;</span><br><span class="line">    jan = <span class="number">1</span>, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虽然枚举的值是数字，但将 int 直接赋值给 Month。C++ 会将枚举看成是一种全新的类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">123</span>;</span><br><span class="line">Month b = a; <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><p>使用枚举类型的值时，需要指明作用域：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Month a = feb;        <span class="comment">// 编译错误</span></span><br><span class="line">Month b = Month::feb; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>也可以用 C 那种枚举，但这样子枚举值会扩散到整个作用域：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Month</span> &#123; jan = <span class="number">1</span>, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Month a = jan;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载运算符"><a class="markdownIt-Anchor" href="#重载运算符"></a> 重载运算符</h2><p>在类里添加 <code>operator[运算符]</code> 形式的成员函数，可以重载的运算符：<code>+ - * / [] ()</code> 等</p><h2 id="const-成员函数"><a class="markdownIt-Anchor" href="#const-成员函数"></a> const 成员函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> <span class="type">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> Counter c &#123;&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c.value() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 const 成员函数里不能修改对象，同样的，使用 const 修饰的对象不能调用非 const 函数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp: 错误与异常</title>
      <link href="/2022/10/21/Cpp-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/10/21/Cpp-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="常见的错误分类"><a class="markdownIt-Anchor" href="#常见的错误分类"></a> 常见的错误分类</h2><ul><li>编译时错误（语法错误）、链接时错误（缺少动态链接库、缺少函数实现）、运行时错误（由操作系统、函数库、或用户代码本身引发）</li></ul><h2 id="边界错误"><a class="markdownIt-Anchor" href="#边界错误"></a> 边界错误</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> x = v[<span class="number">5</span>]; <span class="comment">// 发生越界、最后一个元素是 v[4]</span></span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>这里访问 x 的时候越界了，但编译运行的时候没有任何提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ ./a.cpp &amp;&amp; ./a.out</span><br></pre></td></tr></table></figure><p>在运行时检测，越界时报错，通过堆栈信息可以找出越界的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># g++ -fsanitize=address -fno-omit-frame-pointer -g ./a.cpp &amp;&amp; ./a.out </span><br><span class="line">=================================================================</span><br><span class="line">==557143==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000000054 at pc 0x000000401676 bp 0x7ffcec886380 sp 0x7ffcec886378</span><br><span class="line">READ of size 4 at 0x603000000054 thread T0</span><br><span class="line">    #0 0x401675 in main a.cpp:10</span><br><span class="line">    #1 0x7f5629f0824d in __libc_start_call_main (/nix/store/c6f52mvbv0d8rd3rlslsvy7v4g3pmm7p-glibc-2.35-163/lib/libc.so.6+0x2924d)</span><br><span class="line">    #2 0x7f5629f08308 in __libc_start_main_impl (/nix/store/c6f52mvbv0d8rd3rlslsvy7v4g3pmm7p-glibc-2.35-163/lib/libc.so.6+0x29308)</span><br><span class="line">    #3 0x4017d4 in _start (/home/luo/code/cpp-exercise/a.out+0x4017d4)</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-buffer-overflow a.cpp:10 in main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go:String()方法和调试输出</title>
      <link href="/2022/10/20/Go-String-%E6%96%B9%E6%B3%95%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
      <url>/2022/10/20/Go-String-%E6%96%B9%E6%B3%95%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="string-方法"><a class="markdownIt-Anchor" href="#string-方法"></a> String() 方法</h2><p>类似与 Java 给对象定义 <code>toString()</code>，可以直接用 <code>fmt.Println</code> 输出:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Complex <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="built_in">real</span>, imaginary <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Complex)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strconv.Itoa(c.<span class="built_in">real</span>) + <span class="string">&quot;+&quot;</span> + strconv.Itoa(c.imaginary) + <span class="string">&quot;i&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := Complex&#123;<span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(&quot;a =&quot;, c) // 输出: a = &#123;1 3&#125;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a =&quot;</span>, &amp;c)   <span class="comment">// 输出: a = 1+3i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里因为给方法传引用，因此在输出的时候只能取地址 &amp;c，不然会使用默认的 String() 方法。</p><p>当然也可以直接传值，这样就不用给对象取引用了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Complex)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strconv.Itoa(c.<span class="built_in">real</span>) + <span class="string">&quot;+&quot;</span> + strconv.Itoa(c.imaginary) + <span class="string">&quot;i&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := Complex&#123;<span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;a =&quot;</span>, c) <span class="comment">// 输出: a = 1+3i</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a =&quot;</span>, &amp;c) <span class="comment">// 输出: a = 1+3i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样格式化的时候会进行额外的拷贝。</p><h2 id="用于调试的-t-v"><a class="markdownIt-Anchor" href="#用于调试的-t-v"></a> 用于调试的 %T, %#v</h2><p>在 fmt.Printf() 中使用。%T 会输出对象的类型，%#v 会输出对象各个字段的值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c := Complex&#123;<span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, c)   <span class="comment">// 输出: main.Complex</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, &amp;c) <span class="comment">// 输出: &amp;main.Complex&#123;real:1, imaginary:3&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2022/10/19/dp/"/>
      <url>/2022/10/19/dp/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构(图)</title>
      <link href="/2022/09/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/"/>
      <url>/2022/09/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="有向图"><a class="markdownIt-Anchor" href="#有向图"></a> 有向图</h2><ul><li>边有方向</li><li>顶点的连接方式：无连接、单向、双向</li><li>有向路径</li><li>有向环：起点和终点相同</li><li>简单有向环：除起点和终点以外，不含重复顶点的有向环</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nix药丸(x</title>
      <link href="/2022/09/15/Nix%E8%8D%AF%E4%B8%B8-x/"/>
      <url>/2022/09/15/Nix%E8%8D%AF%E4%B8%B8-x/</url>
      
        <content type="html"><![CDATA[<p>用来记录自己读 <a href="https://nixos.org/guides/nix-pills/why-you-should-give-it-a-try.html">Nix in Pills</a> 的一些笔记。主要是关于 NixOS 的包管理器、nix 语言入门到打包的教程。强烈推荐阅读原文。</p><ul><li>nix 官方文档：<a href="https://nixos.org/manual/nix/">https://nixos.org/manual/nix/</a></li></ul><h2 id="安装软件包"><a class="markdownIt-Anchor" href="#安装软件包"></a> 安装软件包</h2><ul><li>使用 nix-env 会将软件包安装到当前用户的环境中，用户之间的环境是隔离的。不同用户可以安装不同的软件包。</li><li>nix-env 用来管理用户环境、配置文件</li><li>hello 被安装到了 HOME 目录下面，但其实是一个指向 <code>/nix/store</code> 的一个链接，软件包其实存到了 <code>/nix-store</code> 那里</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ nix-env -i hello</span><br><span class="line">$ hello</span><br><span class="line">世界你好！</span><br><span class="line">$ which hello</span><br><span class="line">/home/luo/.nix-profile/bin/hello</span><br><span class="line">$ ls -l ~/.nix-profile/bin/hello </span><br><span class="line">/home/luo/.nix-profile/bin/hello -&gt; /nix/store/zdlqwiz6zc3jhgpns893d1igb99q7xin-hello-2.12/bin/hello</span><br></pre></td></tr></table></figure><p>列出已经安装的软件包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nix-env -q</span><br><span class="line">baobab-42.0</span><br><span class="line">d-feet-0.3.16</span><br><span class="line">gnome-menus-3.36.0</span><br></pre></td></tr></table></figure><h2 id="回滚环境"><a class="markdownIt-Anchor" href="#回滚环境"></a> 回滚环境</h2><p>使用 <code>-i</code> 安装软件包会生成新的用户环境。查看生成的用户环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nix-env --list-generations </span><br><span class="line">  30   2022-09-15 11:20:13   </span><br><span class="line">  31   2022-09-15 11:47:32   (current)</span><br></pre></td></tr></table></figure><p>滚回旧环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nix-env --rollback</span><br><span class="line">switching profile from version 31 to 30</span><br></pre></td></tr></table></figure><p>切换到新环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nix-env -G 32</span><br><span class="line">switching profile from version 30 to 32</span><br></pre></td></tr></table></figure><h2 id="查看依赖"><a class="markdownIt-Anchor" href="#查看依赖"></a> 查看依赖</h2><p>查看软件包的所有依赖的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nix-store -qR `which man`</span><br><span class="line">/nix/store/gfqwbax0x58mjnh89ca6milx41bw49lr-libunistring-1.0</span><br><span class="line">/nix/store/9jqiw71lq60sdpiniywq3msknf3wmd9c-libidn2-2.3.2</span><br><span class="line">/nix/store/lxpdbaazqd2s79jx6lngr8nak2rjdaq1-glibc-2.34-210</span><br><span class="line">/nix/store/pnqyyr621w93zqb550q5889b1ri1qah5-gcc-11.3.0-lib</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以用来导出一个软件包，将列出的文件复制到其他机器上，就相当与给它安装配置了 man 命令。</p><p>查看树状图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nix-store -q --tree `which man`</span><br></pre></td></tr></table></figure><p>查看用户环境的所有依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$nix-store -qR ~/.nix-profile</span><br></pre></td></tr></table></figure><h2 id="重置用户环境"><a class="markdownIt-Anchor" href="#重置用户环境"></a> 重置用户环境</h2><p>卸载所有在当前环境安装的软件包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nix-env -e &#x27;*&#x27;</span><br><span class="line">uninstalling &#x27;hello-2.10&#x27;</span><br><span class="line">uninstalling &#x27;nix-2.1.3&#x27;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>回滚：<code>nix-env --rollback</code></p><h2 id="channels"><a class="markdownIt-Anchor" href="#channels"></a> Channels</h2><p>感觉像是 Arch 上的软件源，可以使用 nix-channel 查看，内容存在 <code>~/.nix-channels</code> 这个文件里: <code>nix-channel --list</code></p><h2 id="nix-语言"><a class="markdownIt-Anchor" href="#nix-语言"></a> Nix 语言</h2><p>进入交互环境：<code>nix repl</code></p><p>当然也可以直接上 Nix Manual: <a href="https://nixos.org/manual/nix/stable/language/index.html">https://nixos.org/manual/nix/stable/language/index.html</a></p><h3 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h3><p>加减乘法和其他语言一样：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="number">1</span> + <span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">nix-repl&gt; <span class="number">1</span> - <span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">nix-repl&gt; <span class="number">1</span> * <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>除法需要强制在运算符旁边加空格：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="number">3.0</span> / <span class="number">2.0</span></span><br><span class="line"><span class="number">1.5</span></span><br></pre></td></tr></table></figure><p>不加被解析成路径，nix 里路径作为一种类型：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="number">3.0</span>/<span class="number">2.0</span>   </span><br><span class="line">/home/luo/<span class="number">3.0</span>/<span class="number">2.0</span></span><br></pre></td></tr></table></figure><h3 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h3><p><code>-</code> 可以用作标识符，<code>a-b</code> 这种变量名是完全 ok 的</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">a-b</span> = <span class="number">123</span></span><br><span class="line">nix-repl&gt; a-b</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3><p>可以用 <code>&quot;</code> 和 <code>''</code> 定义：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="string">&quot;foo&quot;</span></span><br><span class="line">nix-repl&gt; <span class="string">&#x27;&#x27;bar&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br></pre></td></tr></table></figure><p>字符串模板，在 <code>$&#123;&#125;</code>里可以放任何 nix 表达式，用来生成字符串：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="string">&quot;<span class="subst">$&#123;<span class="built_in">toString</span> (<span class="number">2</span> + <span class="number">3</span>)&#125;</span>&quot;</span> </span><br><span class="line"><span class="string">&quot;5&quot;</span></span><br><span class="line">nix-repl&gt; <span class="attr">foo=&quot;Hello&quot;</span>  </span><br><span class="line">nix-repl&gt; <span class="string">&quot;<span class="subst">$&#123;foo&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><p>Bash Shell 选手表示很赞</p><p>在 <code>&quot;</code> 定义的字符串里，用 <code>\$&#123;&#125;</code> 来避免表达式被替换：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="string">&quot;2 + 3 = \<span class="subst">$&#123;<span class="built_in">toString</span> (<span class="number">2</span> + <span class="number">3</span>)&#125;</span>&quot;</span>     </span><br><span class="line"><span class="string">&quot;2 + 3 = <span class="subst">$&#123;<span class="built_in">toString</span> (<span class="number">2</span> + <span class="number">3</span>)&#125;</span>&quot;</span></span><br><span class="line">nix-repl&gt; <span class="string">&quot;2 + 3 = <span class="subst">$&#123;<span class="built_in">toString</span> (<span class="number">2</span> + <span class="number">3</span>)&#125;</span>&quot;</span>  </span><br><span class="line"><span class="string">&quot;2 + 3 = 5&quot;</span></span><br></pre></td></tr></table></figure><p>在 <code>''</code> 定义的字符串里，用 <code>''$&#123;&#125;</code> 来避免表达式被替换（只能说是很怪的语法）：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="string">&#x27;&#x27;2 + 3 = <span class="char escape_">&#x27;&#x27;$</span>&#123;toString (2 + 3)&#125;&#x27;&#x27;</span>     </span><br><span class="line"><span class="string">&quot;2 + 3 = <span class="subst">$&#123;<span class="built_in">toString</span> (<span class="number">2</span> + <span class="number">3</span>)&#125;</span>&quot;</span></span><br><span class="line">nix-repl&gt; <span class="string">&quot;2 + 3 = <span class="subst">$&#123;<span class="built_in">toString</span> (<span class="number">2</span> + <span class="number">3</span>)&#125;</span>&quot;</span>  </span><br><span class="line"><span class="string">&quot;2 + 3 = 5&quot;</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3><p>不可变，增加或删除元素返回的新创建的列表</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; [ <span class="number">2</span> <span class="string">&quot;foo&quot;</span> <span class="literal">true</span> (<span class="number">2</span>+<span class="number">3</span>) ]</span><br><span class="line">[ <span class="number">2</span> <span class="string">&quot;foo&quot;</span> <span class="literal">true</span> <span class="number">5</span> ]</span><br></pre></td></tr></table></figure><h3 id="属性集"><a class="markdownIt-Anchor" href="#属性集"></a> 属性集</h3><p>类似于 js 的对象：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">s</span> = &#123;  <span class="attr">foo</span> = <span class="string">&quot;bar&quot;</span>; <span class="attr">a-b</span> = <span class="string">&quot;baz&quot;</span>; <span class="string">&quot;123&quot;</span> = <span class="string">&quot;num&quot;</span>; &#125;</span><br><span class="line">nix-repl&gt; s</span><br><span class="line">&#123; <span class="string">&quot;123&quot;</span> = <span class="string">&quot;num&quot;</span>; <span class="attr">a-b</span> = <span class="string">&quot;baz&quot;</span>; <span class="attr">foo</span> = <span class="string">&quot;bar&quot;</span>; &#125;</span><br></pre></td></tr></table></figure><p>访问属性：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; s.a-b</span><br><span class="line"><span class="string">&quot;baz&quot;</span></span><br><span class="line">nix-repl&gt; s.<span class="string">&quot;123&quot;</span> </span><br><span class="line"><span class="string">&quot;num&quot;</span></span><br></pre></td></tr></table></figure><p>属性里<strong>引用</strong>其他属性的值，需要使用递归属性集：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = a+<span class="number">4</span>; &#125;</span><br><span class="line">error: undefined variable &#x27;a&#x27;</span><br><span class="line"></span><br><span class="line">       at «string»:<span class="number">1</span>:<span class="number">14</span>:</span><br><span class="line"></span><br><span class="line">            <span class="number">1</span>| &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = a+<span class="number">4</span>; &#125;</span><br><span class="line">nix-repl&gt; <span class="keyword">rec</span> &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = a+<span class="number">4</span>; &#125;</span><br><span class="line">&#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = <span class="number">7</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="if-表达式"><a class="markdownIt-Anchor" href="#if-表达式"></a> If 表达式</h3><p>必须有 else 分支，表达式需要返回值：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">a</span> = <span class="number">3</span></span><br><span class="line">nix-repl&gt; <span class="attr">b</span> = <span class="number">4</span></span><br><span class="line">nix-repl&gt; <span class="keyword">if</span> a &gt; b <span class="keyword">then</span> <span class="string">&quot;yes&quot;</span> <span class="keyword">else</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="string">&quot;no&quot;</span></span><br></pre></td></tr></table></figure><h3 id="let-表达式"><a class="markdownIt-Anchor" href="#let-表达式"></a> Let 表达式</h3><p>用来给 in 之后的表达式定义局部变量：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="keyword">let</span> <span class="attr">a</span> = <span class="string">&quot;Hello&quot;</span>; <span class="attr">b</span> = <span class="string">&quot;World&quot;</span>; <span class="keyword">in</span> <span class="string">&quot;<span class="subst">$&#123;a&#125;</span>, <span class="subst">$&#123;b&#125;</span>&quot;</span>     </span><br><span class="line"><span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>let 表达式可以相互嵌套：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="keyword">let</span> <span class="attr">a=3;</span> <span class="keyword">in</span> <span class="keyword">let</span> <span class="attr">b=4;</span> <span class="keyword">in</span> a + b</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>可以在定义变量时引用其他变量</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="keyword">let</span> <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = a + <span class="number">4</span>; <span class="keyword">in</span> b</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="with-表达式"><a class="markdownIt-Anchor" href="#with-表达式"></a> With 表达式</h3><p>主要用来将导出属性集里的属性：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">longName</span> = &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = <span class="number">4</span>; &#125;</span><br><span class="line">nix-repl&gt; <span class="keyword">with</span> longName; a + b</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>可以和 let 表达式一起使用:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">longName</span> = &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = <span class="number">4</span>; &#125;</span><br><span class="line"><span class="keyword">with</span> longName; <span class="keyword">let</span> <span class="attr">b</span> = <span class="number">4</span>; <span class="keyword">in</span> a + b</span><br></pre></td></tr></table></figure><p>如果属性集导出的属性和外部变量冲突了，相同的值不会被覆盖：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">longName</span> = &#123; <span class="attr">a</span> = <span class="number">3</span>; &#125; </span><br><span class="line">nix-repl&gt; <span class="keyword">let</span> <span class="attr">a</span> = <span class="number">4</span>; <span class="keyword">in</span> <span class="keyword">with</span> longName; a</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>但依然可以通过 longName.a 来访问属性：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">longName</span> = &#123; <span class="attr">a</span> = <span class="number">3</span>; &#125; </span><br><span class="line">nix-repl&gt; <span class="keyword">let</span> <span class="attr">a</span> = <span class="number">4</span>; <span class="keyword">in</span> <span class="keyword">with</span> longName; longName.a</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="惰性求值"><a class="markdownIt-Anchor" href="#惰性求值"></a> 惰性求值</h3><p>nix 只会在需要的时候对表达式进行求值：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a 没有被用到 --&gt; 不会被求值 --&gt; 没有发生除 0 错误</span></span><br><span class="line">nix-repl&gt; <span class="keyword">let</span> <span class="attr">a</span> = <span class="built_in">builtins</span>.div <span class="number">4</span> <span class="number">0</span>; <span class="attr">b</span> = <span class="number">6</span>; <span class="keyword">in</span> b  </span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3><ul><li>匿名（lambdas）</li><li>只接收一个参数</li></ul><p>语法：<code>参数名: 函数体</code>，冒号旁边的空格不能省略</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; x: x * <span class="number">2</span></span><br><span class="line">«lambda @ (string):<span class="number">1</span>:<span class="number">1</span>»</span><br></pre></td></tr></table></figure><p>给 lambdas 表达式赋个值，就能调用了：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">double</span> = x: x * <span class="number">2</span></span><br><span class="line">nix-repl&gt; double</span><br><span class="line">«lambda @ (string):<span class="number">1</span>:<span class="number">2</span>»</span><br><span class="line">nix-repl&gt; double <span class="number">4</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">nix-repl&gt; double <span class="number">12</span></span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><p>当然也可以像 js 那样用立即调用函数表达式（IIFE）：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; (x: x * <span class="number">2</span>) <span class="number">121</span>   </span><br><span class="line"><span class="number">242</span></span><br></pre></td></tr></table></figure><p>把上面的过程想象成 JS 大概是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">const</span> double = <span class="keyword">function</span> (<span class="params">x</span>) &#123; <span class="keyword">return</span> x * <span class="number">2</span> &#125;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; double</span><br><span class="line">[<span class="title class_">Function</span>: double]</span><br><span class="line">&gt; <span class="title function_">double</span>(<span class="number">4</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt; <span class="title function_">double</span>(<span class="number">12</span>)</span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><p>要让函数接收多个参数，就只能嵌套 lambda 表达式：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">mul</span> = a: (b: a*b)</span><br><span class="line">nix-repl&gt; mul</span><br><span class="line">«lambda @ (string):<span class="number">1</span>:<span class="number">2</span>»</span><br><span class="line">nix-repl&gt; mul <span class="number">3</span></span><br><span class="line">«lambda @ (string):<span class="number">1</span>:<span class="number">6</span>»</span><br><span class="line">nix-repl&gt; (mul <span class="number">3</span>) <span class="number">4</span>  </span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>对应的 js 大概长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">const</span> mul = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123; <span class="keyword">return</span> a * b &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; mul</span><br><span class="line">[<span class="title class_">Function</span>: mul]</span><br><span class="line">&gt; <span class="title function_">mul</span>(<span class="number">3</span>)</span><br><span class="line">[<span class="title class_">Function</span> (anonymous)]</span><br><span class="line">&gt; <span class="title function_">mul</span>(<span class="number">3</span>)(<span class="number">4</span>)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>其实就是定义了函数的函数，调用过程大概长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(mul 3) 4 =&gt; (b: 3 * b) 4</span><br><span class="line">          =&gt; 3 * 4</span><br><span class="line">          =&gt; 12</span><br></pre></td></tr></table></figure><p>Nix 在解析代码时会自己判断合理的优先级，因此括号可以省略：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">mul</span> = a: b: a*b</span><br><span class="line">nix-repl&gt; mul</span><br><span class="line">«lambda @ (string):<span class="number">1</span>:<span class="number">2</span>»</span><br><span class="line">nix-repl&gt; mul <span class="number">3</span></span><br><span class="line">«lambda @ (string):<span class="number">1</span>:<span class="number">6</span>»</span><br><span class="line">nix-repl&gt; mul <span class="number">3</span> <span class="number">4</span>  </span><br><span class="line"><span class="number">12</span></span><br><span class="line">nix-repl&gt; mul (<span class="number">3</span>+<span class="number">4</span>) (<span class="number">5</span>+<span class="number">6</span>)</span><br><span class="line"><span class="number">77</span></span><br></pre></td></tr></table></figure><p>也可以先将函数参数打包成属性集再传进去：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">mul</span> = s: s.a*s.b</span><br><span class="line">nix-repl&gt; mul &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = <span class="number">4</span>; &#125;</span><br><span class="line"><span class="number">12</span></span><br><span class="line">nix-repl&gt; <span class="attr">mul</span> = &#123; a, b &#125;: a*b</span><br><span class="line">nix-repl&gt; mul &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = <span class="number">4</span>; &#125;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p><code>mul = &#123; a, b &#125;: a*b</code> 这种写法传进去的属性集只能有两个属性：<code>a</code> 和 <code>b</code>，不能多也不能少。</p><p>默认参数：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">mul</span> = &#123; a, b ? <span class="number">2</span> &#125;: a*b</span><br><span class="line">nix-repl&gt; mul &#123; <span class="attr">a</span> = <span class="number">3</span>; &#125;</span><br><span class="line"><span class="number">6</span></span><br><span class="line">nix-repl&gt; mul &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = <span class="number">4</span>; &#125;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>接收额外属性：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">mul</span> = &#123; a, b, ... &#125;: a*b</span><br><span class="line">nix-repl&gt; mul &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = <span class="number">4</span>; <span class="attr">c</span> = <span class="number">2</span>; &#125;</span><br></pre></td></tr></table></figure><p>使用 <code>@</code> 给传进去的属性集设置别名：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">mul</span> = s@&#123; a, b, ... &#125;: a*b*s.c</span><br><span class="line">nix-repl&gt; mul &#123; <span class="attr">a</span> = <span class="number">3</span>; <span class="attr">b</span> = <span class="number">4</span>; <span class="attr">c</span> = <span class="number">2</span>; &#125;</span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><p>既然可以传属性集，当然也能传一个列表进去（虽然没多大用就是了）：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">mul</span> = args:                                               </span><br><span class="line">          <span class="built_in">builtins</span>.elemAt args <span class="number">0</span> * <span class="built_in">builtins</span>.elemAt args <span class="number">1</span></span><br><span class="line">nix-repl&gt; mul [ <span class="number">11</span> <span class="number">22</span> ]</span><br><span class="line"><span class="number">242</span></span><br></pre></td></tr></table></figure><h3 id="导入文件"><a class="markdownIt-Anchor" href="#导入文件"></a> 导入文件</h3><p>import 是 nix 内置的函数，用来解析并执行文件内的表达式：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#x27;<span class="number">3</span>&#x27; &gt; a.nix</span><br><span class="line">$ echo &#x27;<span class="number">4</span>&#x27; &gt; b.nix</span><br><span class="line">$ echo &#x27;a: b: a * b&#x27; &gt; mul.nix</span><br><span class="line">$ nix repl</span><br><span class="line">Welcome to Nix <span class="number">2.8</span>.<span class="number">1</span>. Type :? for help.</span><br><span class="line">nix-repl&gt; <span class="attr">a</span> = <span class="built_in">import</span> ./a.nix</span><br><span class="line">nix-repl&gt; <span class="attr">b</span> = <span class="built_in">import</span> ./b.nix</span><br><span class="line">nix-repl&gt; <span class="attr">mul</span> = <span class="built_in">import</span> ./mul.nix</span><br><span class="line">nix-repl&gt; mul a b</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>nix 文件不会主动继承外部变量：</p><p>test.nix:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="keyword">let</span> <span class="attr">x</span> = <span class="number">5</span>; <span class="keyword">in</span> <span class="built_in">import</span> ./test.nix</span><br><span class="line">error: undefined variable &#x27;x&#x27;</span><br><span class="line"></span><br><span class="line">       at /tmp/a/test.nix:<span class="number">1</span>:<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">            <span class="number">1</span>| x</span><br><span class="line">             | ^</span><br></pre></td></tr></table></figure><p>向 nix 文件导入变量的方法是：使用函数</p><p>test.nix</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; a, b ? <span class="number">3</span>, trueMsg ? <span class="string">&quot;yes&quot;</span>, falseMsg ? <span class="string">&quot;no&quot;</span> &#125;:</span><br><span class="line"><span class="keyword">if</span> a &gt; b</span><br><span class="line">  <span class="keyword">then</span> <span class="built_in">builtins</span>.trace trueMsg <span class="literal">true</span></span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">builtins</span>.trace falseMsg <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="built_in">import</span> ./test.nix &#123; <span class="attr">a</span> = <span class="number">5</span>; <span class="attr">trueMsg</span> = <span class="string">&quot;ok&quot;</span>; &#125;</span><br><span class="line">trace: ok</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="打包"><a class="markdownIt-Anchor" href="#打包"></a> 打包</h2><h3 id="derivation-函数"><a class="markdownIt-Anchor" href="#derivation-函数"></a> derivation 函数</h3><p><a href="https://nixos.org/manual/nix/stable/language/derivations.html">derivation</a> 是 nix 内置的函数，用来定义软件包，接收一个属性集，其中 <code>system</code>、<code>name</code>、<code>builder</code> 这三个属性是必须的：</p><ul><li><code>system</code>：系统类型，如 <code>x86_64-darwin</code>、<code>i686-linux</code>，一般可以用 <code>builtins.currentSystem</code> 代替</li><li><code>name</code>：软件包名</li><li><code>builder</code>：构建软件包执行的二进制文件</li></ul><p><code>derivation</code> 执行后会在 <code>/nix/store</code> 下生成一个 <code>.drv</code> 文件，包含了软件包的元信息：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">d</span> = <span class="built_in">derivation</span> &#123; <span class="attr">name</span> = <span class="string">&quot;mypackage&quot;</span>; <span class="attr">builder</span> = <span class="string">&quot;mybuilder&quot;</span>; <span class="attr">system</span> = <span class="string">&quot;mysystem&quot;</span>; &#125; </span><br><span class="line">nix-repl&gt; d</span><br><span class="line">«<span class="built_in">derivation</span> /nix/store/nvvkzyjj661xjfhr64gxp920dpa3vabq-mypackage.drv»</span><br></pre></td></tr></table></figure><p>查看 .drv 文件的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ nix show-derivation //nix/store/nvvkzyjj661xjfhr64gxp920dpa3vabq-mypackage.drv</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;/nix/store/nvvkzyjj661xjfhr64gxp920dpa3vabq-mypackage.drv&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;outputs&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;out&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/nix/store/p458kqdn6gzjrd2cqgghxym6939j798f-mypackage&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;inputSrcs&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;inputDrvs&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&quot;system&quot;</span>: <span class="string">&quot;mysystem&quot;</span>,</span><br><span class="line">    <span class="string">&quot;builder&quot;</span>: <span class="string">&quot;mybuilder&quot;</span>,</span><br><span class="line">    <span class="string">&quot;args&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;builder&quot;</span>: <span class="string">&quot;mybuilder&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mypackage&quot;</span>,</span><br><span class="line">      <span class="string">&quot;out&quot;</span>: <span class="string">&quot;/nix/store/p458kqdn6gzjrd2cqgghxym6939j798f-mypackage&quot;</span>,</span><br><span class="line">      <span class="string">&quot;system&quot;</span>: <span class="string">&quot;mysystem&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当构建软件包时，整个构建过程在一个隔离的环境中进行，不会从当前 shell 继承环境变量，只有 .drv 文件里 <code>env</code> 那部分环境变量才能被 builder 所使用。</p><p>在 nix repl 里构建软件包：<code>:b</code> 命令</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; <span class="attr">d</span> = <span class="built_in">derivation</span> &#123; <span class="attr">name</span> = <span class="string">&quot;mypackage&quot;</span>; <span class="attr">builder</span> = <span class="string">&quot;mybuilder&quot;</span>; <span class="attr">system</span> = <span class="string">&quot;mysystem&quot;</span>; &#125; </span><br><span class="line">nix-repl&gt; :b d</span><br><span class="line">error: a &#x27;mysystem&#x27; <span class="keyword">with</span> features &#123;&#125; is required to build &#x27;/nix/store/nvvkzyjj661xjfhr64gxp920dpa3vabq-mypackage.drv&#x27;, but I am a &#x27;x86_64-linux&#x27; <span class="keyword">with</span> features &#123;benchmark, big-parallel, kvm, nixos-test&#125;</span><br><span class="line">[<span class="number">0.0</span> MiB DL]</span><br></pre></td></tr></table></figure><p>在 nix repl 外构建软件包：<code>nix-store -r &lt;drv 文件路径&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nix-store -r /nix/store/3ln5l2s4jsi9b4fdgrqrs1vpfrng577d-myname.drv</span><br><span class="line">this derivation will be built:</span><br><span class="line">  /nix/store/3ln5l2s4jsi9b4fdgrqrs1vpfrng577d-myname.drv</span><br><span class="line">building <span class="string">&#x27;/nix/store/3ln5l2s4jsi9b4fdgrqrs1vpfrng577d-myname.drv&#x27;</span>...</span><br><span class="line">error: builder <span class="keyword">for</span> <span class="string">&#x27;/nix/store/3ln5l2s4jsi9b4fdgrqrs1vpfrng577d-myname.drv&#x27;</span> failed to produce output path <span class="keyword">for</span> output <span class="string">&#x27;out&#x27;</span> at <span class="string">&#x27;/nix/store/3ln5l2s4jsi9b4fdgrqrs1vpfrng577d-myname.drv.chroot/nix/store/5xk3bxckdamy8mjav6pb2m6nbsv6v5a1-myname&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用-bash-脚本作为-builder"><a class="markdownIt-Anchor" href="#使用-bash-脚本作为-builder"></a> 使用 bash 脚本作为 builder</h3><h4 id="导入-nixpkgs"><a class="markdownIt-Anchor" href="#导入-nixpkgs"></a> 导入 nixpkgs</h4><p>nixpkgs 包含了 nix 所有软件包的元数据，在 repl 中，可以使用 <code>:l &lt;nixpkgs&gt;</code> 导入 nixpkgs 的所有属性，之后就可以查询软件包的路径了：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; :l &lt;nixpkgs&gt; </span><br><span class="line">Added <span class="number">16535</span> variables.</span><br><span class="line">nix-repl&gt; <span class="string">&quot;<span class="subst">$&#123;rustc&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&quot;/nix/store/l4hnh2x7nr6jmzypg1p0wv90yascvqnn-rustc-1.60.0&quot;</span></span><br><span class="line">nix-repl&gt; <span class="string">&quot;<span class="subst">$&#123;bash&#125;</span>&quot;</span>  </span><br><span class="line"><span class="string">&quot;/nix/store/xbdqbi2mscmhl5wcpbgpjdwxbsrvpkil-bash-5.1-p16&quot;</span></span><br><span class="line">nix-repl&gt; <span class="string">&quot;<span class="subst">$&#123;gcc&#125;</span>&quot;</span>  </span><br><span class="line"><span class="string">&quot;/nix/store/yzs8390walgk2rwl6i5li2g672hdn0kv-gcc-wrapper-11.3.0&quot;</span></span><br></pre></td></tr></table></figure><p>之后编写打包时要执行的脚本：<code>builder.sh</code>，这里的 out 则是在 .drv 中生成的环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"><span class="built_in">echo</span> foo &gt; <span class="variable">$out</span></span><br></pre></td></tr></table></figure><p>在 repl里定义元件包，将 bash shell 的路径作为 builder，system 则沿用当前的系统：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nix-repl&gt; :l &lt;nixpkgs&gt;</span><br><span class="line">Added <span class="number">16535</span> variables.</span><br><span class="line">nix-repl&gt; <span class="string">&quot;<span class="subst">$&#123;bash&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&quot;/nix/store/xbdqbi2mscmhl5wcpbgpjdwxbsrvpkil-bash-5.1-p16&quot;</span></span><br><span class="line">nix-repl&gt; <span class="attr">d</span> = <span class="built_in">derivation</span> &#123;                 </span><br><span class="line">          <span class="attr">name</span> = <span class="string">&quot;bashbuilderpkg&quot;</span>;         </span><br><span class="line">          <span class="attr">builder</span> = <span class="string">&quot;<span class="subst">$&#123;bash&#125;</span>/bin/bash&quot;</span>;    </span><br><span class="line">          <span class="attr">system</span> = <span class="built_in">builtins</span>.currentSystem;</span><br><span class="line">          <span class="attr">args</span> = [ ./builder.sh ];         </span><br><span class="line">          &#125;</span><br><span class="line">nix-repl&gt; :b d</span><br><span class="line">[<span class="number">0</span>/<span class="number">1</span> built] querying bashbuilderpkg on https://mirrors.tuna.tsinghua.edu.c</span><br><span class="line"></span><br><span class="line">This <span class="built_in">derivation</span> produced the following outputs:</span><br><span class="line">  out -&gt; /nix/store/qkwa2c986xval09amhb541205lccb3g8-bashbuilderpkg</span><br><span class="line">[<span class="number">1</span> built, <span class="number">0.0</span> MiB DL]</span><br></pre></td></tr></table></figure><p>这里将 bash shell 的文件路径作为 <code>builder</code>，而多了一个 <code>args</code> 的属性，这个属性将被作为 <code>builder</code> 的命令参数。这里就相当于在构建的时候执行 <code>bash ./builder.sh</code>，当然 <code>builder.sh</code> 在构建时已经被复制到 <code>/nix/store</code>了，执行的是 <code>/nix/store</code> 里的 <code>builder.sh</code>。</p><p>输出结果就是将 <code>foo</code> 写入 <code>/nix/store/qkwa2c986xval09amhb541205lccb3g8-bashbuilderpkg</code>，也就是 <code>$out</code> 环境变量中。</p><p>注意的是 <code>args</code> 里面的数据类型是<strong>路径</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /nix/store/qkwa2c986xval09amhb541205lccb3g8-bashbuilderpkg</span><br><span class="line">foo</span><br><span class="line">$ </span><br></pre></td></tr></table></figure><p>当然也可以查看 .drv 文件的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ nix show-derivation /nix/store/nx8gr08m20ix951sn92pswmmag7bylqx-bashbuilderpkg.drv</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;/nix/store/nx8gr08m20ix951sn92pswmmag7bylqx-bashbuilderpkg.drv&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;outputs&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;out&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/nix/store/qkwa2c986xval09amhb541205lccb3g8-bashbuilderpkg&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;inputSrcs&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;/nix/store/2cdc3wsrmynhbzzzbs9n95cv4xm39ixc-builder.sh&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;inputDrvs&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/nix/store/9rd3h7acgcirfvgvxvq7h58s45af4agn-bash-5.1-p16.drv&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;out&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;system&quot;</span>: <span class="string">&quot;x86_64-linux&quot;</span>,</span><br><span class="line">    <span class="string">&quot;builder&quot;</span>: <span class="string">&quot;/nix/store/xbdqbi2mscmhl5wcpbgpjdwxbsrvpkil-bash-5.1-p16/bin/bash&quot;</span>,</span><br><span class="line">    <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;/nix/store/2cdc3wsrmynhbzzzbs9n95cv4xm39ixc-builder.sh&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;builder&quot;</span>: <span class="string">&quot;/nix/store/xbdqbi2mscmhl5wcpbgpjdwxbsrvpkil-bash-5.1-p16/bin/bash&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;bashbuilderpkg&quot;</span>,</span><br><span class="line">      <span class="string">&quot;out&quot;</span>: <span class="string">&quot;/nix/store/qkwa2c986xval09amhb541205lccb3g8-bashbuilderpkg&quot;</span>,</span><br><span class="line">      <span class="string">&quot;system&quot;</span>: <span class="string">&quot;x86_64-linux&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>args</code> 那里的 <code>builder.sh</code> 已经被复制到 <code>/nix/store</code> 里了，<code>bash</code> 的路径也被填充到实际存储的位置。</p><h3 id="编译-c-程序"><a class="markdownIt-Anchor" href="#编译-c-程序"></a> 编译 C 程序</h3><p>simple.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Simple!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://builder.sh">builder.sh</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -ex</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$coreutils</span>/bin:<span class="variable">$gcc</span>/bin</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$out</span></span><br><span class="line">gcc -o <span class="variable">$out</span>/simple <span class="variable">$src</span></span><br></pre></td></tr></table></figure><p>在 repl 中导入 nixpkgs，生成 .drv 文件：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ nix repl</span><br><span class="line">Welcome to Nix <span class="number">2.8</span>.<span class="number">1</span>. Type :? for help.</span><br><span class="line"></span><br><span class="line">nix-repl&gt; :l &lt;nixpkgs&gt;</span><br><span class="line">Added <span class="number">16535</span> variables.</span><br><span class="line">nix-repl&gt; <span class="attr">d</span> = <span class="built_in">derivation</span> &#123;</span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;simple_c&quot;</span>;</span><br><span class="line">    <span class="attr">system</span> = <span class="built_in">builtins</span>.currentSystem;</span><br><span class="line">    <span class="attr">builder</span> = <span class="string">&quot;<span class="subst">$&#123;bash&#125;</span>/bin/bash&quot;</span>;</span><br><span class="line">    <span class="attr">args</span> = [ ./builder.sh ];</span><br><span class="line">    <span class="attr">gcc</span> = gcc;</span><br><span class="line">    <span class="attr">coreutils</span> = coreutils;</span><br><span class="line">    <span class="attr">src</span> = ./simple.c;</span><br><span class="line">&#125;</span><br><span class="line">nix-repl&gt; :b d</span><br><span class="line">This <span class="built_in">derivation</span> produced the following outputs:</span><br><span class="line">  out -&gt; /nix/store/cwxmpg1gwfa1i4kzfcxn8mhpjfw206k5-simple_c</span><br><span class="line">[<span class="number">1</span> built, <span class="number">0.0</span> MiB DL]</span><br><span class="line">nix-repl&gt; :q</span><br><span class="line">$ /nix/store/cwxmpg1gwfa1i4kzfcxn8mhpjfw206k5-simple_c/simple </span><br><span class="line">Simple!</span><br></pre></td></tr></table></figure><p>这里在传递给 <code>derivation</code> 属性集里添加了几个自定义的属性：<code>gcc</code>、<code>coreutils</code>、<code>src</code>，这些属性将会导出成 <code>builder</code> 编译时需要的环境变量。</p><p>可以将 <code>derivation</code> 函数里的内容写到一个 <code>simple.nix</code> 文件里：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> (<span class="built_in">import</span> &lt;nixpkgs&gt; &#123;&#125;); <span class="built_in">derivation</span> &#123;</span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;simple_c&quot;</span>;</span><br><span class="line">    <span class="attr">system</span> = <span class="built_in">builtins</span>.currentSystem;</span><br><span class="line">    <span class="attr">builder</span> = <span class="string">&quot;<span class="subst">$&#123;bash&#125;</span>/bin/bash&quot;</span>;</span><br><span class="line">    <span class="attr">args</span> = [ ./builder.sh ];</span><br><span class="line">    <span class="keyword">inherit</span> gcc coreutils;</span><br><span class="line">    <span class="attr">src</span> = ./simple.c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>import &lt;nixpkgs&gt; &#123;&#125;</code> 相当与 repl 里的 <code>:l &lt;nixpkgs&gt;</code></li><li><code>inherit gcc coreutils</code> 给属性集添加了两个属性，其值继承自 nixpkgs 的值</li></ul><p>构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nix-build ./simple.nix</span><br><span class="line">/nix/store/cwxmpg1gwfa1i4kzfcxn8mhpjfw206k5-simple_c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cs_architecture_notes</title>
      <link href="/2022/04/01/cs-architecture-notes/"/>
      <url>/2022/04/01/cs-architecture-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a class="markdownIt-Anchor" href="#第一章"></a> 第一章</h2><h3 id="cpu-时间性能计算公式"><a class="markdownIt-Anchor" href="#cpu-时间性能计算公式"></a> CPU 时间（性能计算公式）</h3><ul><li>时钟周期：CPU运行一个时钟周期所需要的时间</li></ul><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -7.919ex;" xmlns="http://www.w3.org/2000/svg" width="59.463ex" height="16.968ex" role="img" focusable="false" viewBox="0 -4000 26282.8 7500" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,3250)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(1511,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(716,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(706,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1584,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width: 3;"/></g></g></g></g><g data-mml-node="mtd" transform="translate(3726.6,0)"><g data-mml-node="mi"/><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mtd" transform="translate(5060.3,0)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">段</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">程</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">序</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">执</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">花</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">费</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(9000,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(9760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(10511,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(11278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(12278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g></g><g data-mml-node="mtr" transform="translate(0,1950)"><g data-mml-node="mtd" transform="translate(3726.6,0)"/></g><g data-mml-node="mtr" transform="translate(0,650)"><g data-mml-node="mtd" transform="translate(3726.6,0)"/><g data-mml-node="mtd" transform="translate(3726.6,0)"><g data-mml-node="mi"/><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mtd" transform="translate(5060.3,0)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">总</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">钟</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">期</text></g><g data-mml-node="mo" transform="translate(5222.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(6222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text></g><g data-mml-node="mi" transform="translate(7222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(8222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(9222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">期</text></g><g data-mml-node="mi" transform="translate(10222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">花</text></g><g data-mml-node="mi" transform="translate(11222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">费</text></g><g data-mml-node="mi" transform="translate(12222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(13222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(14222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mi" transform="translate(15222.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(16222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(17222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">期</text></g><g data-mml-node="mi" transform="translate(18222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">长</text></g><g data-mml-node="mi" transform="translate(19222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mi" transform="translate(20222.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-650)"><g data-mml-node="mtd" transform="translate(3726.6,0)"/></g><g data-mml-node="mtr" transform="translate(0,-1950)"><g data-mml-node="mtd" transform="translate(3726.6,0)"/><g data-mml-node="mtd" transform="translate(3726.6,0)"><g data-mml-node="mi"/><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mtd" transform="translate(5060.3,0)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">总</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">钟</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">期</text></g><g data-mml-node="mo" transform="translate(5222.2,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(6222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(7222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">钟</text></g><g data-mml-node="mi" transform="translate(8222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">频</text></g><g data-mml-node="mi" transform="translate(9222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g></g></g><g data-mml-node="mtr" transform="translate(0,-3250)"><g data-mml-node="mtd" transform="translate(3726.6,0)"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtable displaystyle="true" columnalign="right center left" columnspacing="0em 0.278em" rowspacing="3pt"><mtr><mtd><mi>C</mi><mi>P</mi><msub><mi>U</mi><mrow data-mjx-texclass="ORD"><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub></mtd><mtd><mi/><mo>=</mo></mtd><mtd><mi mathvariant="normal">一</mi><mi mathvariant="normal">段</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">序</mi><mi mathvariant="normal">执</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">花</mi><mi mathvariant="normal">费</mi><mi mathvariant="normal">的</mi><mi>C</mi><mi>P</mi><mi>U</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mtd></mtr><mtr><mtd/></mtr><mtr><mtd/><mtd><mi/><mo>=</mo></mtd><mtd><mi mathvariant="normal">总</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">周</mi><mi mathvariant="normal">期</mi><mo>×</mo><mi mathvariant="normal">每</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">周</mi><mi mathvariant="normal">期</mi><mi mathvariant="normal">花</mi><mi mathvariant="normal">费</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mi>（</mi><mi mathvariant="normal">周</mi><mi mathvariant="normal">期</mi><mi mathvariant="normal">长</mi><mi mathvariant="normal">度</mi><mi>）</mi></mtd></mtr><mtr><mtd/></mtr><mtr><mtd/><mtd><mi/><mo>=</mo></mtd><mtd><mi mathvariant="normal">总</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">周</mi><mi mathvariant="normal">期</mi><mo>÷</mo><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">频</mi><mi mathvariant="normal">率</mi></mtd></mtr><mtr><mtd/></mtr></mtable></math></mjx-assistive-mml></mjx-container><ul><li>IC：一段程序的总指令数</li><li>CPI：指令时钟数：一个指令需要的时钟周期数<br /><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="26.776ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 11835 950" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2292.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3348.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">总</text></g><g data-mml-node="mi" transform="translate(4348.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(5348.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">钟</text></g><g data-mml-node="mi" transform="translate(6348.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(7348.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">期</text></g><g data-mml-node="mi" transform="translate(8348.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(9570.8,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(10571,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(11075,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mi>P</mi><mi>I</mi><mo>=</mo><mi mathvariant="normal">总</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">周</mi><mi mathvariant="normal">期</mi><mi mathvariant="normal">数</mi><mo>÷</mo><mi>I</mi><mi>C</mi></math></mjx-assistive-mml></mjx-container></li></ul><p>因此</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -3.507ex;" xmlns="http://www.w3.org/2000/svg" width="33.448ex" height="8.145ex" role="img" focusable="false" viewBox="0 -2050 14784.2 3600" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,1300)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(1511,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(716,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(706,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1584,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width: 3;"/></g></g></g></g><g data-mml-node="mtd" transform="translate(3726.6,0)"><g data-mml-node="mi"/><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mtd" transform="translate(5060.3,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2237.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3237.4,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3741.4,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4723.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(5723.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(6723.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">期</text></g><g data-mml-node="mi" transform="translate(7723.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">长</text></g><g data-mml-node="mi" transform="translate(8723.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g></g></g><g data-mml-node="mtr" transform="translate(0,0)"><g data-mml-node="mtd" transform="translate(3726.6,0)"/></g><g data-mml-node="mtr" transform="translate(0,-1300)"><g data-mml-node="mtd" transform="translate(3726.6,0)"/><g data-mml-node="mtd" transform="translate(3726.6,0)"><g data-mml-node="mi"/><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mtd" transform="translate(5060.3,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2237.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3237.4,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3741.4,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4723.7,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(5723.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(6723.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">钟</text></g><g data-mml-node="mi" transform="translate(7723.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">频</text></g><g data-mml-node="mi" transform="translate(8723.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtable displaystyle="true" columnalign="right center left" columnspacing="0em 0.278em" rowspacing="3pt"><mtr><mtd><mi>C</mi><mi>P</mi><msub><mi>U</mi><mrow data-mjx-texclass="ORD"><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub></mtd><mtd><mi/><mo>=</mo></mtd><mtd><mi>C</mi><mi>P</mi><mi>I</mi><mo>×</mo><mi>I</mi><mi>C</mi><mo>×</mo><mi mathvariant="normal">周</mi><mi mathvariant="normal">期</mi><mi mathvariant="normal">长</mi><mi mathvariant="normal">度</mi></mtd></mtr><mtr><mtd/></mtr><mtr><mtd/><mtd><mi/><mo>=</mo></mtd><mtd><mi>C</mi><mi>P</mi><mi>I</mi><mo>×</mo><mi>I</mi><mi>C</mi><mo>÷</mo><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">频</mi><mi mathvariant="normal">率</mi></mtd></mtr></mtable></math></mjx-assistive-mml></mjx-container><p>计算机系统有 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi></math></mjx-assistive-mml></mjx-container> 种指令，第 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math></mjx-assistive-mml></mjx-container> 种指令的指令数目为 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.498ex" height="1.952ex" role="img" focusable="false" viewBox="0 -705 1546 862.8" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(504,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><msub><mi>C</mi><mi>i</mi></msub></math></mjx-assistive-mml></mjx-container>，执行一条指令需要 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.154ex" height="1.952ex" role="img" focusable="false" viewBox="0 -705 2278 862.8" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(1511,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mi>P</mi><msub><mi>I</mi><mi>i</mi></msub></math></mjx-assistive-mml></mjx-container>个时钟周期，总 CPU 执行时间：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -1.018ex;" xmlns="http://www.w3.org/2000/svg" width="40.085ex" height="3.167ex" role="img" focusable="false" viewBox="0 -950 17717.6 1400" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(1511,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(716,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(706,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1584,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(4004.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5060.1,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6670.8,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(893,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(2157.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3157.4,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3917.4,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(4668.4,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(5435.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(12717.4,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(13717.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(14717.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">钟</text></g><g data-mml-node="mi" transform="translate(15717.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">频</text></g><g data-mml-node="mi" transform="translate(16717.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>C</mi><mi>P</mi><msub><mi>U</mi><mrow data-mjx-texclass="ORD"><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo>=</mo><mo data-mjx-texclass="OP">∑</mo><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><mi>I</mi><msub><mi>C</mi><mi>i</mi></msub><mo>×</mo><mi>C</mi><mi>P</mi><msub><mi>I</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mo>÷</mo><mi mathvariant="normal">时</mi><mi mathvariant="normal">钟</mi><mi mathvariant="normal">频</mi><mi mathvariant="normal">率</mi></math></mjx-assistive-mml></mjx-container><p>执行每条指令的平均周期长度：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -1.018ex;" xmlns="http://www.w3.org/2000/svg" width="29.646ex" height="3.167ex" role="img" focusable="false" viewBox="0 -950 13103.3 1400" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2292.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3348.6,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4792.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(5181.6,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(5685.6,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(6949.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(7950,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(8710,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(9461,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(10227.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(10839.1,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(11839.3,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(12343.3,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>C</mi><mi>P</mi><mi>I</mi><mo>=</mo><mo data-mjx-texclass="OP">∑</mo><mo stretchy="false">(</mo><mi>I</mi><msub><mi>C</mi><mi>i</mi></msub><mo>×</mo><mi>C</mi><mi>P</mi><msub><mi>I</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>÷</mo><mi>I</mi><mi>C</mi></math></mjx-assistive-mml></mjx-container>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL超级宝典第七版学习笔记 (6)：着色器和程序</title>
      <link href="/2022/03/04/openglsb7rs-6/"/>
      <url>/2022/03/04/openglsb7rs-6/</url>
      
        <content type="html"><![CDATA[<h2 id="0准备"><a class="markdownIt-Anchor" href="#0准备"></a> 0.准备</h2><ul><li>The OpenGL® Shading Language：<a href="https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf">https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf</a></li></ul><p>为 vscode 配置 glsl 插件：</p><ul><li>编辑器：vscode</li><li>拓展：GLSL Lint、Shader languages support for VS Code</li><li><a href="https://github.com/KhronosGroup/glslang%EF%BC%8C">https://github.com/KhronosGroup/glslang，</a><code>pacman -S glslang</code>，/usr/bin/glslangValidator</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glslangValidator -S vert test.vs</span><br></pre></td></tr></table></figure><h2 id="1-glsl"><a class="markdownIt-Anchor" href="#1-glsl"></a> 1. GLSL</h2><h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h3><h3 id="向量-矩阵操作"><a class="markdownIt-Anchor" href="#向量-矩阵操作"></a> 向量、矩阵操作</h3><h3 id="数学运算函数"><a class="markdownIt-Anchor" href="#数学运算函数"></a> 数学运算函数</h3><h2 id="2-获取着色器错误信息"><a class="markdownIt-Anchor" href="#2-获取着色器错误信息"></a> 2. 获取着色器错误信息</h2><h3 id="着色器编译错误"><a class="markdownIt-Anchor" href="#着色器编译错误"></a> 着色器编译错误</h3><p>-<strong>查询着色器信息</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glGetShaderiv</span><span class="params">(GLuint shader,</span></span><br><span class="line"><span class="params">                   GLenum pname,</span></span><br><span class="line"><span class="params">                   GLint *params)</span>;</span><br></pre></td></tr></table></figure><p>GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH<br />-<strong>获取错误日志</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glGetShaderInfoLog</span><span class="params">(GLuint shader,</span></span><br><span class="line"><span class="params">                        GLsizei maxLength,</span></span><br><span class="line"><span class="params">                        GLsizei *length,</span></span><br><span class="line"><span class="params">                        GLchar *infoLog)</span>;</span><br></pre></td></tr></table></figure><p>-用 <code>GL_COMPILE_STATUS</code> 查询编译状态，如果编译失败，用 <code>glGetShaderInfoLog()</code> 存储错误信息：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">test_shader</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt; &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">src</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout (location = 0) out vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     uniform scale;</span></span><br><span class="line"><span class="string">#     uniform vec3 bias;</span></span><br><span class="line"><span class="string">#     </span></span><br><span class="line"><span class="string">#     void main(void)</span></span><br><span class="line"><span class="string">#     &#123;</span></span><br><span class="line"><span class="string">#         color = vec4(1.0, 0.5, 0.2, 1.0) * scale + bias;</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">src</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(src)?;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">shader</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#     gl::<span class="title function_ invoke__">ShaderSource</span>(shader, <span class="number">1</span>, &amp;src.<span class="title function_ invoke__">as_ptr</span>(), std::ptr::<span class="title function_ invoke__">null</span>());</span><br><span class="line">gl::<span class="title function_ invoke__">CompileShader</span>(shader);</span><br><span class="line"></span><br><span class="line"><span class="comment">// check shader compile status</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">success</span> = <span class="number">0</span>;</span><br><span class="line">gl::<span class="title function_ invoke__">GetShaderiv</span>(shader, gl::COMPILE_STATUS, &amp;<span class="keyword">mut</span> success);</span><br><span class="line">    <span class="keyword">if</span> success != gl::TRUE <span class="keyword">as</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="comment">// get log length</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">len</span> = <span class="number">0</span>;</span><br><span class="line">        gl::<span class="title function_ invoke__">GetShaderiv</span>(shader, gl::INFO_LOG_LENGTH, &amp;<span class="keyword">mut</span> len);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// alloc buffer to store log info</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">log</span>: <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(len <span class="keyword">as</span> _);</span><br><span class="line">        log.<span class="title function_ invoke__">resize</span>(len <span class="keyword">as</span> _, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use glGetShaderInfoLog() to store log info</span></span><br><span class="line">        gl::<span class="title function_ invoke__">GetShaderInfoLog</span>(shader, len,</span><br><span class="line">                            std::ptr::<span class="title function_ invoke__">null_mut</span>(),</span><br><span class="line">                            log.<span class="title function_ invoke__">as_mut_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print error log</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">log</span> = std::<span class="type">str</span>::<span class="title function_ invoke__">from_utf8</span>(&amp;log)?;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, log);</span><br><span class="line">    &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#         <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = <span class="keyword">unsafe</span> &#123; <span class="title function_ invoke__">test_shader</span>() &#125; &#123;</span><br><span class="line">#             <span class="built_in">println!</span>(<span class="string">&quot;err: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#     App.<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br></pre></td></tr></table></figure><p>这是 <a href="http://docs.gl">docs.gl</a> 里使用的方法，书里没有检查 COMPILE_STATUS，反正效果一样就是了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">test_shader</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt; &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">src</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout (location = 0) out vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     uniform scale;</span></span><br><span class="line"><span class="string">#     uniform vec3 bias;</span></span><br><span class="line"><span class="string">#     </span></span><br><span class="line"><span class="string">#     void main(void)</span></span><br><span class="line"><span class="string">#     &#123;</span></span><br><span class="line"><span class="string">#         color = vec4(1.0, 0.5, 0.2, 1.0) * scale + bias;</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(src)?;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">shader</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#     gl::<span class="title function_ invoke__">ShaderSource</span>(shader, <span class="number">1</span>, &amp;vs_src.<span class="title function_ invoke__">as_ptr</span>(), std::ptr::<span class="title function_ invoke__">null</span>());</span><br><span class="line">#     gl::<span class="title function_ invoke__">CompileShader</span>(shader);</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">len</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">log</span>: <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(len <span class="keyword">as</span> _);</span><br><span class="line"></span><br><span class="line">    gl::<span class="title function_ invoke__">GetShaderiv</span>(shader, gl::INFO_LOG_LENGTH, &amp;<span class="keyword">mut</span> len);</span><br><span class="line">    log.<span class="title function_ invoke__">resize</span>(len <span class="keyword">as</span> _, <span class="number">0</span>);</span><br><span class="line">    gl::<span class="title function_ invoke__">GetShaderInfoLog</span>(shader, len, std::ptr::<span class="title function_ invoke__">null_mut</span>(),</span><br><span class="line">                        log.<span class="title function_ invoke__">as_mut_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">log</span> = std::<span class="type">str</span>::<span class="title function_ invoke__">from_utf8</span>(&amp;log)?;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, log);</span><br><span class="line"># </span><br><span class="line">#     <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#         <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = <span class="keyword">unsafe</span> &#123; <span class="title function_ invoke__">test_shader</span>() &#125; &#123;</span><br><span class="line">#             <span class="built_in">println!</span>(<span class="string">&quot;err: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#     App.<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>着色器：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version <span class="number">460</span> core</span><br><span class="line"></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">out</span> <span class="type">vec4</span> color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> scale;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> bias;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    color = <span class="type">vec4</span>(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">1.0</span>) * scale + bias;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的错误输出，不同的 OpenGL 实现输出的信息不同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0:5(15): error: syntax error, unexpected &#x27;;&#x27;, expecting &#x27;&#123;&#x27;</span><br></pre></td></tr></table></figure><p>// todo webgl_demo</p><h3 id="着色器程序链接错误"><a class="markdownIt-Anchor" href="#着色器程序链接错误"></a> 着色器程序链接错误</h3><p><code>glGetProgramInfoLog()</code> <code>glGetProgramiv()</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">test_shader</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt; &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main(void)</span></span><br><span class="line"><span class="string">#     &#123;</span></span><br><span class="line"><span class="string">#         const vec4 vertices[3] = &#123;</span></span><br><span class="line"><span class="string">#             vec4( 0.25, -0.25, 0.5, 1.0),</span></span><br><span class="line"><span class="string">#             vec4(-0.25, -0.25, 0.5, 1.0),</span></span><br><span class="line"><span class="string">#             vec4( 0.25,  0.25, 0.5, 1.0)</span></span><br><span class="line"><span class="string">#         &#125;;</span></span><br><span class="line"><span class="string">#   </span></span><br><span class="line"><span class="string">#         gl_Position = vertices[gl_VertexID];</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(vs_src)?;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#     gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_src.<span class="title function_ invoke__">as_ptr</span>(), std::ptr::<span class="title function_ invoke__">null</span>());</span><br><span class="line">#     gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_src</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout (location = 0) out vec4 color;</span></span><br><span class="line"><span class="string">#     </span></span><br><span class="line"><span class="string">#     vec3 myFunction();</span></span><br><span class="line"><span class="string">#     </span></span><br><span class="line"><span class="string">#     void main(void)</span></span><br><span class="line"><span class="string">#     &#123;</span></span><br><span class="line"><span class="string">#         color = vec4(myFunction(), 1.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_src</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(fs_src)?;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#     gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_src.<span class="title function_ invoke__">as_ptr</span>(), std::ptr::<span class="title function_ invoke__">null</span>());</span><br><span class="line">#     gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">    gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">    gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">    gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">len</span> = <span class="number">0</span>;</span><br><span class="line">    gl::<span class="title function_ invoke__">GetProgramiv</span>(program, gl::INFO_LOG_LENGTH, &amp;<span class="keyword">mut</span> len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">log</span>: <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(len <span class="keyword">as</span> _);</span><br><span class="line">    log.<span class="title function_ invoke__">resize</span>(len <span class="keyword">as</span> _, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    gl::<span class="title function_ invoke__">GetProgramInfoLog</span>(program, len, std::ptr::<span class="title function_ invoke__">null_mut</span>(),</span><br><span class="line">                          log.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, std::<span class="type">str</span>::<span class="title function_ invoke__">from_utf8</span>(&amp;log)?);</span><br><span class="line"></span><br><span class="line">#     <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#         <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = <span class="keyword">unsafe</span> &#123; <span class="title function_ invoke__">test_shader</span>() &#125; &#123;</span><br><span class="line">#             <span class="built_in">println!</span>(<span class="string">&quot;err: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#     App.<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><h2 id="3-单独程序"><a class="markdownIt-Anchor" href="#3-单独程序"></a> 3. 单独程序</h2><p>在 <code>glLinkProgram()</code> 前调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glProgramParameteri</span><span class="params">(GLuint program,</span></span><br><span class="line"><span class="params">                         GLenum pname,</span></span><br><span class="line"><span class="params">                         GLint value)</span>;</span><br></pre></td></tr></table></figure><p>类似与 <code>glTexParameteri()</code>，<code>pname</code> = <code>GL_PROGRAM_SEPARABLE</code>，value = <code>GL_TRUE</code>，调用 <code>glUseProgramStages()</code> 将 program 添加到管线对象里。<code>glBindProgramPipeline()</code>：使用管线对象进行渲染</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     vao: <span class="type">u32</span>,</span><br><span class="line">#     pipeline: <span class="type">u32</span>,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">init_pipeline</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">u32</span>, <span class="type">Box</span>&lt;<span class="keyword">dyn</span> std::error::Error&gt;&gt; &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(</span><br><span class="line">#         <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main(void)</span></span><br><span class="line"><span class="string">#         &#123;</span></span><br><span class="line"><span class="string">#             const vec4 vertices[3] = &#123;</span></span><br><span class="line"><span class="string">#                 vec4( 0.5, -0.5, 0.0, 1.0),</span></span><br><span class="line"><span class="string">#                 vec4(-0.5, -0.5, 0.0, 1.0),</span></span><br><span class="line"><span class="string">#                 vec4( 0.0,  0.5, 0.0, 1.0)</span></span><br><span class="line"><span class="string">#             &#125;;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#             const vec4 colors[3] = &#123;</span></span><br><span class="line"><span class="string">#                 vec4(1.0, 0.0, 0.0, 1.0),</span></span><br><span class="line"><span class="string">#                 vec4(0.0, 1.0, 0.0, 1.0),</span></span><br><span class="line"><span class="string">#                 vec4(0.0, 0.0, 1.0, 1.0),</span></span><br><span class="line"><span class="string">#             &#125;;</span></span><br><span class="line"><span class="string">#     </span></span><br><span class="line"><span class="string">#             gl_Position = vertices[gl_VertexID];</span></span><br><span class="line"><span class="string">#             vs_color = colors[gl_VertexID];</span></span><br><span class="line"><span class="string">#         &#125;&quot;</span>,</span><br><span class="line">#     )?;</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">    gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_src.<span class="title function_ invoke__">as_ptr</span>(), std::ptr::<span class="title function_ invoke__">null</span>());</span><br><span class="line">    gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_src</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(</span><br><span class="line">#         <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         layout (location = 0) out vec4 color;</span></span><br><span class="line"><span class="string">#         in vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main(void)</span></span><br><span class="line"><span class="string">#         &#123;</span></span><br><span class="line"><span class="string">#             color = vs_color;</span></span><br><span class="line"><span class="string">#         &#125;&quot;</span>,</span><br><span class="line">#     )?;</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">    gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_src.<span class="title function_ invoke__">as_ptr</span>(), std::ptr::<span class="title function_ invoke__">null</span>());</span><br><span class="line">    gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">vs_prog</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">    gl::<span class="title function_ invoke__">AttachShader</span>(vs_prog, vs);</span><br><span class="line">    gl::<span class="title function_ invoke__">ProgramParameteri</span>(vs_prog, gl::PROGRAM_SEPARABLE, gl::TRUE <span class="keyword">as</span> _);</span><br><span class="line">    gl::<span class="title function_ invoke__">LinkProgram</span>(vs_prog);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">fs_prog</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">    gl::<span class="title function_ invoke__">AttachShader</span>(fs_prog, fs);</span><br><span class="line">    gl::<span class="title function_ invoke__">ProgramParameteri</span>(fs_prog, gl::PROGRAM_SEPARABLE, gl::TRUE <span class="keyword">as</span> _);</span><br><span class="line">    gl::<span class="title function_ invoke__">LinkProgram</span>(fs_prog);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">pipeline</span> = <span class="number">0</span>;</span><br><span class="line">    gl::<span class="title function_ invoke__">CreateProgramPipelines</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> pipeline);</span><br><span class="line">    gl::<span class="title function_ invoke__">UseProgramStages</span>(pipeline, gl::VERTEX_SHADER_BIT, vs_prog);</span><br><span class="line">    gl::<span class="title function_ invoke__">UseProgramStages</span>(pipeline, gl::FRAGMENT_SHADER_BIT, fs_prog);</span><br><span class="line"></span><br><span class="line">    gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">    gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line">    gl::<span class="title function_ invoke__">DeleteProgram</span>(vs_prog);</span><br><span class="line">    gl::<span class="title function_ invoke__">DeleteProgram</span>(fs_prog);</span><br><span class="line"></span><br><span class="line">#     <span class="title function_ invoke__">Ok</span>(pipeline)</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#         <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#             <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">#             gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">#             gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line"># </span><br><span class="line">#             <span class="keyword">let</span> <span class="variable">pipeline</span> = <span class="title function_ invoke__">init_pipeline</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            gl::<span class="title function_ invoke__">BindProgramPipeline</span>(pipeline);</span><br><span class="line"># </span><br><span class="line">#             *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, pipeline &#125;</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#         <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#             gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR, <span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#             gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#         <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#             gl::<span class="title function_ invoke__">DeleteProgramPipelines</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.pipeline);</span><br><span class="line">#             gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#     App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p><code>glCreateShaderProgram()</code></p><p>translate:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> GLuint shader = glCreateShader(type);</span><br><span class="line"><span class="keyword">if</span> (shader) &#123;</span><br><span class="line">    glShaderSource(shader, count, strings, <span class="literal">NULL</span>);</span><br><span class="line">    glCompileShader(shader);</span><br><span class="line">    <span class="type">const</span> GLuint program = glCreateProgram();</span><br><span class="line">    <span class="keyword">if</span> (program) &#123;</span><br><span class="line">        GLint compiled = GL_FALSE;</span><br><span class="line">        glGetShaderiv(shader, GL_COMPILE_STATUS, &amp;compiled);</span><br><span class="line">        glProgramParameteri(program, GL_PROGRAM_SEPARABLE, GL_TRUE);</span><br><span class="line">        <span class="keyword">if</span> (compiled) &#123;</span><br><span class="line">            glAttachShader(program, shader);</span><br><span class="line">            glLinkProgram(program);</span><br><span class="line">            glDetachShader(program, shader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* append-shader-info-log-to-program-info-log */</span></span><br><span class="line">    &#125;</span><br><span class="line">    glDeleteShader(shader);</span><br><span class="line">    <span class="keyword">return</span> program;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口匹配"><a class="markdownIt-Anchor" href="#接口匹配"></a> 接口匹配</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     info: <span class="type">String</span>,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#         <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#             <span class="keyword">let</span> <span class="variable">src</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(</span><br><span class="line">#                 <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#                  out vec4 color;</span></span><br><span class="line"><span class="string">#                  layout (location = 2) out ivec2 data;</span></span><br><span class="line"><span class="string">#                  out float extra;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#                  void main() &#123;</span></span><br><span class="line"><span class="string">#                      color = vec4(1.0);</span></span><br><span class="line"><span class="string">#                      data = ivec2(1, 2);</span></span><br><span class="line"><span class="string">#                      extra = 1.0;</span></span><br><span class="line"><span class="string">#                  &#125;&quot;</span>,</span><br><span class="line">#             )</span><br><span class="line">#             .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"># </span><br><span class="line">#             <span class="keyword">let</span> <span class="variable">prog</span> = gl::<span class="title function_ invoke__">CreateShaderProgramv</span>(</span><br><span class="line">#                 gl::FRAGMENT_SHADER, <span class="number">1</span>,</span><br><span class="line">#                 &amp;src.<span class="title function_ invoke__">as_ptr</span>()</span><br><span class="line">#             );</span><br><span class="line"># </span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counts</span> = <span class="number">0</span>;</span><br><span class="line">gl::<span class="title function_ invoke__">GetProgramInterfaceiv</span>(</span><br><span class="line">    prog,</span><br><span class="line">    gl::PROGRAM_OUTPUT,</span><br><span class="line">    gl::ACTIVE_RESOURCES,</span><br><span class="line">    &amp;<span class="keyword">mut</span> counts</span><br><span class="line">);</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">let</span> <span class="variable">name_of</span> = |name| <span class="keyword">match</span> name <span class="keyword">as</span> <span class="type">u32</span> &#123;</span><br><span class="line">#     gl::FLOAT_VEC4 =&gt; <span class="string">&quot;vec4&quot;</span>,</span><br><span class="line">#     gl::INT_VEC2 =&gt; <span class="string">&quot;ivec2&quot;</span>,</span><br><span class="line">#     gl::FLOAT =&gt; <span class="string">&quot;float&quot;</span>,</span><br><span class="line">#     _ =&gt; <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line"># &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">index</span> <span class="keyword">in</span> <span class="number">0</span>..counts &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">params</span> = [<span class="number">0</span>; <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">name</span> = [<span class="number">0u8</span>; <span class="number">64</span>];</span><br><span class="line">    gl::<span class="title function_ invoke__">GetProgramResourceiv</span>(</span><br><span class="line">        prog,</span><br><span class="line">        gl::PROGRAM_OUTPUT,</span><br><span class="line">        index <span class="keyword">as</span> _,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        [gl::TYPE, gl::LOCATION].<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        std::ptr::<span class="title function_ invoke__">null_mut</span>(),</span><br><span class="line">        params.<span class="title function_ invoke__">as_mut_ptr</span>(),</span><br><span class="line">    );</span><br><span class="line">    gl::<span class="title function_ invoke__">GetProgramResourceName</span>(</span><br><span class="line">        prog,</span><br><span class="line">        gl::PROGRAM_OUTPUT,</span><br><span class="line">        index <span class="keyword">as</span> _,</span><br><span class="line">        <span class="number">64</span>,</span><br><span class="line">        std::ptr::<span class="title function_ invoke__">null_mut</span>(),</span><br><span class="line">        name.<span class="title function_ invoke__">as_mut_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.info.<span class="title function_ invoke__">push_str</span>(&amp;<span class="built_in">format!</span>(</span><br><span class="line">        <span class="string">&quot;Index &#123;&#125;: &#123;&#125; &#123;&#125; @ location &#123;&#125;\n&quot;</span>,</span><br><span class="line">        index,</span><br><span class="line">        std::<span class="type">str</span>::<span class="title function_ invoke__">from_utf8</span>(&amp;name)</span><br><span class="line">            .<span class="title function_ invoke__">unwrap_or</span>(<span class="string">&quot;unknown&quot;</span>)</span><br><span class="line">            .<span class="title function_ invoke__">trim_matches</span>(&#x27;\u&#123;<span class="number">0</span>&#125;&#x27;),</span><br><span class="line">        <span class="title function_ invoke__">name_of</span>(params[<span class="number">0</span>]),</span><br><span class="line">        params[<span class="number">1</span>]</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br><span class="line"># </span><br><span class="line">#             gl::<span class="title function_ invoke__">DeleteProgram</span>(prog);</span><br><span class="line"># </span><br><span class="line">#             <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="keyword">self</span>.info);</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">ui</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, ui: &amp;imgui_glfw_rs::imgui::Ui) &#123;</span><br><span class="line">#         <span class="keyword">use</span> imgui_glfw_rs::imgui;</span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">win</span> = imgui::Window::<span class="title function_ invoke__">new</span>(<span class="string">&quot;OpenGL - Information&quot;</span>)</span><br><span class="line">#             .<span class="title function_ invoke__">resizable</span>(<span class="literal">false</span>)</span><br><span class="line">#             .<span class="title function_ invoke__">no_decoration</span>()</span><br><span class="line">#             .<span class="title function_ invoke__">position</span>([<span class="number">10</span>., <span class="number">10</span>.], imgui::Condition::Always);</span><br><span class="line">#         <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(end) = win.<span class="title function_ invoke__">begin</span>(ui) &#123;</span><br><span class="line">#             ui.<span class="title function_ invoke__">text</span>(<span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="keyword">self</span>.info));</span><br><span class="line">#             end.<span class="title function_ invoke__">end</span>();</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#     App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Index 0: color vec4 @ location 0</span><br><span class="line">Index 1: data ivec2 @ location 2</span><br><span class="line">Index 2: extra float @ location 1</span><br></pre></td></tr></table></figure><h2 id="4-着色器子程序"><a class="markdownIt-Anchor" href="#4-着色器子程序"></a> 4. 着色器子程序</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">Uniforms</span> &#123;</span><br><span class="line">#     subroutine1: <span class="type">i32</span>,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     render_program: <span class="type">u32</span>,</span><br><span class="line">#     vao: <span class="type">u32</span>,</span><br><span class="line">#     subroutines: [<span class="type">u32</span>; <span class="number">2</span>],</span><br><span class="line">#     uniforms: Uniforms,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">load_shaders</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#         <span class="keyword">if</span> <span class="keyword">self</span>.render_program != <span class="number">0</span> &#123;</span><br><span class="line">#             <span class="keyword">unsafe</span> &#123; gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.render_program) &#125;;</span><br><span class="line">#         &#125;</span><br><span class="line"># </span><br><span class="line">#         <span class="keyword">self</span>.render_program = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(</span><br><span class="line">#             &amp;[</span><br><span class="line">#                 sb7::shader::<span class="title function_ invoke__">load</span>(</span><br><span class="line">#                     <span class="string">&quot;media/shaders/subroutines/subroutines.vs.glsl&quot;</span>,</span><br><span class="line">#                     gl::VERTEX_SHADER,</span><br><span class="line">#                     <span class="literal">true</span>,</span><br><span class="line">#                 ),</span><br><span class="line">#                 sb7::shader::<span class="title function_ invoke__">load</span>(</span><br><span class="line">#                     <span class="string">&quot;media/shaders/subroutines/subroutines.fs.glsl&quot;</span>,</span><br><span class="line">#                     gl::FRAGMENT_SHADER,</span><br><span class="line">#                     <span class="literal">true</span>,</span><br><span class="line">#                 ),</span><br><span class="line">#             ],</span><br><span class="line">#             <span class="literal">true</span>,</span><br><span class="line">#         );</span><br><span class="line"># </span><br><span class="line">#         <span class="keyword">unsafe</span> &#123;</span><br><span class="line"><span class="comment">// get counts of subroutine</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counts</span> = <span class="number">0</span>;</span><br><span class="line">gl::<span class="title function_ invoke__">GetProgramStageiv</span>(</span><br><span class="line">    <span class="keyword">self</span>.render_program,</span><br><span class="line">    gl::FRAGMENT_SHADER,</span><br><span class="line">    gl::ACTIVE_SUBROUTINES,</span><br><span class="line">    &amp;<span class="keyword">mut</span> counts,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">name</span> = [<span class="number">0u8</span>; <span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..counts &#123;</span><br><span class="line">    gl::<span class="title function_ invoke__">GetProgramResourceName</span>(</span><br><span class="line">        <span class="keyword">self</span>.render_program,</span><br><span class="line">        gl::FRAGMENT_SUBROUTINE,</span><br><span class="line">        i <span class="keyword">as</span> _,</span><br><span class="line">        <span class="number">256</span>,</span><br><span class="line">        std::ptr::<span class="title function_ invoke__">null_mut</span>(),</span><br><span class="line">        name.<span class="title function_ invoke__">as_mut_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(</span><br><span class="line">        std::<span class="type">str</span>::<span class="title function_ invoke__">from_utf8</span>(&amp;name).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">trim_matches</span>(&#x27;\u&#123;<span class="number">0</span>&#125;&#x27;),</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.subroutines[i <span class="keyword">as</span> <span class="type">usize</span>] = gl::<span class="title function_ invoke__">GetSubroutineIndex</span>(</span><br><span class="line">        <span class="keyword">self</span>.render_program,</span><br><span class="line">        gl::FRAGMENT_SHADER,</span><br><span class="line">        name.<span class="title function_ invoke__">as_ptr</span>()</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">name</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;mySubroutineUniform&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"><span class="keyword">self</span>.uniforms.subroutine1 = gl::<span class="title function_ invoke__">GetSubroutineUniformLocation</span>(</span><br><span class="line">    <span class="keyword">self</span>.render_program,</span><br><span class="line">    gl::FRAGMENT_SHADER,</span><br><span class="line">    name.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">);</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">init</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> AppConfig &#123;</span><br><span class="line">#         AppConfig &#123;</span><br><span class="line">#             title: <span class="string">&quot;OpenGL SuperBible - Shader Subroutines&quot;</span>.<span class="title function_ invoke__">into</span>(),</span><br><span class="line">#             ..<span class="built_in">Default</span>::<span class="title function_ invoke__">default</span>()</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#         <span class="keyword">self</span>.<span class="title function_ invoke__">load_shaders</span>();</span><br><span class="line"># </span><br><span class="line">#         <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#             gl::<span class="title function_ invoke__">GenVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.vao);</span><br><span class="line">#             gl::<span class="title function_ invoke__">BindVertexArray</span>(<span class="keyword">self</span>.vao);</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">i</span> = current_time <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#         <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#             gl::<span class="title function_ invoke__">UseProgram</span>(<span class="keyword">self</span>.render_program);</span><br><span class="line"># </span><br><span class="line">#             gl::<span class="title function_ invoke__">UniformSubroutinesuiv</span>(</span><br><span class="line">#                 gl::FRAGMENT_SHADER,</span><br><span class="line">#                 <span class="number">1</span>,</span><br><span class="line">#                 &amp;<span class="keyword">self</span>.subroutines[i &amp; <span class="number">1</span>]</span><br><span class="line">#             );</span><br><span class="line"># </span><br><span class="line">#             gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLE_STRIP, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">fn</span> <span class="title function_">on_key</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, key: imgui_glfw_rs::glfw::Key,</span><br><span class="line">#               press: imgui_glfw_rs::glfw::Action) &#123;</span><br><span class="line">#         <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">imgui_glfw_rs</span>::glfw::Action::Press = press &#123;</span><br><span class="line">#             <span class="keyword">match</span> key &#123;</span><br><span class="line">#                 imgui_glfw_rs::glfw::Key::R =&gt; <span class="keyword">self</span>.<span class="title function_ invoke__">load_shaders</span>(),</span><br><span class="line">#                 _ =&gt; &#123;&#125;</span><br><span class="line">#             &#125;</span><br><span class="line">#         &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#     App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><h2 id="5-着色器程序二进制"><a class="markdownIt-Anchor" href="#5-着色器程序二进制"></a> 5. 着色器程序二进制</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL超级宝典第七版学习笔记 (5)：数据</title>
      <link href="/2022/01/23/openglsb7rs-5/"/>
      <url>/2022/01/23/openglsb7rs-5/</url>
      
        <content type="html"><![CDATA[<p>这是自己阅读 OpenGL 超级宝典（第七版）的笔记，使用 Rust 学习书上的示例。点击代码块上的眼睛按钮 <i class="far fa-eye"></i> 可以展开代码，点击复制按钮 <i class="far fa-clone"></i> 可以复制完整代码。</p><ul><li>随书源码：<a href="https://github.com/openglsuperbible/sb7code">https://github.com/openglsuperbible/sb7code</a></li><li>demo： <a href="https://github.com/yilozt/sb7coders">https://github.com/yilozt/sb7coders</a></li></ul><p>第五章主要介绍了 OpenGL 中两种重要的数据形式：缓冲（Buffer）和纹理（Texture）：</p><ul><li>缓冲：OpenGL 里最常用的、用来存储数据的容器，可以类比成 C 里使用 malloc() 分配的一块空间，常用来存储模型的顶点数据。里面的数据线性存储，类似于一维数组。</li><li>纹理：用来存储多维的数据结构。最常见的应该就是 2D 纹理了，用来当作模型的贴图。</li></ul><h2 id="缓冲"><a class="markdownIt-Anchor" href="#缓冲"></a> 缓冲</h2><p>一般用来存储顶点数据，然后作为顶点着色器的输入。也可以作为一般容器，用来在 OpenGL 程序和着色器之间传递数据。</p><h3 id="创建缓冲区对象-分配空间"><a class="markdownIt-Anchor" href="#创建缓冲区对象-分配空间"></a> 创建缓冲区对象 / 分配空间</h3><p>一般使用 <code>glCreateBuffers() / glGenBuffers()</code>，这两个函数功能、原型相同：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glCreateBuffers</span> <span class="params">(GLsizei n, GLuint *buffers)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">glGenBuffers</span>    <span class="params">(GLsizei n, GLuint *buffers)</span>;</span><br></pre></td></tr></table></figure><ul><li>第一个参数 <code>n</code> 为要创建 buffer 对象的个数，也就是说这个函数可以一次性创建多个缓冲区对象</li><li>第二个参数是一个 <code>GLuint</code> 类型的指针，用来存储返回的缓冲区对象</li></ul><p>创建单个缓冲区对象：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br></pre></td></tr></table></figure><p>创建多个缓冲区对象，第二个参数传一个数组：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = [<span class="number">0u32</span>; <span class="number">3</span>];</span><br><span class="line">gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">3</span>, buf.<span class="title function_ invoke__">as_mut_ptr</span>());  </span><br></pre></td></tr></table></figure><p>OpenGL 里使用 GLuint 变量来代表通过 <code>glCreate...() / glGen...()</code> 创建的对象。</p><p>创建缓冲区对象之后，可以通过 <code>glBindBuffer()</code> 将对象绑定到当前 OpenGL 环境中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glBindBuffer</span><span class="params">(GLenum target, GLuint buffer)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>target</code> 称为绑定点（靶点）<ul><li>最常用的 target 应该就是 <code>GL_ARRAY_BUFFER</code> 了，用来将缓冲区作为顶点着色器的输入</li></ul></li><li><code>buffer</code> 类型是 GLuint， 即之前 <code>glCreate...() / glGen...()</code> 返回的 GLuint 变量（创建的对象）</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);  </span><br><span class="line">gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, buf);</span><br></pre></td></tr></table></figure><p>到这里只是创建和绑定了一个缓冲区，实际上还没有分配空间:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">size</span> = -<span class="number">1</span>;</span><br><span class="line">gl::<span class="title function_ invoke__">GetNamedBufferParameteriv</span>(buf, gl::BUFFER_SIZE, &amp;<span class="keyword">mut</span> size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// size of buffer: 0 bytes</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;size of buffer: &#123;&#125; bytes&quot;</span>, size);</span><br></pre></td></tr></table></figure><p>分配空间的操作主要是通过 <code>gl[Named]BufferStorage()</code> 来完成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glBufferStorage</span><span class="params">(GLenum target,</span></span><br><span class="line"><span class="params">                     GLsizeiptr size,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> GLvoid * data,</span></span><br><span class="line"><span class="params">                     GLbitfield flags)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">glNamedBufferStorage</span><span class="params">(GLuint buffer,</span></span><br><span class="line"><span class="params">                          GLsizei size,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="type">void</span> *data,</span></span><br><span class="line"><span class="params">                          GLbitfield flags)</span>;</span><br></pre></td></tr></table></figure><p>只是第一个参数不同，<code>glBufferStorage()</code> 传入的是缓冲区的绑定点，而 <code>glNamedBufferStorage()</code> 传入缓冲区对象本身。代表缓冲区对象的 GLuint 变量称为对象的<strong>名称</strong>(name)</p><ul><li><code>size</code>：分配多少内存，以字节为单位</li><li><code>data</code>：用来初始化（复制到） buffer 的数据，可以传递 null，这样就不会复制任何数据，如果要传入 data 对 buffer 进行初始化，<code>data</code> 的大小必须大于等于 <code>size</code> 字节</li><li><code>flags</code>：只起到给 OpenGL 提供信息的作用，让 OpenGL 分配符合预期的内存</li></ul><p>在分配内存后，无法再修改缓冲区的 size 和 flag 属性。只能将缓冲区销毁后重新创建。</p><p>给缓冲区分配 100MB 的内存空间:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">buf_test</span>() &#123;</span><br><span class="line">  <span class="keyword">use</span> std::ptr::null;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 100MB = 100 * 1024 * 1024 Btye</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">size</span> = <span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">#   <span class="built_in">println!</span>(<span class="string">&quot;Press any key to alloc storage...&quot;</span>);</span><br><span class="line">#   std::io::<span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> <span class="type">String</span>::<span class="title function_ invoke__">new</span>()).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"># </span><br><span class="line">  gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">  gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf, size <span class="keyword">as</span> _, <span class="title function_ invoke__">null</span>(), gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"># </span><br><span class="line">#   <span class="built_in">println!</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="title function_ invoke__">buf_test</span>();</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>调用 <code>glNamedBufferStorage()</code> 之前用 <code>nvidia-smi</code> 命令查询显存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                  |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class="line">|        ID   ID                                                   Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|    0   N/A  N/A      3035      G   target/debug/test                   2MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>调用 <code>glNamedBufferStorage()</code> 之后用 <code>nvidia-smi</code> 命令查询显存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                  |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class="line">|        ID   ID                                                   Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|    0   N/A  N/A      3035      G   target/debug/test                 102MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>显存占用从 2M 增加到了 102M，说明缓冲区对象的存储空间其实是分配内显存里的。</p><p>如果要使用 <code>glBufferStorage()</code> 的话就需要将缓冲区绑定到靶点上：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ptr::null;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100MB = 100 * 1024 * 1024 Btye</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">size</span> = <span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, buf)</span><br><span class="line">gl::<span class="title function_ invoke__">BufferStorage</span>(gl::ARRAY_BUFFER, buf, size <span class="keyword">as</span> _, <span class="title function_ invoke__">null</span>(),</span><br><span class="line">                  gl::DYNAMIC_STORAGE_BIT);</span><br></pre></td></tr></table></figure><p>这两种方法功能一致。</p><p><code>gl[Named]BufferStorage()</code> 的 <code>flag</code> 参数可能的取值：</p><table><thead><tr><th style="text-align:left">标志</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">GL_DYNAMIC_STORAGE_BIT</td><td style="text-align:left">可以直接更新缓冲区的数据</td></tr><tr><td style="text-align:left">GL_MAP_READ_BIT</td><td style="text-align:left">缓冲区映射时，可以通过指针读取缓冲</td></tr><tr><td style="text-align:left">GL_MAP_WRITE_BIT</td><td style="text-align:left">缓冲区映射时，可以通过指针写入缓存</td></tr><tr><td style="text-align:left">GL_MAP_PERSISTENT_BIT</td><td style="text-align:left">在绘制内容时保持缓冲区映射（持久映射）</td></tr><tr><td style="text-align:left">GL_MAP_COHERENT_BIT</td><td style="text-align:left">缓冲区映射图是连贯的</td></tr><tr><td style="text-align:left">GL_CLIENT_STORAGE_BIT</td><td style="text-align:left">优先将缓冲区的存储空间分配到应用内存上，而不是在显存上分配</td></tr></tbody></table><p>OpenGL 在执行绘制命令（<code>glDraw...()</code>）时会结束缓冲区映射，设置 <code>GL_MAP_PERSISTENT_BIT</code> 则可以一直保持映射状态，会牺牲一定性能。</p><p>GL_MAP_CORCORMENT_BIT 表示缓存区在 CPU 和 GPU 之间映射是密切相关的，保证了在 CPU 或 GPU 对缓冲区的写入效果最终会对另一方可见，而不需要应用程序进一步干预。如果不设置这个标志位，只有在结束缓冲区映射或者调用 <code>glFlushMappedBufferRange() / glMemoryBarrier()</code> 来应用更改。</p><h3 id="更新缓冲区的内容"><a class="markdownIt-Anchor" href="#更新缓冲区的内容"></a> 更新缓冲区的内容</h3><p><code>gl[Named]BufferSubData()</code> 用来将数据写入缓冲区（内存 -&gt; 显存）<br />需要将 <code>GL_DYNAMIC_STORAGE_BIT</code> 写入 <code>gl[Named]BufferStorage()</code> 的 flag 参数里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glBufferSubData</span><span class="params">(GLenum target,</span></span><br><span class="line"><span class="params">                     GLintptr offset,</span></span><br><span class="line"><span class="params">                     GLsizeiptr size,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> GLvoid * data)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">glNamedBufferSubData</span><span class="params">(GLuint buffer,</span></span><br><span class="line"><span class="params">                          GLintptr offset,</span></span><br><span class="line"><span class="params">                          GLsizei size,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="type">void</span> *data)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>offset</code> 表示要写入的起始位置，以字节为单位</li><li><code>size</code> 表示要写入多大的数据，以字节为单位</li></ul><p>向缓冲区写入一组三角形的顶点数据：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::mem::size_of_val;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">buf_test</span>() &#123;</span><br><span class="line">#   <span class="comment">// 创建 buffer</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">  gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">  gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, buf);</span><br><span class="line"># </span><br><span class="line">#   <span class="comment">// 分配 1 KB 空间</span></span><br><span class="line">#   <span class="comment">// 毕竟要更新 buffer 的内容，传入 DYNAMIC_STORAGE_BIT</span></span><br><span class="line">#   gl::<span class="title function_ invoke__">BufferStorage</span>(gl::ARRAY_BUFFER, <span class="number">1024</span>, <span class="title function_ invoke__">null</span>(), gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"># </span><br><span class="line">#   <span class="comment">// 三角形的顶点数据</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">data</span> = [</span><br><span class="line">     <span class="number">0.25</span>, -<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">1.0</span>,</span><br><span class="line">    -<span class="number">0.25</span>, -<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">1.0</span>,</span><br><span class="line">     <span class="number">0.25</span>,  <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">1.0</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将顶点数据传入 buffer</span></span><br><span class="line">  gl::<span class="title function_ invoke__">BufferSubData</span>(gl::ARRAY_BUFFER, <span class="number">0</span>,</span><br><span class="line">                    <span class="title function_ invoke__">size_of_val</span>(&amp;data) <span class="keyword">as</span> _,</span><br><span class="line">                    data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="title function_ invoke__">buf_test</span>();</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>也可以通过<strong>缓冲区映射</strong>，将存储在显卡的缓冲区映射到 OpenGL 应用程序的内存上，这样就可以通过指针直接写入缓冲区：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf, <span class="number">1024</span> * <span class="number">1024</span>, <span class="title function_ invoke__">null</span>(), gl::MAP_READ_BIT);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">let</span> <span class="variable">data</span> = [ <span class="number">0.25</span>, -<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">1.0</span>,</span><br><span class="line">                  -<span class="number">0.25</span>, -<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">1.0</span>,</span><br><span class="line">                   <span class="number">0.25</span>,  <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">1.0</span>, ];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> <span class="variable">ptr</span> = gl::<span class="title function_ invoke__">MapNamedBuffer</span>(buf, gl::WRITE_ONLY);</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 缓冲区映射失败时返回 null</span></span><br><span class="line">#       <span class="built_in">assert_ne!</span>(ptr <span class="keyword">as</span> <span class="type">usize</span>, <span class="number">0</span>, <span class="string">&quot;buf map to null&quot;</span>);</span><br><span class="line"></span><br><span class="line">      std::ptr::<span class="title function_ invoke__">copy</span>(data.<span class="title function_ invoke__">as_ptr</span>(), ptr <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f64</span>, data.<span class="title function_ invoke__">len</span>());</span><br><span class="line">      gl::<span class="title function_ invoke__">UnmapNamedBuffer</span>(buf);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>对应的原型如下，<code>gl[Named]MapBuffer()</code> 用来将缓冲区映射到内存上，<code>gl[Named]UnmapBuffer()</code> 用来结束缓冲区映射：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">glMapBuffer</span><span class="params">(GLenum target,</span></span><br><span class="line"><span class="params">                  GLenum access)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">glMapNamedBuffer</span><span class="params">(GLuint buffer,</span></span><br><span class="line"><span class="params">                     GLenum access)</span>;</span><br><span class="line"></span><br><span class="line">GLboolean <span class="title function_">glUnmapBuffer</span><span class="params">(GLenum target)</span>;</span><br><span class="line">GLboolean <span class="title function_">glUnmapNamedBuffer</span><span class="params">(GLuint buffer)</span>;</span><br></pre></td></tr></table></figure><p><code>access</code> 有三种取值：<code>GL_READ_ONLY</code>，<code>GL_WRITE_ONLY</code>，<code>GL_READ_WRITE</code><br />对应 <code>gl[Named]BufferStorage()</code> 的 flag 参数：<code>GL_MAP_READ_BIT</code>， <code>GL_MAP_WRITE_BIT</code></p><p>将 Hello World 写入缓冲区，然后再读取到内存：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::mem::size_of_val <span class="keyword">as</span> sizeof;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf,</span><br><span class="line">#                              <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">#                              <span class="title function_ invoke__">null</span>(),</span><br><span class="line">#                              gl::MAP_READ_BIT | gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">str</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        <span class="type">str</span>.<span class="title function_ invoke__">resize</span>(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">        gl::<span class="title function_ invoke__">NamedBufferSubData</span>(buf, <span class="number">0</span>, <span class="title function_ invoke__">sizeof</span>(&amp;<span class="type">str</span>[..]) <span class="keyword">as</span> _,</span><br><span class="line">                               <span class="type">str</span>.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> <span class="variable">str</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">str</span> = [<span class="number">0u8</span>; <span class="number">100</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">ptr</span> = gl::<span class="title function_ invoke__">MapNamedBuffer</span>(buf, gl::READ_ONLY);</span><br><span class="line">        <span class="built_in">assert_ne!</span>(ptr <span class="keyword">as</span> <span class="type">usize</span>, <span class="number">0</span>, <span class="string">&quot;buf map to null&quot;</span>);</span><br><span class="line"># </span><br><span class="line">        std::ptr::<span class="title function_ invoke__">copy</span>(ptr <span class="keyword">as</span> _, <span class="type">str</span>.<span class="title function_ invoke__">as_mut_ptr</span>(), <span class="number">100</span>);</span><br><span class="line">#         </span><br><span class="line">        gl::<span class="title function_ invoke__">UnmapNamedBuffer</span>(buf);</span><br><span class="line">        <span class="type">str</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// [Hello World]</span></span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;[&#123;&#125;]&quot;</span>,</span><br><span class="line">               std::<span class="type">str</span>::<span class="title function_ invoke__">from_utf8</span>(&amp;<span class="type">str</span>).<span class="title function_ invoke__">unwrap_or</span>(<span class="string">&quot;err&quot;</span>)</span><br><span class="line">                                        .<span class="title function_ invoke__">trim_matches</span>(&#x27;\u&#123;<span class="number">0</span>&#125;&#x27;));</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p><code>glMap[Named]Buffer()</code> 映射的是整个缓冲区，如果缓冲区越大，缓冲区映射的开销就越高。也可以通过下面的函数来映射特定范围的缓冲区：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">glMapBufferRange</span><span class="params">(GLenum target,</span></span><br><span class="line"><span class="params">                       GLintptr offset,</span></span><br><span class="line"><span class="params">                       GLsizeiptr length,</span></span><br><span class="line"><span class="params">                       GLbitfield access)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">glMapNamedBufferRange</span><span class="params">(GLuint buffer,</span></span><br><span class="line"><span class="params">                            GLintptr offset,</span></span><br><span class="line"><span class="params">                            GLsizei length,</span></span><br><span class="line"><span class="params">                            GLbitfield access)</span>;</span><br></pre></td></tr></table></figure><p><code>access</code> 是标志位，可以的取值：</p><table><thead><tr><th style="text-align:left">标志</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">GL_MAP_READ_BIT</td><td style="text-align:left">可以通过缓冲区映射读取</td></tr><tr><td style="text-align:left">GL_MAP_WRITE_BIT</td><td style="text-align:left">可以通过缓冲区映射写入</td></tr><tr><td style="text-align:left">GL_MAP_PERSISTENT_BIT</td><td style="text-align:left">持久映射</td></tr><tr><td style="text-align:left">GL_MAP_COHERENT_BIT</td><td style="text-align:left">缓冲映射图是连贯的</td></tr><tr><td style="text-align:left">GL_MAP_INVALIDATE_RANGE_BIT</td><td style="text-align:left">表示我们不再关心范围内数据，与 GL_MAP_READ_BIT 冲突</td></tr><tr><td style="text-align:left">GL_MAP_INVALIDATE_BUFFER_BIT</td><td style="text-align:left">表示我们不再关心整个缓冲区内的数据，与 GL_MAP_READ_BIT 冲突</td></tr><tr><td style="text-align:left">GL_MAP_FLUSH_EXPLICIT_BIT</td><td style="text-align:left">表示我们会在映射范围内修改数据</td></tr><tr><td style="text-align:left">GL_MAP_UNSYNCHRONIZED_BIT</td><td style="text-align:left">表示我们会自己会自己执行所有的同步</td></tr></tbody></table><p>其中 <code>GL_MAP_READ_BIT</code>、<code>GL_MAP_WRITE_BIT</code>、<code>GL_MAP_PERSISTENT_BIT</code>、<code>GL_MAP_COHERENT_BIT</code> 必须和 <code>gl[Named]BufferStorage</code> 的 <code>flag</code> 相匹配，其作用相同。</p><ul><li><code>GL_MAP_INVALIDATE_RANGE_BIT</code>：在映射范围之前的数据可能会丢弃，而映射到 CPU 的那段缓冲区将会被擦除</li><li><code>GL_MAP_INVALIDATE_BUFFER_BIT</code>：在将缓冲区映射到 CPU 时，缓冲区内所有数据将被擦除</li></ul><p>这里使用 0xFF 初始化缓冲区，再缓冲区内 15~45 字节 以 <code>GL_MAP_INVALIDATE_RANGE_BIT | GL_MAP_WRITE_BIT</code> 映射到 CPU：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::mem::size_of_val <span class="keyword">as</span> sizeof;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">print_buf</span>(buf: [<span class="type">u8</span>; <span class="number">15</span> * <span class="number">6</span>]) &#123;</span><br><span class="line">#   <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">6</span> &#123;</span><br><span class="line">#     <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">15</span> &#123;</span><br><span class="line">#       <span class="built_in">print!</span>(<span class="string">&quot;&#123;:-02X&#125;, &quot;</span>, buf[j * <span class="number">15</span> + i])</span><br><span class="line">#     &#125;</span><br><span class="line">#     <span class="built_in">println!</span>()</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf,</span><br><span class="line">#                              <span class="number">15</span> * <span class="number">6</span>,</span><br><span class="line">#                              <span class="title function_ invoke__">null</span>(),</span><br><span class="line">#                              gl::MAP_READ_BIT | gl::MAP_WRITE_BIT |</span><br><span class="line">#                              gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">#       &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">data</span> = [<span class="number">255u8</span>; <span class="number">15</span> * <span class="number">6</span>];</span><br><span class="line">        gl::<span class="title function_ invoke__">NamedBufferSubData</span>(buf, <span class="number">0</span>, <span class="title function_ invoke__">sizeof</span>(&amp;data) <span class="keyword">as</span> _,</span><br><span class="line">                               data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line">#       &#125;</span><br><span class="line">#       &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">ptr</span> = gl::<span class="title function_ invoke__">MapNamedBufferRange</span>(buf, <span class="number">15</span>, <span class="number">30</span>,</span><br><span class="line">                                          gl::MAP_WRITE_BIT |</span><br><span class="line">                                          gl::MAP_INVALIDATE_BUFFER_BIT);</span><br><span class="line">        <span class="built_in">assert_ne!</span>(ptr <span class="keyword">as</span> <span class="type">usize</span>, <span class="number">0</span>, <span class="string">&quot;MapNamedBufferRange() failed&quot;</span>);</span><br><span class="line">        gl::<span class="title function_ invoke__">UnmapNamedBuffer</span>(buf);</span><br><span class="line">#       &#125;</span><br><span class="line">#       &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">ptr</span> = gl::<span class="title function_ invoke__">MapNamedBuffer</span>(buf, gl::READ_ONLY);</span><br><span class="line">#         <span class="built_in">assert_ne!</span>(ptr <span class="keyword">as</span> <span class="type">usize</span>, <span class="number">0</span>, <span class="string">&quot;MapBuffer() failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">read</span> = [<span class="number">0u8</span>; <span class="number">15</span> * <span class="number">6</span>];</span><br><span class="line">        std::ptr::<span class="title function_ invoke__">copy</span>(ptr <span class="keyword">as</span> _, read.<span class="title function_ invoke__">as_mut_ptr</span>(), <span class="number">120</span>);</span><br><span class="line"># </span><br><span class="line">        gl::<span class="title function_ invoke__">UnmapNamedBuffer</span>(buf);</span><br><span class="line"># </span><br><span class="line">        <span class="title function_ invoke__">print_buf</span>(read);</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p><code>print_buf()</code> 输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF </span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 </span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 </span><br><span class="line">FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF </span><br><span class="line">FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF </span><br><span class="line">FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br></pre></td></tr></table></figure><p>在缓冲区映射的时候那段内存已经被清零了。如果给 <code>Map[Named]BufferRange()</code> 传入 <code>MAP_INVALIDATE_BUFFER_BIT</code>，那么整个缓冲区在映射时会被清零</p><h3 id="填充数据-缓冲区间复制数据"><a class="markdownIt-Anchor" href="#填充数据-缓冲区间复制数据"></a> 填充数据、缓冲区间复制数据</h3><p>填充数据<sub>作者在整本书里就没有用过这个函数</sub>……：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glClearBufferSubData</span><span class="params">(GLenum target,</span></span><br><span class="line"><span class="params">                          GLenum internalformat,</span></span><br><span class="line"><span class="params">                          GLintptr offset,</span></span><br><span class="line"><span class="params">                          GLsizeiptr size,</span></span><br><span class="line"><span class="params">                          GLenum format,</span></span><br><span class="line"><span class="params">                          GLenum type,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="type">void</span> * data)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">glClearNamedBufferSubData</span><span class="params">(GLuint buffer,</span></span><br><span class="line"><span class="params">                               GLenum internalformat,</span></span><br><span class="line"><span class="params">                               GLintptr offset,</span></span><br><span class="line"><span class="params">                               GLsizei size,</span></span><br><span class="line"><span class="params">                               GLenum format,</span></span><br><span class="line"><span class="params">                               GLenum type,</span></span><br><span class="line"><span class="params">                               <span class="type">const</span> <span class="type">void</span> *data)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>size</code>, <code>offset</code>：填充区域，字节为单位</li><li><code>type</code> <code>format</code> 说明指向 <code>data</code> 的数据的信息</li><li><code>type</code>: 传入的数据类型，取值和对应的数据类型：<table><thead><tr><th style="text-align:left">type</th><th style="text-align:left">对应的 OpenGL 类型</th></tr></thead><tbody><tr><td style="text-align:left">GL_BYTE</td><td style="text-align:left">GLchar</td></tr><tr><td style="text-align:left">GL_UNSIGNED_BYTE</td><td style="text-align:left">GLuchar</td></tr><tr><td style="text-align:left">GL_SHORT</td><td style="text-align:left">GLshort</td></tr><tr><td style="text-align:left">GL_UNSIGNED_SHORT</td><td style="text-align:left">GLushort</td></tr><tr><td style="text-align:left">GL_INT</td><td style="text-align:left">GLint</td></tr><tr><td style="text-align:left">GL_UNSIGNED_INT</td><td style="text-align:left">GLuint</td></tr><tr><td style="text-align:left">GL_FLOAT</td><td style="text-align:left">GLfloat</td></tr><tr><td style="text-align:left">GL_DOUBLE</td><td style="text-align:left">GLdouble</td></tr></tbody></table></li><li><code>format</code>: 传入的数据格式<ul><li><code>RED</code>、<code>GREEN</code>、<code>BLUE</code>、<code>RED_INTEGER</code>、<code>GREEN_INTEGER</code>、<code>BLUE_INTEGER</code></li><li><code>RG</code>、<code>RG_INTEGER</code></li><li><code>RGB</code>、<code>BGR</code>、<code>RGB_INTEGER</code>、<code>BGR_INTEGER</code></li><li><code>RGBA</code>、<code>BGRA</code>、<code>RGBA_INTEGER</code>、<code>BGRA_INTEGER</code></li></ul></li><li><code>internalformat</code>：buffer 内部存储的数据格式，参考 <a href="https://docs.gl/gl4/glClearBufferSubData">gl4/glClearBufferSubData</a></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::GLfloat;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::c_void;</span><br><span class="line"># <span class="keyword">use</span> std::mem::size_of_val;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">buf_test</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">recv</span>: [GLfloat; <span class="number">20</span>] = [<span class="number">0.0</span>; <span class="number">20</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">size_of_val</span>(&amp;recv) <span class="keyword">as</span> <span class="type">isize</span>;</span><br><span class="line"></span><br><span class="line">  gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">  gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf, len, <span class="title function_ invoke__">null</span>(),</span><br><span class="line">                         gl::MAP_READ_BIT | gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 填充数据</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">d</span>: [GLfloat; <span class="number">4</span>] = [<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>];</span><br><span class="line">  gl::<span class="title function_ invoke__">ClearNamedBufferSubData</span>(</span><br><span class="line">    buf,</span><br><span class="line">    gl::RGBA32F, <span class="comment">// 内部存储格式 https://docs.gl/gl4/glClearBufferSubData</span></span><br><span class="line">    <span class="number">0</span>,           <span class="comment">// 偏移量</span></span><br><span class="line">    len,         <span class="comment">// 填充长度</span></span><br><span class="line">    gl::RGBA,    <span class="comment">// data 格式, 如果是整形: gl::RGBA_INTEGER</span></span><br><span class="line">#                  <span class="comment">//  - 参见：https://github.com/d-scott-phillips/piglit/blob/2ada920d5702aa86853066559e7f941f8f5f37f2/tests/spec/arb_sparse_buffer/commit.c#L138</span></span><br><span class="line">    gl::FLOAT,   <span class="comment">// data 数据类型</span></span><br><span class="line">    d.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void);</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">let</span> <span class="variable">handler</span> = gl::<span class="title function_ invoke__">MapNamedBuffer</span>(buf, gl::READ_ONLY);</span><br><span class="line">#   std::intrinsics::<span class="title function_ invoke__">copy</span>(handler <span class="keyword">as</span> *<span class="keyword">const</span> GLfloat, recv.<span class="title function_ invoke__">as_mut_ptr</span>(), recv.<span class="title function_ invoke__">len</span>());</span><br><span class="line">#   gl::<span class="title function_ invoke__">UnmapNamedBuffer</span>(buf);</span><br><span class="line"># </span><br><span class="line">  <span class="comment">// 1.0, 2.0, 3.0, 4.0, 1.0, 2.0, ...</span></span><br><span class="line">#   <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, recv);</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>在缓冲区之间复制，类似于 C 里的 <code>memcpy()</code> 或者 <code>strcpy()</code>（Rust 里对应<code>std::intrinsics::copy</code>）:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glCopyBufferSubData</span><span class="params">(GLenum readTarget,</span></span><br><span class="line"><span class="params">                         GLenum writeTarget,</span></span><br><span class="line"><span class="params">                         GLintptr readOffset,</span></span><br><span class="line"><span class="params">                         GLintptr writeOffset,</span></span><br><span class="line"><span class="params">                         GLsizeiptr size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">glCopyNamedBufferSubData</span><span class="params">(GLuint readBuffer,</span></span><br><span class="line"><span class="params">                              GLuint writeBuffer,</span></span><br><span class="line"><span class="params">                              GLintptr readOffset,</span></span><br><span class="line"><span class="params">                              GLintptr writeOffset,</span></span><br><span class="line"><span class="params">                              GLsizei size)</span>;</span><br></pre></td></tr></table></figure><p><code>glCopyBufferSubData()</code> 需要两个不同的绑定点。 openGL 也提供了 GL_COPY_READ_BUFFER 和 GL_COPY_WRITE_BUFFER 这两个靶点，这时候就可以用上了。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::c_void;</span><br><span class="line"># <span class="keyword">use</span> std::intrinsics::copy;</span><br><span class="line"># <span class="keyword">use</span> std::mem::size_of_val;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">buf_test</span>() &#123;</span><br><span class="line">#   <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">bufs</span> = [<span class="number">0</span>; <span class="number">2</span>];</span><br><span class="line">#   gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">2</span>, bufs.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#   <span class="keyword">let</span> [read, write] = bufs;</span><br><span class="line"># </span><br><span class="line">  <span class="keyword">let</span> <span class="variable">str</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">size_of_val</span>(&amp;<span class="type">str</span>) <span class="keyword">as</span> <span class="type">isize</span>;</span><br><span class="line">  gl::<span class="title function_ invoke__">NamedBufferStorage</span>(read, len, <span class="type">str</span>.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void, </span><br><span class="line">                         gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">  gl::<span class="title function_ invoke__">NamedBufferStorage</span>(write, len, <span class="title function_ invoke__">null</span>(),</span><br><span class="line">                         gl::DYNAMIC_STORAGE_BIT | gl::MAP_READ_BIT);</span><br><span class="line"></span><br><span class="line">  gl::<span class="title function_ invoke__">CopyNamedBufferSubData</span>(read, write, <span class="number">0</span>, <span class="number">0</span>, len);</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">recv</span> = [<span class="number">0u8</span>; <span class="number">1024</span>];</span><br><span class="line">#   <span class="keyword">let</span> <span class="variable">read_handler</span> = gl::<span class="title function_ invoke__">MapNamedBuffer</span>(write, gl::READ_ONLY);</span><br><span class="line">#   <span class="title function_ invoke__">copy</span>(read_handler <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">u8</span>, recv.<span class="title function_ invoke__">as_mut_ptr</span>(), <span class="type">str</span>.<span class="title function_ invoke__">len</span>());</span><br><span class="line">#   gl::<span class="title function_ invoke__">UnmapNamedBuffer</span>(write);</span><br><span class="line">#   <span class="keyword">let</span> <span class="variable">recv</span> = std::<span class="type">str</span>::<span class="title function_ invoke__">from_utf8</span>(&amp;recv).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">trim_matches</span>(&#x27;\u&#123;<span class="number">0</span>&#125;&#x27;);</span><br><span class="line">#   <span class="built_in">assert_eq!</span>(recv, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="title function_ invoke__">buf_test</span>();</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><h3 id="将缓冲区作为顶点着色器的输入"><a class="markdownIt-Anchor" href="#将缓冲区作为顶点着色器的输入"></a> 将缓冲区作为顶点着色器的输入</h3><p>顶点着色器的输入——顶点数组对象(vao)，用来存储顶点数组的状态，可以绑定多个缓冲区，将缓冲区的内容传入顶点着色器。创建 vao：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::GLuint;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::&#123;c_void, CString&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::mem::&#123;size_of_val, size_of&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   bufs: [GLuint; <span class="number">2</span>],</span><br><span class="line">#   program: GLuint</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="comment">// 顶点属性</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">position</span> = [ -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, </span><br><span class="line">#                       <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#                       <span class="number">0.0</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0f32</span>,];</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">color</span> = [ <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#                   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#                   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0f32</span>, ];</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 创建 vao</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line">    &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 创建 buffer，初始化 buffer</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">bufs</span> = [<span class="number">0</span>; <span class="number">2</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">2</span>, bufs.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::VERTEX_ARRAY, bufs[<span class="number">0</span>]);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::VERTEX_ARRAY, bufs[<span class="number">1</span>]);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferStorage</span>(bufs[<span class="number">0</span>], <span class="title function_ invoke__">size_of_val</span>(&amp;position) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">#                              position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">#                              gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferStorage</span>(bufs[<span class="number">1</span>], <span class="title function_ invoke__">size_of_val</span>(&amp;color) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">#                              color.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">#                              gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"># </span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 绑定 buffer 与 vao</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">0</span>, bufs[<span class="number">0</span>], <span class="number">0</span>,</span><br><span class="line">#                                   (size_of::&lt;<span class="type">f32</span>&gt;() * <span class="number">4</span>) <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">1</span>, bufs[<span class="number">1</span>], <span class="number">0</span>,</span><br><span class="line">#                                   (size_of::&lt;<span class="type">f32</span>&gt;() * <span class="number">4</span>) <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置顶点属性对应的 buffer</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置顶点属性的格式</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">0</span>,</span><br><span class="line">#                                   <span class="number">4</span>,</span><br><span class="line">#                                   gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">1</span>,</span><br><span class="line">#                                   <span class="number">4</span>,</span><br><span class="line">#                                   gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 启用顶点属性</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">1</span>);  </span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">program</span> = <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="comment">// 创建顶点着色器</span></span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         layout (location = 0) in vec4 position;</span></span><br><span class="line"><span class="string">#         layout (location = 1) in vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position = position;</span></span><br><span class="line"><span class="string">#           vs_color = color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#       </span><br><span class="line">#       <span class="comment">// 创建片段着色器</span></span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         in vec4 vs_color;</span></span><br><span class="line"><span class="string">#         out vec4 fs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           fs_color = vs_color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 创建着色器程序</span></span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 启用着色器程序</span></span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line">#       program</span><br><span class="line">#     &#125;;</span><br><span class="line"># </span><br><span class="line">#     *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, bufs &#125;;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">2</span>, <span class="keyword">self</span>.bufs.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>建立顶点着色器里顶点属性与缓冲区的关系，将 bindingindex 对应的缓冲区作为顶点属性 attribindex 的输入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glVertexArrayAttribBinding</span><span class="params">(GLuint vaobj,</span></span><br><span class="line"><span class="params">                                GLuint attribindex,</span></span><br><span class="line"><span class="params">                                GLuint bindingindex)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>attribindex</code> 顶点属性的位置，可以用 <code>glGetAttribLocation()</code> 查询，或者直接在顶点着色器里指定</li><li><code>bindingindex</code> vao绑定的顶点缓冲区下标</li></ul><p><code>glVertexArrayVertexBuffer()</code> 用来将缓冲区挂载到 vao 上：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glVertexArrayVertexBuffer</span><span class="params">(GLuint vaobj,</span></span><br><span class="line"><span class="params">                               GLuint bindingindex,</span></span><br><span class="line"><span class="params">                               GLuint buffer,</span></span><br><span class="line"><span class="params">                               GLintptr offset,</span></span><br><span class="line"><span class="params">                               GLsizei stride)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>bindingindex</code>: 可以随便设，指定缓冲区在 vao 的位置，和 <code>glVertexArrayAttribBinding()</code> 对应</li><li><code>buffer</code>: 要挂载到 vao 的缓冲区</li><li><code>offset</code>: 偏移量（起始位置），字节为单位，着色器从哪里开始读入顶点数据</li><li><code>stride</code>: 每个顶点数据的大小，字节为单位</li></ul><p>将两个缓冲区对象挂载到 vao 上，分别作为着色器内两个顶点属性的输入：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::GLuint;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::&#123;c_void, CString&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::mem::&#123;size_of_val, size_of&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   bufs: [GLuint; <span class="number">2</span>],</span><br><span class="line">#   program: GLuint</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="comment">// 顶点属性</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">position</span> = [ -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, </span><br><span class="line">                      <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                      <span class="number">0.0</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0f32</span>,];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">color</span> = [ <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0f32</span>, ];</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 创建 vao</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 创建 buffer，初始化 buffer</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">bufs</span> = [<span class="number">0</span>; <span class="number">2</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">2</span>, bufs.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">      gl::<span class="title function_ invoke__">BindBuffer</span>(gl::VERTEX_ARRAY, bufs[<span class="number">0</span>]);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindBuffer</span>(gl::VERTEX_ARRAY, bufs[<span class="number">1</span>]);</span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(bufs[<span class="number">0</span>], <span class="title function_ invoke__">size_of_val</span>(&amp;position) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                             position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">                             gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(bufs[<span class="number">1</span>], <span class="title function_ invoke__">size_of_val</span>(&amp;color) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                             color.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">                             gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"># </span><br><span class="line">#     &#125;</span><br><span class="line"></span><br><span class="line">#     <span class="comment">// 绑定 buffer 与 vao</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">0</span>, bufs[<span class="number">0</span>], <span class="number">0</span>,</span><br><span class="line">                                  (size_of::&lt;<span class="type">f32</span>&gt;() * <span class="number">4</span>) <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">1</span>, bufs[<span class="number">1</span>], <span class="number">0</span>,</span><br><span class="line">                                  (size_of::&lt;<span class="type">f32</span>&gt;() * <span class="number">4</span>) <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"></span><br><span class="line">#     <span class="comment">// 设置顶点属性对应的 buffer</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置顶点属性的格式</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">0</span>,</span><br><span class="line">#                                   <span class="number">4</span>,</span><br><span class="line">#                                   gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">1</span>,</span><br><span class="line">#                                   <span class="number">4</span>,</span><br><span class="line">#                                   gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 启用顶点属性</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">1</span>);  </span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">program</span> = <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="comment">// 创建顶点着色器</span></span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         layout (location = 0) in vec4 position;</span></span><br><span class="line"><span class="string">#         layout (location = 1) in vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position = position;</span></span><br><span class="line"><span class="string">#           vs_color = color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#       </span><br><span class="line">#       <span class="comment">// 创建片段着色器</span></span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         in vec4 vs_color;</span></span><br><span class="line"><span class="string">#         out vec4 fs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           fs_color = vs_color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 创建着色器程序</span></span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 启用着色器程序</span></span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line">#       program</span><br><span class="line">#     &#125;;</span><br><span class="line"># </span><br><span class="line">#     *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, bufs &#125;;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">2</span>, <span class="keyword">self</span>.bufs.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>在通过 vao 搭建好缓冲区与顶点属性的桥梁之后，还需要给 OpenGL 说明顶点属性的格式（顶点属性由几个元素组成，每个元素的数据类型是什么）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glVertexArrayAttribFormat</span><span class="params">(GLuint vaobj,</span></span><br><span class="line"><span class="params">                               GLuint attribindex,</span></span><br><span class="line"><span class="params">                               GLint size,</span></span><br><span class="line"><span class="params">                               GLenum type,</span></span><br><span class="line"><span class="params">                               GLboolean normalized,</span></span><br><span class="line"><span class="params">                               GLuint relativeoffset)</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>size</code>: 这个顶点属性由几个数组成：1、2、3、4</p></li><li><p><code>type</code>: 数据类型：GL::FLOAT, GL::UCHAT 等</p></li><li><p><code>normalized</code>: 在传入着色器之前，是否对数据进行正规化处理。浮点数不会进行正规化</p><ul><li>无符号整数转换成 [0.0~1.0] 的浮点数</li><li>有符号整数转换成 [-1.0~1.0] 的浮点数</li></ul></li><li><p>relativeoffset： 相对偏移量</p><ul><li>第 n 个顶点在在缓冲区的读取位置与offset, relativeoffset 的关系：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location = offset + n * stride + relativeoffset</span><br></pre></td></tr></table></figure></li></ul><p>之后就可以调用 <code>glEnableVertexArrayAttrub()</code> 来启用之前的配置了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::GLuint;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::&#123;c_void, CString&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::mem::&#123;size_of_val, size_of&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   bufs: [GLuint; <span class="number">2</span>],</span><br><span class="line">#   program: GLuint</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="comment">// 顶点属性</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">position</span> = [ -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, </span><br><span class="line">#                       <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#                       <span class="number">0.0</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0f32</span>,];</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">color</span> = [ <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#                   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#                   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0f32</span>, ];</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 创建 vao</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 创建 buffer，初始化 buffer</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">bufs</span> = [<span class="number">0</span>; <span class="number">2</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">2</span>, bufs.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::VERTEX_ARRAY, bufs[<span class="number">0</span>]);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::VERTEX_ARRAY, bufs[<span class="number">1</span>]);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferStorage</span>(bufs[<span class="number">0</span>], <span class="title function_ invoke__">size_of_val</span>(&amp;position) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">#                              position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">#                              gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferStorage</span>(bufs[<span class="number">1</span>], <span class="title function_ invoke__">size_of_val</span>(&amp;color) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">#                              color.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">#                              gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"># </span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 绑定 buffer 与 vao</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">0</span>, bufs[<span class="number">0</span>], <span class="number">0</span>,</span><br><span class="line">#                                   (size_of::&lt;<span class="type">f32</span>&gt;() * <span class="number">4</span>) <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">1</span>, bufs[<span class="number">1</span>], <span class="number">0</span>,</span><br><span class="line">#                                   (size_of::&lt;<span class="type">f32</span>&gt;() * <span class="number">4</span>) <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置顶点属性对应的 buffer</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置顶点属性的格式</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">0</span>, <span class="number">4</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">1</span>, <span class="number">4</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"></span><br><span class="line">#     <span class="comment">// 启用顶点属性</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">1</span>);  </span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">program</span> = <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="comment">// 创建顶点着色器</span></span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         layout (location = 0) in vec4 position;</span></span><br><span class="line"><span class="string">#         layout (location = 1) in vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position = position;</span></span><br><span class="line"><span class="string">#           vs_color = color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#       </span><br><span class="line">#       <span class="comment">// 创建片段着色器</span></span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         in vec4 vs_color;</span></span><br><span class="line"><span class="string">#         out vec4 fs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           fs_color = vs_color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 创建着色器程序</span></span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 启用着色器程序</span></span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line">#       program</span><br><span class="line">#     &#125;;</span><br><span class="line"># </span><br><span class="line">#     *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, bufs &#125;;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">2</span>, <span class="keyword">self</span>.bufs.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>完整的配置过程如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::GLuint;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::&#123;c_void, CString&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::mem::&#123;size_of_val, size_of&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   bufs: [GLuint; <span class="number">2</span>],</span><br><span class="line">#   program: GLuint</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="comment">// 顶点属性</span></span><br><span class="line">      <span class="keyword">let</span> <span class="variable">position</span> = [ -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, </span><br><span class="line">                        <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                        <span class="number">0.0</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0f32</span>,];</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">color</span> = [ <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                    <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                    <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0f32</span>, ];</span><br><span class="line"># </span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">bufs</span> = [<span class="number">0</span>; <span class="number">2</span>];</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">2</span>, bufs.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       </span><br><span class="line">      <span class="comment">// 将顶点的位置属性复制到 buffer 里</span></span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(bufs[<span class="number">0</span>], <span class="title function_ invoke__">size_of_val</span>(&amp;position) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                            position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">                            gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">#       </span><br><span class="line">      <span class="comment">// 将 buffer 挂载到 vao 上</span></span><br><span class="line">      <span class="comment">// offset = 0, stride = suzeof([f32; 4])</span></span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">0</span>, bufs[<span class="number">0</span>], <span class="number">0</span>,</span><br><span class="line">                                  size_of::&lt;[<span class="type">f32</span>; <span class="number">4</span>]&gt;() <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#       </span><br><span class="line">      <span class="comment">// 配置顶点属性的格式</span></span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">0</span>, <span class="number">4</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line"># </span><br><span class="line">      <span class="comment">// 从哪个 buffer 作为顶点属性的输入</span></span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"># </span><br><span class="line">      <span class="comment">// 配置完成</span></span><br><span class="line">      gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 配置第二个顶点属性</span></span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(bufs[<span class="number">1</span>], <span class="title function_ invoke__">size_of_val</span>(&amp;color) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                            color.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">                            gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">1</span>, bufs[<span class="number">1</span>], <span class="number">0</span>,</span><br><span class="line">                                  size_of::&lt;[<span class="type">f32</span>; <span class="number">4</span>]&gt;() <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">1</span>, <span class="number">4</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">1</span>);  </span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         layout (location = 0) in vec4 position;</span></span><br><span class="line"><span class="string">#         layout (location = 1) in vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position = position;</span></span><br><span class="line"><span class="string">#           vs_color = color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#         </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         in vec4 vs_color;</span></span><br><span class="line"><span class="string">#         out vec4 fs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           fs_color = vs_color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line"># </span><br><span class="line">#       *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, bufs &#125;;</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">2</span>, <span class="keyword">self</span>.bufs.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>结果大概长这样：</p><div class="demo_app" id="_ch5_1_vao"></div><p>也可以将顶点属性放到一个结构体里，然后存到同一个缓冲区上：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::GLuint;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::&#123;c_void, CString&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::mem::&#123;size_of_val, size_of&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   buf: GLuint,</span><br><span class="line">#   program: GLuint</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="meta">#[allow(dead_code)]</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line">      x: <span class="type">f32</span>, y: <span class="type">f32</span>, z: <span class="type">f32</span>, <span class="comment">// position</span></span><br><span class="line">      r: <span class="type">f32</span>, g: <span class="type">f32</span>, b: <span class="type">f32</span>, <span class="comment">// color</span></span><br><span class="line">    &#125;</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">vertices</span> = [</span><br><span class="line">      Vertex &#123; x: -<span class="number">0.5</span>, y: -<span class="number">0.5</span>, z: <span class="number">0.0</span>, r: <span class="number">1.0</span>, g: <span class="number">0.0</span>, b: <span class="number">0.0</span> &#125;,</span><br><span class="line">      Vertex &#123; x:  <span class="number">0.5</span>, y: -<span class="number">0.5</span>, z: <span class="number">0.0</span>, r: <span class="number">0.0</span>, g: <span class="number">1.0</span>, b: <span class="number">0.0</span> &#125;,</span><br><span class="line">      Vertex &#123; x:  <span class="number">0.0</span>, y:  <span class="number">0.5</span>, z: <span class="number">0.0</span>, r: <span class="number">0.0</span>, g: <span class="number">0.0</span>, b: <span class="number">1.0</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line">#   </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">      </span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf, <span class="title function_ invoke__">size_of_val</span>(&amp;vertices) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                             vertices.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">                             gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">0</span>, buf, <span class="number">0</span>, size_of::&lt;Vertex&gt;() <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">1</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">                                  <span class="number">3</span> * size_of::&lt;<span class="type">f32</span>&gt;() <span class="keyword">as</span> <span class="type">u32</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">1</span>);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         layout (location = 0) in vec3 position;</span></span><br><span class="line"><span class="string">#         layout (location = 1) in vec3 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position = vec4(position, 1.0);</span></span><br><span class="line"><span class="string">#           vs_color = vec4(color, 1.0);</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#         </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         in vec4 vs_color;</span></span><br><span class="line"><span class="string">#         out vec4 fs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           fs_color = vs_color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line"># </span><br><span class="line">#       *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, buf &#125;;</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">2</span>, &amp;<span class="keyword">self</span>.buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>对于将所有顶点数据存到同一个缓冲区的情况，也可以用 <code>glVertexAttribPointer()</code> 向顶点着色器传入数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glVertexAttribPointer</span><span class="params">(GLuint index,</span></span><br><span class="line"><span class="params">                           GLint size,</span></span><br><span class="line"><span class="params">                           GLenum type,</span></span><br><span class="line"><span class="params">                           GLboolean normalized,</span></span><br><span class="line"><span class="params">                           GLsizei stride,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> GLvoid * pointer)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>index</code>：顶点属性在着色器的位置（顶点属性）</li><li><code>size</code>：顶点属性包含的数据个数：1、2、3、4、……</li><li><code>type</code>：数据类型：<code>GL_FLOAT</code>、<code>GL_UNSIGNED_BYTE</code>……</li><li><code>normalized</code>：是否进行正规化处理</li><li><code>stride</code>：所有顶点属性的大小之和，字节为单位</li><li><code>pointer</code>：顶点属性数据相对与 <code>stride</code> 的位置</li></ul><p>使用前提：</p><ol><li>已经创建 vao 并绑定到 OpenGL 环境里</li><li>已经创建好缓冲区对象，填充数据后绑定到 <code>GL_ARRAY_BUFFER</code> 上</li></ol><p>用 <code>glVertexAttribPointer()</code> 重写上面的例子，整个配置过程非常简便：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::GLuint;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line"># <span class="keyword">use</span> std::mem::&#123;size_of_val, size_of&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   buf: GLuint,</span><br><span class="line">#   program: GLuint</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">vertices_data</span> = [</span><br><span class="line">        <span class="comment">// position               // color</span></span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,     <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, </span><br><span class="line">         <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,     <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">         <span class="number">0.0</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,     <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0f32</span>,</span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf, <span class="title function_ invoke__">size_of_val</span>(&amp;vertices_data) <span class="keyword">as</span> _,</span><br><span class="line">                             vertices_data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">                             gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"></span><br><span class="line">      gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">0</span>, <span class="number">4</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">                              (<span class="number">8</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _, <span class="number">0</span> <span class="keyword">as</span> _);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">1</span>, <span class="number">4</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">                             (<span class="number">8</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _,</span><br><span class="line">                             (<span class="number">4</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _);</span><br><span class="line">      gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">1</span>);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         layout (location = 0) in vec4 position;</span></span><br><span class="line"><span class="string">#         layout (location = 1) in vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position = position;</span></span><br><span class="line"><span class="string">#           vs_color = color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#         </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         in vec4 vs_color;</span></span><br><span class="line"><span class="string">#         out vec4 fs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           fs_color = vs_color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line"># </span><br><span class="line">#       *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, buf &#125;;</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><h2 id="uniform-变量"><a class="markdownIt-Anchor" href="#uniform-变量"></a> Uniform 变量</h2><p>uniform 变量可以在任何着色器里声明，是一种很重要的数据形式，可以理解为着色器暴露给 OpenGL 应用程序的全局变量。可以在 OpenGL 应用程序里将数据直接传递给着色器。最常见的 uniform 变量应该就是变换矩阵了。</p><p>声明 uniform 变量：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> time;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">int</span> <span class="keyword">index</span>;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec4</span> color;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> vpmat;</span><br></pre></td></tr></table></figure><p>在着色器里不能对 uniform 变量赋值，只能在声明的时候赋初值：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> a = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h3 id="向-uniform-变量传递数据"><a class="markdownIt-Anchor" href="#向-uniform-变量传递数据"></a> 向 uniform 变量传递数据</h3><p>先用 <code>glGetUniformLocation()</code> 查询 uniform 变量在哪，再用 <code>glUniform*()</code> 给 uniform 变量传递数据（类似于赋值）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GLint <span class="title function_">glGetUniformLocation</span><span class="params">(GLuint program,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> GLchar *name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">glUniform1f</span><span class="params">(GLint location,</span></span><br><span class="line"><span class="params">                 GLfloat v0)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">glUniform2f</span><span class="params">(GLint location,</span></span><br><span class="line"><span class="params">                 GLfloat v0,</span></span><br><span class="line"><span class="params">                 GLfloat v1)</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以在 <a href="http://docs.gl">docs.gl</a> 查看所有的 <code>glUniform*()</code> 函数：<a href="https://docs.gl/gl4/glUniform">https://docs.gl/gl4/glUniform</a></p><p>对于这两个 uniform 变量：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> time;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> <span class="keyword">offset</span>;</span><br></pre></td></tr></table></figure><p>在 OpenGL 应用程序里给它们赋值：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">name</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;time&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">ltime</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(program, name.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">gl::<span class="title function_ invoke__">Uniform1f</span>(ltime, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">name</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;offset&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">loffset</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(program, name.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">gl::<span class="title function_ invoke__">Uniform3f</span>(loffset, <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>);</span><br></pre></td></tr></table></figure><p>也可以在着色器里直接指定 uniform 变量的位置:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">float</span> time;</span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">1</span>) <span class="keyword">uniform</span> <span class="type">int</span> <span class="keyword">index</span>;</span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">2</span>) <span class="keyword">uniform</span> <span class="type">vec4</span> color;</span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">3</span>) <span class="keyword">uniform</span> <span class="type">bool</span> flag;</span><br></pre></td></tr></table></figure><p>这样就不需要调用 <code>GetUniformLocation()</code> 了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">Uniform1f</span>(<span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line">gl::<span class="title function_ invoke__">Uniform1i</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">gl::<span class="title function_ invoke__">Uniform3f</span>(<span class="number">2</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>);</span><br><span class="line">gl::<span class="title function_ invoke__">Uniform1i</span>(<span class="number">3</span>, gl::FALSE);</span><br></pre></td></tr></table></figure><p><code>glUniform*()</code> 有一组以 <code>v</code> 作为后缀的函数，可以传入指向数据的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glUniform3fv</span><span class="params">(GLint location,</span></span><br><span class="line"><span class="params">                  GLsizei count,</span></span><br><span class="line"><span class="params">                  <span class="type">const</span> GLfloat *value)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">glUniform4fv</span><span class="params">(GLint location,</span></span><br><span class="line"><span class="params">                  GLsizei count,</span></span><br><span class="line"><span class="params">                  <span class="type">const</span> GLfloat *value)</span>;</span><br></pre></td></tr></table></figure><p>用 <code>Uniform4fv()</code> 传 vec4 变量：</p><figure class="highlight glsl"><figcaption><span>glsl:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">vec4</span> vcolor;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><figcaption><span>rust:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">vcolor</span> = [<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>];</span><br><span class="line">gl::<span class="title function_ invoke__">Uniform4fv</span>(vcolor_location, <span class="number">1</span>, vcolor.<span class="title function_ invoke__">as_ptr</span>());</span><br></pre></td></tr></table></figure><p>传递数组，将 <code>glUniform4fv()</code> 的 count 设置为数组长度就行：</p><figure class="highlight glsl"><figcaption><span>glsl, 顶点着色器:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># #version 460 core</span></span><br><span class="line"><span class="meta"># layout (location = 0) in vec3 position;</span></span><br><span class="line"><span class="meta"># out vec4 vs_color;</span></span><br><span class="line"><span class="meta"># </span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec4</span> colors[<span class="number">3</span>];</span><br><span class="line"><span class="meta"># </span></span><br><span class="line"><span class="meta"># void main() &#123;</span></span><br><span class="line"><span class="meta">#   gl_Position = vec4(position, 1.0);</span></span><br><span class="line"><span class="meta">#   vs_color = colors[gl_VertexID];</span></span><br><span class="line"><span class="meta"># &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><figcaption><span>rust:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::GLuint;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::&#123;c_void, CString&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::mem::&#123;size_of_val, size_of&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   buf: GLuint,</span><br><span class="line">#   program: GLuint</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">positions</span> = [ -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">0.0f32</span>,];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">#       </span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">#       </span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf, <span class="title function_ invoke__">size_of_val</span>(&amp;positions) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">#                             positions.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">#                             gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">0</span>, buf, <span class="number">0</span>,</span><br><span class="line">#                                     size_of::&lt;[<span class="type">f32</span>; <span class="number">3</span>]&gt;() <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         layout (location = 0) in vec3 position;</span></span><br><span class="line"><span class="string">#         out vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         uniform vec4 colors[3];</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position = vec4(position, 1.0);</span></span><br><span class="line"><span class="string">#           vs_color = colors[gl_VertexID];</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#         </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         in vec4 vs_color;</span></span><br><span class="line"><span class="string">#         out vec4 fs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           fs_color = vs_color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line"># </span><br><span class="line">#       *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, buf &#125;;</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line"># </span><br><span class="line">      <span class="keyword">let</span> <span class="variable">colors</span> = [[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>],</span><br><span class="line">                    [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>],</span><br><span class="line">                    [<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0f32</span>],];</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">name</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;colors&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">colors_location</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(program, name.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">      gl::<span class="title function_ invoke__">Uniform4fv</span>(colors_location, <span class="number">3</span>, colors.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">f32</span>);</span><br><span class="line">#       </span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">2</span>, &amp;<span class="keyword">self</span>.buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>传一维数据：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">data</span> = <span class="number">1.0f32</span>;</span><br><span class="line">gl::<span class="title function_ invoke__">Uniform1fv</span>(data_location, <span class="number">1</span>, &amp;data);</span><br></pre></td></tr></table></figure><p>传递矩阵：</p><figure class="highlight glsl"><figcaption><span>顶点着色器:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># #version 460 core</span></span><br><span class="line"><span class="meta"># layout (location = 0) in vec3 position;</span></span><br><span class="line"><span class="meta"># layout (location = 1) in vec3 color;</span></span><br><span class="line"><span class="meta"># </span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> mv_mat = <span class="type">mat4</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="meta"># </span></span><br><span class="line"><span class="meta"># out vec4 vs_color;</span></span><br><span class="line"><span class="meta"># </span></span><br><span class="line"><span class="meta"># void main() &#123;</span></span><br><span class="line"><span class="meta">#   gl_Position = mv_mat * vec4(position, 1.0);</span></span><br><span class="line"><span class="meta">#   vs_color = vec4(color, 1.0);</span></span><br><span class="line"><span class="meta"># &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::GLuint;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::&#123;c_void, CString&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::mem::&#123;size_of_val, size_of&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::&#123;null, addr_of&#125;;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   buf: GLuint,</span><br><span class="line">#   program: GLuint</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="meta">#[allow(dead_code)]</span></span><br><span class="line">#     <span class="keyword">struct</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line">#       x: <span class="type">f32</span>, y: <span class="type">f32</span>, z: <span class="type">f32</span>, <span class="comment">// position</span></span><br><span class="line">#       r: <span class="type">f32</span>, g: <span class="type">f32</span>, b: <span class="type">f32</span>, <span class="comment">// color</span></span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vertices</span> = [</span><br><span class="line">#       Vertex &#123; x: -<span class="number">0.5</span>, y: -<span class="number">0.5</span>, z: <span class="number">0.0</span>, r: <span class="number">1.0</span>, g: <span class="number">0.0</span>, b: <span class="number">0.0</span> &#125;,</span><br><span class="line">#       Vertex &#123; x:  <span class="number">0.5</span>, y: -<span class="number">0.5</span>, z: <span class="number">0.0</span>, r: <span class="number">0.0</span>, g: <span class="number">1.0</span>, b: <span class="number">0.0</span> &#125;,</span><br><span class="line">#       Vertex &#123; x:  <span class="number">0.0</span>, y:  <span class="number">0.5</span>, z: <span class="number">0.0</span>, r: <span class="number">0.0</span>, g: <span class="number">0.0</span>, b: <span class="number">1.0</span> &#125;,</span><br><span class="line">#     ];</span><br><span class="line">#   </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">#       </span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">#       </span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf, <span class="title function_ invoke__">size_of_val</span>(&amp;vertices) <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">#                             vertices.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void,</span><br><span class="line">#                             gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">0</span>, buf, <span class="number">0</span>, size_of::&lt;Vertex&gt;() <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">1</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE, <span class="number">3</span> * size_of::&lt;<span class="type">f32</span>&gt;() <span class="keyword">as</span> <span class="type">u32</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">1</span>);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         layout (location = 0) in vec3 position;</span></span><br><span class="line"><span class="string">#         layout (location = 1) in vec3 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         uniform mat4 mv_mat = mat4(1.0);</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 vs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position = mv_mat * vec4(position, 1.0);</span></span><br><span class="line"><span class="string">#           vs_color = vec4(color, 1.0);</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#         </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string">#         in vec4 vs_color;</span></span><br><span class="line"><span class="string">#         out vec4 fs_color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           fs_color = vs_color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line"># </span><br><span class="line">#       *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, buf &#125;;</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">mv_mat</span> = sb7::vmath::<span class="title function_ invoke__">rotate</span>(<span class="number">0.0</span>, _current_time <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">45.0</span>, <span class="number">0.0</span>);</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">name</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;mv_mat&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">location_mv_mat</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(<span class="keyword">self</span>.program,</span><br><span class="line">                                                   name.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line">      gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(location_mv_mat, <span class="number">1</span>,</span><br><span class="line">                           gl::FALSE, addr_of!(mv_mat) <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">2</span>, &amp;<span class="keyword">self</span>.buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>对应的效果如下：</p><div class="demo_app" id="_ch5_1_0_uniform_mat"></div><p><code>glUniformMatrix4fv()</code> 原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glUniformMatrix4fv</span><span class="params">(GLint location,</span></span><br><span class="line"><span class="params">                        GLsizei count,</span></span><br><span class="line"><span class="params">                        GLboolean transpose,</span></span><br><span class="line"><span class="params">                        <span class="type">const</span> GLfloat *value)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>count</code>：矩阵个数，传 mat4 数组的时候传元素个数</li><li><code>transpose</code>：传递时是否将矩阵转置，如果线性代数库里的矩阵是以行优先存储的，需要设置为 GL_TRUE，来对矩阵进行转置，以符合 OpenGL 的期望格式</li></ul><p><strong>通过 uniform 变量设置变换矩阵</strong></p><p>初始化顶点数据：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::&#123;Application, AppConfig&#125;;</span><br><span class="line"># <span class="keyword">use</span> sb7::mat4;</span><br><span class="line"># <span class="keyword">use</span> sb7::vmath::&#123;Mat4, translate, rotate_with_axis&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line"># <span class="keyword">use</span> std::mem::size_of_val;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::&#123;null, addr_of&#125;;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   buf: GLuint,</span><br><span class="line">#   program: GLuint,</span><br><span class="line">#   proj_matrix: Mat4,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="meta">#[rustfmt::skip]</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">      -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">      -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">       <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">       <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">      -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">      -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span></span><br><span class="line">    ];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferData</span>(buf,</span><br><span class="line">                          <span class="title function_ invoke__">size_of_val</span>(vertex_position) <span class="keyword">as</span> _,</span><br><span class="line">                          vertex_position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">                          gl::STATIC_DRAW);</span><br><span class="line">      gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>, <span class="title function_ invoke__">null</span>());</span><br><span class="line">      gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         in vec4 position;</span></span><br><span class="line"><span class="string">#         </span></span><br><span class="line"><span class="string">#         out VS_OUT &#123;</span></span><br><span class="line"><span class="string">#           vec4 color;</span></span><br><span class="line"><span class="string">#         &#125; vs_out;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         layout (location = 0) uniform mat4 mv_matrix = mat4(1.0);</span></span><br><span class="line"><span class="string">#         layout (location = 1) uniform mat4 proj_matrix = mat4(1.0);</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position =  proj_matrix * mv_matrix * position;</span></span><br><span class="line"><span class="string">#           vs_out.color = position * 2.0 + vec4(0.5, 0.5, 0.5, 0.0);</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#         </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 color;</span></span><br><span class="line"><span class="string">#         </span></span><br><span class="line"><span class="string">#         in VS_OUT &#123;</span></span><br><span class="line"><span class="string">#           vec4 color;</span></span><br><span class="line"><span class="string">#         &#125; fs_in;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           color = fs_in.color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">Enable</span>(gl::DEPTH_TEST);</span><br><span class="line">#       *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, buf, proj_matrix: mat4!() &#125;;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">AppConfig</span> &#123; width, height, .. &#125; = AppConfig::<span class="title function_ invoke__">default</span>();</span><br><span class="line">#     <span class="keyword">self</span>.<span class="title function_ invoke__">on_resize</span>(width <span class="keyword">as</span> _, height <span class="keyword">as</span> _);</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">current_time</span> = current_time <span class="keyword">as</span> <span class="type">f32</span>;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">f</span> = current_time * <span class="number">0.3</span>;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">mv_matrix</span> = <span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">4.0</span>) *</span><br><span class="line">#                       <span class="title function_ invoke__">translate</span>((<span class="number">2.1</span> * f).<span class="title function_ invoke__">sin</span>() * <span class="number">0.5</span>,</span><br><span class="line">#                                 (<span class="number">1.7</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">0.5</span>,</span><br><span class="line">#                                 (<span class="number">1.3</span> * f).<span class="title function_ invoke__">sin</span>() * (<span class="number">1.5</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">2.0</span>) *</span><br><span class="line">#                       <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">45.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>) *</span><br><span class="line">#                       <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">81.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="number">0</span>, <span class="number">1</span>, gl::FALSE, addr_of!(mv_matrix) <span class="keyword">as</span> _);</span><br><span class="line">#       </span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, &amp;<span class="number">1.0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">on_resize</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, w: <span class="type">i32</span>, h: <span class="type">i32</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">aspect</span> = w <span class="keyword">as</span> GLfloat / h <span class="keyword">as</span> GLfloat;</span><br><span class="line">#     <span class="keyword">self</span>.proj_matrix = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">50.0</span>, aspect, <span class="number">0.1</span>, <span class="number">1000.0</span>);</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="number">1</span>, <span class="number">1</span>, gl::FALSE, addr_of!(<span class="keyword">self</span>.proj_matrix) <span class="keyword">as</span> _);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">2</span>, &amp;<span class="keyword">self</span>.buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>设置变换矩阵：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># ...</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">current_time</span> = current_time <span class="keyword">as</span> <span class="type">f32</span>;</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">f</span> = current_time * <span class="number">0.3</span>;</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">mv_matrix</span> = <span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">4.0</span>) *</span><br><span class="line">                      <span class="title function_ invoke__">translate</span>((<span class="number">2.1</span> * f).<span class="title function_ invoke__">sin</span>() * <span class="number">0.5</span>,</span><br><span class="line">                                (<span class="number">1.7</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">0.5</span>,</span><br><span class="line">                                (<span class="number">1.3</span> * f).<span class="title function_ invoke__">sin</span>() * (<span class="number">1.5</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">2.0</span>) *</span><br><span class="line">                      <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">45.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>) *</span><br><span class="line">                      <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">81.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="number">0</span>, <span class="number">1</span>, gl::FALSE, addr_of!(mv_matrix) <span class="keyword">as</span> _);</span><br><span class="line">#       </span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, &amp;<span class="number">1.0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>在窗口大小发生改变时，更新投影矩阵：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ...</span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">on_resize</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, w: <span class="type">i32</span>, h: <span class="type">i32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">aspect</span> = w <span class="keyword">as</span> GLfloat / h <span class="keyword">as</span> GLfloat;</span><br><span class="line">    <span class="keyword">self</span>.proj_matrix = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">50.0</span>, aspect, <span class="number">0.1</span>, <span class="number">1000.0</span>);</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="number">1</span>, <span class="number">1</span>, gl::FALSE, addr_of!(<span class="keyword">self</span>.proj_matrix) <span class="keyword">as</span> _);</span><br><span class="line">#     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>将变换矩阵和投影矩阵写入 uniform 变量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#       <span class="comment">// ...</span></span><br><span class="line">#     <span class="keyword">self</span>.<span class="title function_ invoke__">on_resize</span>(width <span class="keyword">as</span> _, height <span class="keyword">as</span> _);</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">current_time</span> = current_time <span class="keyword">as</span> <span class="type">f32</span>;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">f</span> = current_time * <span class="number">0.3</span>;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">mv_matrix</span> = <span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">4.0</span>) *</span><br><span class="line">#                       <span class="title function_ invoke__">translate</span>((<span class="number">2.1</span> * f).<span class="title function_ invoke__">sin</span>() * <span class="number">0.5</span>,</span><br><span class="line">#                                 (<span class="number">1.7</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">0.5</span>,</span><br><span class="line">#                                 (<span class="number">1.3</span> * f).<span class="title function_ invoke__">sin</span>() * (<span class="number">1.5</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">2.0</span>) *</span><br><span class="line">#                       <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">45.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>) *</span><br><span class="line">#                       <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">81.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">      gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="number">0</span>, <span class="number">1</span>, gl::FALSE, addr_of!(mv_matrix) <span class="keyword">as</span> _);</span><br><span class="line">#       </span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, &amp;<span class="number">1.0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">on_resize</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, w: <span class="type">i32</span>, h: <span class="type">i32</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">aspect</span> = w <span class="keyword">as</span> GLfloat / h <span class="keyword">as</span> GLfloat;</span><br><span class="line">#     <span class="keyword">self</span>.proj_matrix = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">50.0</span>, aspect, <span class="number">0.1</span>, <span class="number">1000.0</span>);</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="number">1</span>, <span class="number">1</span>, gl::FALSE, addr_of!(<span class="keyword">self</span>.proj_matrix) <span class="keyword">as</span> _);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">#       <span class="comment">// ...</span></span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>顶点着色器：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> <span class="type">vec4</span> position;</span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span> VS_OUT &#123;</span><br><span class="line">  <span class="type">vec4</span> color;</span><br><span class="line">&#125; vs_out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">mat4</span> mv_matrix = <span class="type">mat4</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">1</span>) <span class="keyword">uniform</span> <span class="type">mat4</span> proj_matrix = <span class="type">mat4</span>(<span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">gl_Position</span> =  proj_matrix * mv_matrix * position;</span><br><span class="line">  vs_out.color = position * <span class="number">2.0</span> + <span class="type">vec4</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>片段着色器：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> VS_OUT &#123;</span><br><span class="line">  <span class="type">vec4</span> color;</span><br><span class="line">&#125; fs_in;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">  color = fs_in.color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="demo_app" id="_ch5_2_spinningcube"></div><p>绘制多个物体：在 render 函数里多次调用 <code>glDrawArray</code> 就行：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::&#123;Application, AppConfig&#125;;</span><br><span class="line"># <span class="keyword">use</span> sb7::mat4;</span><br><span class="line"># <span class="keyword">use</span> sb7::vmath::&#123;Mat4, translate, rotate_with_axis&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line"># <span class="keyword">use</span> std::mem::size_of_val;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::&#123;null, addr_of&#125;;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: GLuint,</span><br><span class="line">#   buf: GLuint,</span><br><span class="line">#   program: GLuint,</span><br><span class="line">#   proj_matrix: Mat4,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="meta">#[rustfmt::skip]</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span></span><br><span class="line">#     ];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferData</span>(buf,</span><br><span class="line">#                           <span class="title function_ invoke__">size_of_val</span>(vertex_position) <span class="keyword">as</span> _,</span><br><span class="line">#                           vertex_position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">#                           gl::STATIC_DRAW);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>, <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         in vec4 position;</span></span><br><span class="line"><span class="string">#         </span></span><br><span class="line"><span class="string">#         out VS_OUT &#123;</span></span><br><span class="line"><span class="string">#           vec4 color;</span></span><br><span class="line"><span class="string">#         &#125; vs_out;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         layout (location = 0) uniform mat4 mv_matrix = mat4(1.0);</span></span><br><span class="line"><span class="string">#         layout (location = 1) uniform mat4 proj_matrix = mat4(1.0);</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           gl_Position =  proj_matrix * mv_matrix * position;</span></span><br><span class="line"><span class="string">#           vs_out.color = position * 2.0 + vec4(0.5, 0.5, 0.5, 0.0);</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#         </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_source</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">#         #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         out vec4 color;</span></span><br><span class="line"><span class="string">#         </span></span><br><span class="line"><span class="string">#         in VS_OUT &#123;</span></span><br><span class="line"><span class="string">#           vec4 color;</span></span><br><span class="line"><span class="string">#         &#125; fs_in;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#         void main() &#123;</span></span><br><span class="line"><span class="string">#           color = fs_in.color;</span></span><br><span class="line"><span class="string">#         &#125;</span></span><br><span class="line"><span class="string">#       &quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_source.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">program</span> = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(program, fs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">      gl::<span class="title function_ invoke__">UseProgram</span>(program);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">Enable</span>(gl::DEPTH_TEST);</span><br><span class="line">#       *<span class="keyword">self</span> = <span class="keyword">Self</span> &#123; vao, program, buf, proj_matrix: mat4!() &#125;;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">AppConfig</span> &#123; width, height, .. &#125; = AppConfig::<span class="title function_ invoke__">default</span>();</span><br><span class="line">#     <span class="keyword">self</span>.<span class="title function_ invoke__">on_resize</span>(width <span class="keyword">as</span> _, height <span class="keyword">as</span> _);</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR,<span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, &amp;<span class="number">1.0</span>);</span><br><span class="line"># </span><br><span class="line">      <span class="keyword">let</span> <span class="variable">current_time</span> = current_time <span class="keyword">as</span> <span class="type">f32</span>;</span><br><span class="line"># </span><br><span class="line">      <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">24</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">f</span> = i <span class="keyword">as</span> <span class="type">f32</span> + current_time * <span class="number">0.3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">mv_matrix</span> = <span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">6.0</span>)</span><br><span class="line">             * <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">45.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>)</span><br><span class="line">             * <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">21.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">             * <span class="title function_ invoke__">translate</span>((<span class="number">2.1</span> * f).<span class="title function_ invoke__">sin</span>() * <span class="number">2.0</span>,</span><br><span class="line">                         (<span class="number">1.7</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">2.0</span>,</span><br><span class="line">                         (<span class="number">1.3</span> * f).<span class="title function_ invoke__">sin</span>() * (<span class="number">1.5</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">2.0</span>);</span><br><span class="line">        gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="number">0</span>, <span class="number">1</span>, gl::FALSE, addr_of!(mv_matrix) <span class="keyword">as</span> _);</span><br><span class="line"></span><br><span class="line">        gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">      &#125;</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">on_resize</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, w: <span class="type">i32</span>, h: <span class="type">i32</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">aspect</span> = w <span class="keyword">as</span> GLfloat / h <span class="keyword">as</span> GLfloat;</span><br><span class="line">#     <span class="keyword">self</span>.proj_matrix = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">50.0</span>, aspect, <span class="number">0.1</span>, <span class="number">1000.0</span>);</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="number">1</span>, <span class="number">1</span>, gl::FALSE, addr_of!(<span class="keyword">self</span>.proj_matrix) <span class="keyword">as</span> _);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">2</span>, &amp;<span class="keyword">self</span>.buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><div class="demo_app" id="_ch5_3_spinningcubes"></div><h3 id="uniform-区块"><a class="markdownIt-Anchor" href="#uniform-区块"></a> Uniform 区块</h3><p>如果程序成千上万的 uniform 变量意味着将会有很多散落在各处的<code>glUniform*()</code>（难以维护）。将 uniform 变量塞到一个块结构(uniform 区块)里，uniform 区块的数据和缓冲区对象绑定，从而降低调用 <code>glUniform*()</code>的开销。</p><p>和 uniform 区块相绑定的缓冲区称为 ubo</p><p><strong>声明</strong></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> [块名] &#123;</span><br><span class="line">  <span class="comment">// ... 成员变量</span></span><br><span class="line">&#125; [实例名];</span><br></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> TransformBlock</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">float</span> scale;</span><br><span class="line">  <span class="type">vec3</span> transition;</span><br><span class="line">  <span class="type">float</span> rotate[<span class="number">3</span>];</span><br><span class="line">  <span class="type">mat4</span> proj_matrix;</span><br><span class="line">&#125; transform;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和结构体类似，访问成员：<code>transform.scale</code></p><p>如果要定义多个 <code>TransformBlock</code> 块实例的话，这样子是不行的：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ERROR</span></span><br><span class="line"><span class="keyword">uniform</span> TransformBlock &#123;</span><br><span class="line">  <span class="type">float</span> scale;</span><br><span class="line">  <span class="type">vec3</span> translation;</span><br><span class="line">  <span class="type">float</span> rotate[<span class="number">3</span>];</span><br><span class="line">  <span class="type">mat4</span> projection_matrix;</span><br><span class="line">&#125; trans1, trans2;</span><br></pre></td></tr></table></figure><p>只能定义成一个数组：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"><span class="keyword">uniform</span> TransformBlock &#123;</span><br><span class="line">  <span class="type">float</span> scale;</span><br><span class="line">  <span class="type">vec3</span> translation;</span><br><span class="line">  <span class="type">float</span> rotate[<span class="number">3</span>];</span><br><span class="line">  <span class="type">mat4</span> projection_matrix;</span><br><span class="line">&#125; transforms[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>这样子就可以给 transforms[0] 和 transforms[1] 分配绑定不同的缓冲区对象了。</p><p>访问：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">gl_Position</span> =  transforms[<span class="number">0</span>].projection_matrix * <span class="type">vec4</span>(<span class="number">0.0</span>);</span><br></pre></td></tr></table></figure><p><strong>UBO的内存格式</strong></p><ul><li>标准布局：<ul><li>数据类型的大小 N 字节，则数据的存储位置为 N 字节的整数倍：<ul><li>int float bool：在 glsl 占用 4 字节，在缓冲区的存储地址为 4 的整数倍</li></ul></li><li>数据类型的大小 N 字节，则二维向量 与 2 * N 字节对齐<ul><li>vec2 的存储位置与 2 * 4 = 8 字节对齐</li></ul></li><li>数据类型的大小 N 字节，三维、四维向量与 4 * N 字节对齐<ul><li>vec3, vec4 的存储位置与 16字节对齐</li></ul></li><li>数组：每个元素和 4 * N 字节对齐</li><li>完整规则参考：<a href="https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf">OpenGL 4.6规范</a> <code>7.6.2.2 Standard Uniform Block Layout</code></li><li>好处：可以预知 uniform 区块内的数据位置，因为这些在标准里已经定义好了，所有 OpenGL 实现都遵循这这个标准</li><li>坏处：数据对进行对齐，稍微浪费空间</li></ul></li><li>shared 布局：<br />让 OpenGL 根据 uniform 区块的成员，自行决定其存储位置，会比标准布局高效，但是无法预知数据的存储位置，只能向 openGL 查询成员的位置后才能向 uniform 区块写入数据</li></ul><p>使用标准布局：在 uniform 关键字前加上 <code>layout(std140)</code></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span>(<span class="keyword">std140</span>) <span class="keyword">uniform</span> TransformBlock &#123;</span><br><span class="line">  <span class="type">float</span> scale;</span><br><span class="line">  <span class="type">vec3</span> translation;</span><br><span class="line">  <span class="type">float</span> rotate[<span class="number">3</span>];</span><br><span class="line">  <span class="type">mat4</span> projection_matrix;</span><br><span class="line">&#125; transforms;</span><br></pre></td></tr></table></figure><p>内存布局如下：</p><ul><li>scale 的起始位置为 0 字节，占用 4 字节</li><li>translation：类型为 vec3，与 16 字节对齐，因此起始位置为 16 字节，占用 4 * 3 = 12 字节</li><li>rotate：每个元素与 16 字节对齐：<ul><li>rotate[0]：起始位置为 32 字节</li><li>rotate[1]：起始位置为 48 字节</li><li>rotate[2]：起始位置为 64 字节</li></ul></li><li>mat4：可以看成 vec4 数组，每个元素与 16 字节对齐</li></ul><p>也可以直接指定 uniform 块内部成员的起始位置：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span>(<span class="keyword">std140</span>) <span class="keyword">uniform</span> ManuallyLaidOutBlock &#123;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">8</span>) <span class="type">vec2</span> bar;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">32</span>) <span class="type">vec3</span> foo;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">48</span>) <span class="type">vec3</span> baz;</span><br><span class="line">&#125; myBlock;</span><br></pre></td></tr></table></figure><p>指定成员的对齐位置时，成员的起始位置要满足上面的规则，如果不满足的话 shader 会编译失败：</p><figure class="highlight glsl"><figcaption><span>shader:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># #version 460 core</span></span><br><span class="line"><span class="keyword">layout</span>(<span class="keyword">std140</span>) <span class="keyword">uniform</span> ManuallyLaidOutBlock &#123;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">7</span>) <span class="type">vec2</span> bar;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">15</span>) <span class="type">vec3</span> foo;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">48</span>) <span class="type">vec3</span> baz;</span><br><span class="line">&#125; myBlock;</span><br><span class="line"><span class="meta"># void main() &#123; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight txt"><figcaption><span>错误输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">== 0:3(27): error: layout qualifier offset must be a multiple of the base alignment of vec2</span><br><span class="line">== 0:4(28): error: layout qualifier offset must be a multiple of the base alignment of vec3</span><br><span class="line">== 0:6(4): error: invalid qualifier xfb_offset=7 must be a multiple of the first component size of the first qualified variable or block member. Or double if an aggregate that contains a double (4).</span><br><span class="line">== 0:6(4): error: invalid qualifier xfb_offset=15 must be a multiple of the first component size of the first qualified variable or block member. Or double if an aggregate that contains a double (4).</span><br></pre></td></tr></table></figure><p>成员的顺序也很重要，前一个成员的内存位置必须小于后一个成员的位置：</p><figure class="highlight glsl"><figcaption><span>shader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># #version 460 core</span></span><br><span class="line"><span class="keyword">layout</span>(<span class="keyword">std140</span>) <span class="keyword">uniform</span> ManuallyLaidOutBlock &#123;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">16</span>) <span class="type">vec3</span> foo;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">8</span>) <span class="type">vec2</span> bar;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">48</span>) <span class="type">vec3</span> baz;</span><br><span class="line">&#125; myBlock;</span><br><span class="line"><span class="meta"># void main() &#123; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight txt"><figcaption><span>错误信息：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">== 0:4(27): error: layout qualifier offset overlaps previous member</span><br></pre></td></tr></table></figure><p>设置最小对齐间隔：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span>(<span class="keyword">std140</span>, align = <span class="number">16</span>) <span class="keyword">uniform</span> ManuallyLaidOutBlock &#123;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">8</span>) <span class="type">vec2</span> bar;   <span class="comment">// At offset 16 bytes</span></span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">32</span>) <span class="type">vec3</span> foo;  <span class="comment">// At offset 32 bytes</span></span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">48</span>) <span class="type">vec3</span> baz;  <span class="comment">// At offset 48 bytes</span></span><br><span class="line">&#125; myBlock;</span><br></pre></td></tr></table></figure><p>shared 布局 OpenGL 使用的默认布局，定义的时候不用加任何修饰符：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> TransformBlock &#123;</span><br><span class="line">  <span class="type">float</span> scale;</span><br><span class="line">  <span class="type">vec3</span> translation;</span><br><span class="line">  <span class="type">float</span> rotate[<span class="number">3</span>];</span><br><span class="line">  <span class="type">mat4</span> projection_matrix;</span><br><span class="line">&#125; transforms;</span><br></pre></td></tr></table></figure><p>在这个布局下，OpenGL会自己为 uniform 块的成员分配内存位置，这时候就不能自行指定成员起始位置：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># #version 460 core</span></span><br><span class="line"><span class="keyword">uniform</span> TransformBlock &#123;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">0</span>) <span class="type">float</span> scale;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">102</span>) <span class="type">vec3</span> translation;</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">116</span>) <span class="type">float</span> rotate[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">layout</span> (<span class="keyword">offset</span> = <span class="number">135</span>) <span class="type">mat4</span> projection_matrix;</span><br><span class="line">&#125; transforms;</span><br><span class="line"><span class="meta"># </span></span><br><span class="line"><span class="meta"># void main() &#123;</span></span><br><span class="line"><span class="meta">#   gl_Position =  transforms.projection_matrix * vec4(0.0);</span></span><br><span class="line"><span class="meta"># &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight txt"><figcaption><span>编译错误：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">== 0:3(28): error: offset can only be used with std430 and std140 layouts</span><br><span class="line">== 0:4(29): error: offset can only be used with std430 and std140 layouts</span><br><span class="line">== 0:5(30): error: offset can only be used with std430 and std140 layouts</span><br><span class="line">== 0:6(29): error: offset can only be used with std430 and std140 layouts</span><br></pre></td></tr></table></figure><p><strong>查询 uniform 区块成员的存储位置</strong></p><p>在 shared 布局下需要自己向 OpenGL 查询数据的位置和大小，因为OpenGL会按照自己的方式对数据的存放方式进行优化，此时在 OpenGL 程序里无法预知数据的位置，只能向 OpenGL 查询数据到底存在哪。查询过程：</p><p>查询某一成员在 uniform 区块里的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glGetUniformIndices</span><span class="params">(GLuint program,</span></span><br><span class="line"><span class="params">                         GLsizei uniformCount,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> GLchar **uniformNames,</span></span><br><span class="line"><span class="params">                         GLuint *uniformIndices)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>program</code>：uniform 区块所在的着色器程序</li><li><code>count</code>：要查询的成员个数，一般传 <code>uniformNames</code> 数组的元素个数</li><li><code>uniformNames</code>：要查询的成员，字符串数组</li><li><code>uniformIndices</code>：保存返回的成员位置</li></ul><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> TransformBlock &#123;</span><br><span class="line">  <span class="type">float</span> scale;</span><br><span class="line">  <span class="type">vec3</span> translation;</span><br><span class="line">  <span class="type">float</span> rotate[<span class="number">3</span>];</span><br><span class="line">  <span class="type">mat4</span> projection_matrix;</span><br><span class="line">&#125; transforms;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   program: GLuint,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     uniform TransformBlock &#123;</span></span><br><span class="line"><span class="string">#       float scale;</span></span><br><span class="line"><span class="string">#       vec3 translation;</span></span><br><span class="line"><span class="string">#       float rotate[3];</span></span><br><span class="line"><span class="string">#       mat4 projection_matrix;</span></span><br><span class="line"><span class="string">#     &#125; transforms;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position =  transforms.projection_matrix * vec4(0.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       color = vec4(1.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">program</span> = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs,gl::FRAGMENT_SHADER, <span class="literal">true</span>)</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">uniform_names</span> = [CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.rotate&quot;</span>),</span><br><span class="line">                         CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.scale&quot;</span>),</span><br><span class="line">                         CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.translation&quot;</span>),</span><br><span class="line">                         CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.projection_matrix&quot;</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指向字符串的指针数组</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">uniform_names</span> = uniform_names.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">                                     .<span class="title function_ invoke__">map</span>(|s| s.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">                                     .collect::&lt;<span class="type">Box</span>&lt;[_]&gt;&gt;();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_indices</span> = [<span class="number">0u32</span>; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">GetUniformIndices</span>(program, <span class="number">4</span>,</span><br><span class="line">                            uniform_names.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">                            uniform_indices.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">    &#125;</span><br><span class="line">#     <span class="comment">// [2, 0, 1, 3]</span></span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, uniform_indices);</span><br><span class="line">#   &#125;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>通过返回的 <code>uniformIndices</code> 数组和 <code>glGetActiveUniformsiv()</code> 查询成员在缓冲区的位置、占用大小等信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glGetActiveUniformsiv</span><span class="params">(GLuint program,</span></span><br><span class="line"><span class="params">                           GLsizei uniformCount,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> GLuint *uniformIndices,</span></span><br><span class="line"><span class="params">                           GLenum pname,</span></span><br><span class="line"><span class="params">                           GLint *params)</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>uniformIndices</code>、<code>uniformCount</code>：之前 <code>glGetUniformIndices()</code> 返回的数组</p></li><li><p><code>pname</code>：要查询的信息：</p><table><thead><tr><th style="text-align:left">pname 的取值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">GL_UNIFORM_TYPE</td><td style="text-align:left">成员数据类型</td></tr><tr><td style="text-align:left">GL_UNIFORM_SIZE</td><td style="text-align:left">成员是数组的话返回数组元素个数，不是数组返回 1</td></tr><tr><td style="text-align:left">GL_UNIFORM_NAME_LENGTH</td><td style="text-align:left">成员名称字符串长度</td></tr><tr><td style="text-align:left">GL_UNIFORM_BLOCK_INDEX</td><td style="text-align:left">成员所属区块的索引</td></tr><tr><td style="text-align:left">GL_UNIFORM_OFFSET</td><td style="text-align:left"><strong>成员在区块内的存储位置</strong></td></tr><tr><td style="text-align:left">GL_UNIFORM_ARRAY_STRIDE</td><td style="text-align:left">如果成员是数组，<strong>返回数组每个元素的大小</strong>，如果不是数组返回 0</td></tr><tr><td style="text-align:left">GL_UNIFORM_MATRIX_STRIDE</td><td style="text-align:left">如果成员是矩阵，<strong>返回矩阵每列（每行）的大小</strong>，如果不是矩阵返回 0</td></tr><tr><td style="text-align:left">GL_UNIFORM_IS_ROW_MAJOR</td><td style="text-align:left">如果成员是行优先矩阵返回 1，否则返回 0</td></tr></tbody></table></li><li><p><code>params</code>：查询返回结果</p></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> sb7::utils::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   program: GLuint,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     uniform TransformBlock &#123;</span></span><br><span class="line"><span class="string">#       float scale;</span></span><br><span class="line"><span class="string">#       vec3 translation;</span></span><br><span class="line"><span class="string">#       float rotate[3];</span></span><br><span class="line"><span class="string">#       mat4 projection_matrix;</span></span><br><span class="line"><span class="string">#     &#125; transforms;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position =  transforms.projection_matrix * vec4(0.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       color = vec4(1.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">program</span> = <span class="title function_ invoke__">program</span>(&amp;[<span class="title function_ invoke__">shader</span>(gl::VERTEX_SHADER, vs),</span><br><span class="line">#                             <span class="title function_ invoke__">shader</span>(gl::FRAGMENT_SHADER, fs)]);</span><br><span class="line">#     <span class="comment">// 查询 uniform 成员的下标</span></span><br><span class="line">#     <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">uniform_names</span> = [CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.rotate&quot;</span>),</span><br><span class="line">                         CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.scale&quot;</span>),</span><br><span class="line">                         CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.translation&quot;</span>),</span><br><span class="line">                         CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.projection_matrix&quot;</span>)];</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">uniform_names</span> = uniform_names.<span class="title function_ invoke__">map</span>(|s| s.<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">into_raw</span>());</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_indices</span> = [<span class="number">0u32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetUniformIndices</span>(program, <span class="number">4</span>, uniform_names.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">#                             uniform_indices.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">_</span> = uniform_names.<span class="title function_ invoke__">map</span>(|s| CString::<span class="title function_ invoke__">from_raw</span>(s)); <span class="comment">// 回收内存</span></span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 查询 uniform 成员的内存起始位置，每个元素的大小</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_offsets</span> = [<span class="number">0</span>; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">arr_strides</span> = [<span class="number">0</span>; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">mat_strides</span> = [<span class="number">0</span>; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">                              gl::UNIFORM_OFFSET,</span><br><span class="line">                              uniform_offsets.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">      gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">                              gl::UNIFORM_ARRAY_STRIDE,</span><br><span class="line">                              arr_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">      gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">                              gl::UNIFORM_MATRIX_STRIDE,</span><br><span class="line">                              mat_strides.<span class="title function_ invoke__">as_mut_ptr</span>())</span><br><span class="line">    &#125;</span><br><span class="line">#   &#125;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>这样就得到各个成员在缓冲区的位置和占用大小了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   program: GLuint,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">vs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">    uniform TransformBlock &#123;</span></span><br><span class="line"><span class="string">      float scale;</span></span><br><span class="line"><span class="string">      vec3 translation;</span></span><br><span class="line"><span class="string">      float rotate[3];</span></span><br><span class="line"><span class="string">      mat4 projection_matrix;</span></span><br><span class="line"><span class="string">    &#125; transforms;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">      gl_Position =  transforms.projection_matrix * vec4(0.0);</span></span><br><span class="line"><span class="string">    &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       color = vec4(1.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">program</span> = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs,gl::FRAGMENT_SHADER, <span class="literal">true</span>)</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">uniform_names</span> = [CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.rotate&quot;</span>),</span><br><span class="line">                         CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.scale&quot;</span>),</span><br><span class="line">                         CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.translation&quot;</span>),</span><br><span class="line">                         CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.projection_matrix&quot;</span>)];</span><br><span class="line">#     </span><br><span class="line">#     <span class="comment">// 指向字符串的指针数组</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">uniform_names</span> = uniform_names.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">#                                      .<span class="title function_ invoke__">map</span>(|s| s.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">#                                      .collect::&lt;<span class="type">Box</span>&lt;[_]&gt;&gt;();</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_indices</span> = [<span class="number">0u32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetUniformIndices</span>(program, <span class="number">4</span>,</span><br><span class="line">#                             uniform_names.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                             uniform_indices.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line">#     <span class="comment">// [2, 0, 1, 3]</span></span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, uniform_indices);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offsets</span>     = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">arr_strides</span> = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">mat_strides</span> = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_OFFSET,</span><br><span class="line">#                               offsets.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_ARRAY_STRIDE,</span><br><span class="line">#                               arr_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_MATRIX_STRIDE,</span><br><span class="line">#                               mat_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;rotate: offset = &#123;&#125;, stride = &#123;&#125;&quot;</span>,</span><br><span class="line">              offsets[<span class="number">0</span>], arr_strides[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;scale: offset = &#123;&#125;&quot;</span>, offsets[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;translation: offset = &#123;&#125;&quot;</span>, offsets[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;projection_matrix: offset = &#123;&#125;, stride = &#123;&#125;&quot;</span>,</span><br><span class="line">              offsets[<span class="number">3</span>], mat_strides[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">#   &#125;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><figcaption><span>输出：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rotate: offset = 28, stride = 4</span><br><span class="line">scale: offset = 0</span><br><span class="line">translation: offset = 16</span><br><span class="line">projection_matrix: offset = 48, stride = 16</span><br></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> TransformBlock &#123;</span><br><span class="line">  <span class="type">float</span> scale;</span><br><span class="line">  <span class="type">vec3</span> translation;</span><br><span class="line">  <span class="type">float</span> rotate[<span class="number">3</span>];</span><br><span class="line">  <span class="type">mat4</span> projection_matrix;</span><br><span class="line">&#125; transforms;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">uniform_names</span> = [CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.rotate&quot;</span>),</span><br><span class="line">                     CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.scale&quot;</span>),</span><br><span class="line">                     CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.translation&quot;</span>),</span><br><span class="line">                     CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.projection_matrix&quot;</span>)];</span><br></pre></td></tr></table></figure><p>在查询 uniform 区块的内存布局之后，分配内存，写入数据。最简单的情况，写入 float 变量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">data</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>([<span class="number">0u8</span>; <span class="number">4096</span>]);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">ptr</span> =  data.<span class="title function_ invoke__">as_ptr</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">offset</span> = offsets[<span class="number">1</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">  *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = <span class="number">3.0f32</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入 vec3 变量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">offset</span> = offsets[<span class="number">2</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">  *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">0</span>) = <span class="number">1.0f32</span>;</span><br><span class="line">  *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">1</span>) = <span class="number">2.0f32</span>;</span><br><span class="line">  *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">2</span>) = <span class="number">3.0f32</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入数组：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">rotates</span>: [<span class="type">f32</span>; <span class="number">3</span>] = [<span class="number">30.0</span>, <span class="number">40.0</span>, <span class="number">50.0</span>];</span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offset</span> = offsets[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">  <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">    *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = rotates[i];</span><br><span class="line">    offset += arr_strides[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入 mat4 变量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以列为主的矩阵</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">mat</span> : [<span class="type">f32</span>; <span class="number">16</span>]=  [ <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>,</span><br><span class="line">                        <span class="number">9.0</span>, <span class="number">8.0</span>, <span class="number">7.0</span>, <span class="number">6.0</span>,</span><br><span class="line">                        <span class="number">2.0</span>, <span class="number">4.0</span>, <span class="number">6.0</span>, <span class="number">8.0</span>,</span><br><span class="line">                        <span class="number">1.0</span>, <span class="number">3.0</span>, <span class="number">5.0</span>, <span class="number">7.0</span> ];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offset</span> = offsets[<span class="number">3</span>] <span class="keyword">as</span> <span class="type">usize</span></span><br><span class="line">                 + mat_strides[<span class="number">3</span>] <span class="keyword">as</span> <span class="type">usize</span> * col;</span><br><span class="line">  <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123; *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = mat[col * <span class="number">4</span> + row] &#125;;</span><br><span class="line">    offset += std::mem::size_of::&lt;<span class="type">f32</span>&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>绑定 uniform 区块和缓冲区对象</strong></p><p>创建缓冲对象，将上面准备好的内存写入缓冲：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   program: GLuint,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     uniform TransformBlock &#123;</span></span><br><span class="line"><span class="string">#       float scale;</span></span><br><span class="line"><span class="string">#       vec3 translation;</span></span><br><span class="line"><span class="string">#       float rotate[3];</span></span><br><span class="line"><span class="string">#       mat4 projection_matrix;</span></span><br><span class="line"><span class="string">#     &#125; transforms;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position =  transforms.projection_matrix * vec4(0.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       color = vec4(1.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">program</span> = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs,gl::FRAGMENT_SHADER, <span class="literal">true</span>)</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">uniform_names</span> = [CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.rotate&quot;</span>),</span><br><span class="line">#                          CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.scale&quot;</span>),</span><br><span class="line">#                          CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.translation&quot;</span>),</span><br><span class="line">#                          CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.projection_matrix&quot;</span>)];</span><br><span class="line">#     </span><br><span class="line">#     <span class="comment">// 指向字符串的指针数组</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">uniform_names</span> = uniform_names.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">#                                      .<span class="title function_ invoke__">map</span>(|s| s.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">#                                      .collect::&lt;<span class="type">Box</span>&lt;[_]&gt;&gt;();</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_indices</span> = [<span class="number">0u32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetUniformIndices</span>(program, <span class="number">4</span>,</span><br><span class="line">#                             uniform_names.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                             uniform_indices.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line">#     <span class="comment">// [2, 0, 1, 3]</span></span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, uniform_indices);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offsets</span>     = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">arr_strides</span> = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">mat_strides</span> = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_OFFSET,</span><br><span class="line">#                               offsets.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_ARRAY_STRIDE,</span><br><span class="line">#                               arr_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_MATRIX_STRIDE,</span><br><span class="line">#                               mat_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;rotate: offset = &#123;&#125;, stride = &#123;&#125;&quot;</span>,</span><br><span class="line">#               offsets[<span class="number">0</span>], arr_strides[<span class="number">0</span>]);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;scale: offset = &#123;&#125;&quot;</span>, offsets[<span class="number">1</span>]);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;translation: offset = &#123;&#125;&quot;</span>, offsets[<span class="number">2</span>]);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;projection_matrix: offset = &#123;&#125;, stride = &#123;&#125;&quot;</span>,</span><br><span class="line">#               offsets[<span class="number">3</span>], mat_strides[<span class="number">3</span>]);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">data</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>([<span class="number">0u8</span>; <span class="number">4096</span>]);</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">ptr</span> =  data.<span class="title function_ invoke__">as_ptr</span>();</span><br><span class="line">#     </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">offset</span> = offsets[<span class="number">1</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = <span class="number">3.0f32</span>;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">offset</span> = offsets[<span class="number">2</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">0</span>) = <span class="number">1.0f32</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">1</span>) = <span class="number">2.0f32</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">2</span>) = <span class="number">3.0f32</span>;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">rotates</span>: [<span class="type">f32</span>; <span class="number">3</span>] = [<span class="number">30.0</span>, <span class="number">40.0</span>, <span class="number">50.0</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offset</span> = offsets[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">#         *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = rotates[i];</span><br><span class="line">#         offset += arr_strides[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">mat</span> : [<span class="type">f32</span>; <span class="number">16</span>]=  [ <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>,</span><br><span class="line">#                             <span class="number">9.0</span>, <span class="number">8.0</span>, <span class="number">7.0</span>, <span class="number">6.0</span>,</span><br><span class="line">#                             <span class="number">2.0</span>, <span class="number">4.0</span>, <span class="number">6.0</span>, <span class="number">8.0</span>,</span><br><span class="line">#                             <span class="number">1.0</span>, <span class="number">3.0</span>, <span class="number">5.0</span>, <span class="number">7.0</span> ];</span><br><span class="line">#     <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offset</span> = offsets[<span class="number">3</span>] <span class="keyword">as</span> <span class="type">usize</span></span><br><span class="line">#                     + mat_strides[<span class="number">3</span>] <span class="keyword">as</span> <span class="type">usize</span> * col;</span><br><span class="line">#       <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">#         <span class="keyword">unsafe</span> &#123; *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = mat[col * <span class="number">4</span> + row] &#125;;</span><br><span class="line">#         offset += std::mem::size_of::&lt;<span class="type">f32</span>&gt;();</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_buf</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> uniform_buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(uniform_buf, data.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> _,</span><br><span class="line">                             data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _, gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">0</span>, uniform_buf);</span><br><span class="line">#       </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">name</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">uniform_blk_index</span> = gl::<span class="title function_ invoke__">GetUniformBlockIndex</span>(program, name.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">UniformBlockBinding</span>(program, uniform_blk_index, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">#   &#125;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>用 <code>glBindBufferBase()</code> 将缓冲区绑定到 <code>GL_UNIFORM_BUFFER</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glBindBufferBase</span><span class="params">(GLenum target,</span></span><br><span class="line"><span class="params">                      GLuint index,</span></span><br><span class="line"><span class="params">                      GLuint buffer)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>index</code>：自己给缓冲区指定的绑定下标，后面调 <code>glUniformBlockBinding()</code> 的时候要用</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   program: GLuint,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     uniform TransformBlock &#123;</span></span><br><span class="line"><span class="string">#       float scale;</span></span><br><span class="line"><span class="string">#       vec3 translation;</span></span><br><span class="line"><span class="string">#       float rotate[3];</span></span><br><span class="line"><span class="string">#       mat4 projection_matrix;</span></span><br><span class="line"><span class="string">#     &#125; transforms;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position =  transforms.projection_matrix * vec4(0.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       color = vec4(1.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">program</span> = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs,gl::FRAGMENT_SHADER, <span class="literal">true</span>)</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">uniform_names</span> = [CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.rotate&quot;</span>),</span><br><span class="line">#                          CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.scale&quot;</span>),</span><br><span class="line">#                          CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.translation&quot;</span>),</span><br><span class="line">#                          CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.projection_matrix&quot;</span>)];</span><br><span class="line">#     </span><br><span class="line">#     <span class="comment">// 指向字符串的指针数组</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">uniform_names</span> = uniform_names.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">#                                      .<span class="title function_ invoke__">map</span>(|s| s.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">#                                      .collect::&lt;<span class="type">Box</span>&lt;[_]&gt;&gt;();</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_indices</span> = [<span class="number">0u32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetUniformIndices</span>(program, <span class="number">4</span>,</span><br><span class="line">#                             uniform_names.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                             uniform_indices.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line">#     <span class="comment">// [2, 0, 1, 3]</span></span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, uniform_indices);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offsets</span>     = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">arr_strides</span> = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">mat_strides</span> = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_OFFSET,</span><br><span class="line">#                               offsets.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_ARRAY_STRIDE,</span><br><span class="line">#                               arr_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_MATRIX_STRIDE,</span><br><span class="line">#                               mat_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;rotate: offset = &#123;&#125;, stride = &#123;&#125;&quot;</span>,</span><br><span class="line">#               offsets[<span class="number">0</span>], arr_strides[<span class="number">0</span>]);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;scale: offset = &#123;&#125;&quot;</span>, offsets[<span class="number">1</span>]);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;translation: offset = &#123;&#125;&quot;</span>, offsets[<span class="number">2</span>]);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;projection_matrix: offset = &#123;&#125;, stride = &#123;&#125;&quot;</span>,</span><br><span class="line">#               offsets[<span class="number">3</span>], mat_strides[<span class="number">3</span>]);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">data</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>([<span class="number">0u8</span>; <span class="number">4096</span>]);</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">ptr</span> =  data.<span class="title function_ invoke__">as_ptr</span>();</span><br><span class="line">#     </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">offset</span> = offsets[<span class="number">1</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = <span class="number">3.0f32</span>;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">offset</span> = offsets[<span class="number">2</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">0</span>) = <span class="number">1.0f32</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">1</span>) = <span class="number">2.0f32</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">2</span>) = <span class="number">3.0f32</span>;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">rotates</span>: [<span class="type">f32</span>; <span class="number">3</span>] = [<span class="number">30.0</span>, <span class="number">40.0</span>, <span class="number">50.0</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offset</span> = offsets[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">#         *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = rotates[i];</span><br><span class="line">#         offset += arr_strides[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">mat</span> : [<span class="type">f32</span>; <span class="number">16</span>]=  [ <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>,</span><br><span class="line">#                             <span class="number">9.0</span>, <span class="number">8.0</span>, <span class="number">7.0</span>, <span class="number">6.0</span>,</span><br><span class="line">#                             <span class="number">2.0</span>, <span class="number">4.0</span>, <span class="number">6.0</span>, <span class="number">8.0</span>,</span><br><span class="line">#                             <span class="number">1.0</span>, <span class="number">3.0</span>, <span class="number">5.0</span>, <span class="number">7.0</span> ];</span><br><span class="line">#     <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offset</span> = offsets[<span class="number">3</span>] <span class="keyword">as</span> <span class="type">usize</span></span><br><span class="line">#                     + mat_strides[<span class="number">3</span>] <span class="keyword">as</span> <span class="type">usize</span> * col;</span><br><span class="line">#       <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">#         <span class="keyword">unsafe</span> &#123; *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = mat[col * <span class="number">4</span> + row] &#125;;</span><br><span class="line">#         offset += std::mem::size_of::&lt;<span class="type">f32</span>&gt;();</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_buf</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> uniform_buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(uniform_buf, data.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> _,</span><br><span class="line">                             data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _, gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"></span><br><span class="line">      gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">0</span>, uniform_buf);</span><br><span class="line">#       </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">name</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">uniform_blk_index</span> = gl::<span class="title function_ invoke__">GetUniformBlockIndex</span>(program, name.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">UniformBlockBinding</span>(program, uniform_blk_index, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">#   &#125;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>用 <code>glGetUniformBlockIndex()</code> 查询 uniform 区块的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GLuint <span class="title function_">glGetUniformBlockIndex</span><span class="params">(GLuint program,</span></span><br><span class="line"><span class="params">                              <span class="type">const</span> GLchar *uniformBlockName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   program: GLuint,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     uniform TransformBlock &#123;</span></span><br><span class="line"><span class="string">#       float scale;</span></span><br><span class="line"><span class="string">#       vec3 translation;</span></span><br><span class="line"><span class="string">#       float rotate[3];</span></span><br><span class="line"><span class="string">#       mat4 projection_matrix;</span></span><br><span class="line"><span class="string">#     &#125; transforms;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position =  transforms.projection_matrix * vec4(0.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs</span> = <span class="string">&quot;#version 460 core</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       color = vec4(1.0);</span></span><br><span class="line"><span class="string">#     &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">program</span> = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs,gl::FRAGMENT_SHADER, <span class="literal">true</span>)</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">uniform_names</span> = [CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.rotate&quot;</span>),</span><br><span class="line">#                          CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.scale&quot;</span>),</span><br><span class="line">#                          CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.translation&quot;</span>),</span><br><span class="line">#                          CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.projection_matrix&quot;</span>)];</span><br><span class="line">#     </span><br><span class="line">#     <span class="comment">// 指向字符串的指针数组</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">uniform_names</span> = uniform_names.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">#                                      .<span class="title function_ invoke__">map</span>(|s| s.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">#                                      .collect::&lt;<span class="type">Box</span>&lt;[_]&gt;&gt;();</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_indices</span> = [<span class="number">0u32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetUniformIndices</span>(program, <span class="number">4</span>,</span><br><span class="line">#                             uniform_names.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                             uniform_indices.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line">#     <span class="comment">// [2, 0, 1, 3]</span></span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, uniform_indices);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offsets</span>     = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">arr_strides</span> = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">mat_strides</span> = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_OFFSET,</span><br><span class="line">#                               offsets.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_ARRAY_STRIDE,</span><br><span class="line">#                               arr_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(program, <span class="number">4</span>, uniform_indices.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">#                               gl::UNIFORM_MATRIX_STRIDE,</span><br><span class="line">#                               mat_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;rotate: offset = &#123;&#125;, stride = &#123;&#125;&quot;</span>,</span><br><span class="line">#               offsets[<span class="number">0</span>], arr_strides[<span class="number">0</span>]);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;scale: offset = &#123;&#125;&quot;</span>, offsets[<span class="number">1</span>]);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;translation: offset = &#123;&#125;&quot;</span>, offsets[<span class="number">2</span>]);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;projection_matrix: offset = &#123;&#125;, stride = &#123;&#125;&quot;</span>,</span><br><span class="line">#               offsets[<span class="number">3</span>], mat_strides[<span class="number">3</span>]);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">data</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>([<span class="number">0u8</span>; <span class="number">4096</span>]);</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">ptr</span> =  data.<span class="title function_ invoke__">as_ptr</span>();</span><br><span class="line">#     </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">offset</span> = offsets[<span class="number">1</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = <span class="number">3.0f32</span>;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">offset</span> = offsets[<span class="number">2</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">0</span>) = <span class="number">1.0f32</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">1</span>) = <span class="number">2.0f32</span>;</span><br><span class="line">#       *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>).<span class="title function_ invoke__">add</span>(<span class="number">2</span>) = <span class="number">3.0f32</span>;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">rotates</span>: [<span class="type">f32</span>; <span class="number">3</span>] = [<span class="number">30.0</span>, <span class="number">40.0</span>, <span class="number">50.0</span>];</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offset</span> = offsets[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">#         *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = rotates[i];</span><br><span class="line">#         offset += arr_strides[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">usize</span>;</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">mat</span> : [<span class="type">f32</span>; <span class="number">16</span>]=  [ <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>,</span><br><span class="line">#                             <span class="number">9.0</span>, <span class="number">8.0</span>, <span class="number">7.0</span>, <span class="number">6.0</span>,</span><br><span class="line">#                             <span class="number">2.0</span>, <span class="number">4.0</span>, <span class="number">6.0</span>, <span class="number">8.0</span>,</span><br><span class="line">#                             <span class="number">1.0</span>, <span class="number">3.0</span>, <span class="number">5.0</span>, <span class="number">7.0</span> ];</span><br><span class="line">#     <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offset</span> = offsets[<span class="number">3</span>] <span class="keyword">as</span> <span class="type">usize</span></span><br><span class="line">#                     + mat_strides[<span class="number">3</span>] <span class="keyword">as</span> <span class="type">usize</span> * col;</span><br><span class="line">#       <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">#         <span class="keyword">unsafe</span> &#123; *(ptr.<span class="title function_ invoke__">add</span>(offset) <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">f32</span>) = mat[col * <span class="number">4</span> + row] &#125;;</span><br><span class="line">#         offset += std::mem::size_of::&lt;<span class="type">f32</span>&gt;();</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">uniform_buf</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> uniform_buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferStorage</span>(uniform_buf, data.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> _,</span><br><span class="line">                             data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _, gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line"></span><br><span class="line">      gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">0</span>, uniform_buf);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">let</span> <span class="variable">name</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">uniform_blk_index</span> = gl::<span class="title function_ invoke__">GetUniformBlockIndex</span>(program,</span><br><span class="line">                                                       name.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">UniformBlockBinding</span>(program, uniform_blk_index, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">#   &#125;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.program);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>最后用 <code>glUniformBlockBinding()</code> 将缓冲区对象与 uniform 区块向绑定：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glUniformBlockBinding</span><span class="params">(GLuint program,</span></span><br><span class="line"><span class="params">                           GLuint uniformBlockIndex,</span></span><br><span class="line"><span class="params">                           GLuint uniformBlockBinding)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>uniformBlockIndex</code>：<code>glGetUniformBlockIndex()</code> 返回的 uniform 区块下标</li><li><code>uniformBlockBinding</code>：缓冲区对象调用 <code>glBindBufferBase()</code> 时设置的 <code>index</code></li></ul><p>这样就完成了缓冲区对象和 uniform 区块之间的绑定</p><p>缓冲区对象和 uniform 区块之间的关系：</p><p><img src="./uniform_blk_buffers.png" alt="uniform block and buffers match" /></p><p>上图对应的处理代码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [harry_index, bob_index, susan_index] = [<span class="string">&quot;Harry&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Susan&quot;</span>]</span><br><span class="line">  .<span class="title function_ invoke__">map</span>(|s| CString::<span class="title function_ invoke__">new</span>(s).<span class="title function_ invoke__">unwrap</span>())</span><br><span class="line">  .<span class="title function_ invoke__">map</span>(|s| gl::<span class="title function_ invoke__">GetUniformBlockIndex</span>(program, s.<span class="title function_ invoke__">as_ptr</span>()));</span><br><span class="line"></span><br><span class="line">gl::<span class="title function_ invoke__">UniformBlockBinding</span>(program, harry_index, <span class="number">1</span>);</span><br><span class="line">gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">1</span>, buf_c);</span><br><span class="line"></span><br><span class="line">gl::<span class="title function_ invoke__">UniformBlockBinding</span>(program, bob_index, <span class="number">3</span>);</span><br><span class="line">gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">3</span>, buf_a);</span><br><span class="line"></span><br><span class="line">gl::<span class="title function_ invoke__">UniformBlockBinding</span>(program, susan_index, <span class="number">0</span>);</span><br><span class="line">gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, buf_b, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>uniform  区块的绑定的缓冲区对象下标也可以在着色器里指定：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">1</span>) <span class="keyword">uniform</span> Harry &#123;</span><br><span class="line"><span class="meta">#   float a;</span></span><br><span class="line"><span class="meta">#   mat4 b;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> (<span class="keyword">binding</span> = <span class="number">3</span>) Bob &#123;</span><br><span class="line"><span class="meta">#   int c;</span></span><br><span class="line"><span class="meta">#   ivec4 d;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> (<span class="keyword">binding</span> = <span class="number">0</span>) Susan &#123;</span><br><span class="line"><span class="meta">#   mat4 e[10];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样子就可以删除 <code>UniformBlockBinding()</code> 函数了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">1</span>, buf_c);</span><br><span class="line">gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">3</span>, buf_a);</span><br><span class="line">gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">0</span>, buf_b);</span><br></pre></td></tr></table></figure><p>回到之前使用标准布局的 uniform 区块，根据规范可以推断出各个成员的位置：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span>(<span class="keyword">std140</span>) <span class="keyword">uniform</span> TransformBlock &#123;</span><br><span class="line">  <span class="type">float</span> scale;            <span class="comment">// offset: 0</span></span><br><span class="line">  <span class="type">vec3</span> translation;       <span class="comment">// offset: 16</span></span><br><span class="line">  <span class="type">float</span> rotate[<span class="number">3</span>];        <span class="comment">// offset: 32, stride: 16</span></span><br><span class="line">  <span class="type">mat4</span> projection_matrix; <span class="comment">// offset: 80, stride: 16</span></span><br><span class="line">&#125; transforms;</span><br></pre></td></tr></table></figure><p>现在可以用 <code>glGetActiveUniformsiv()</code> 来验证了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> std::ffi::CString;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout(std140) uniform TransformBlock &#123;</span></span><br><span class="line"><span class="string">#       float scale;</span></span><br><span class="line"><span class="string">#       vec3 translation;</span></span><br><span class="line"><span class="string">#       float rotate[3];</span></span><br><span class="line"><span class="string">#       mat4 projection_matrix;</span></span><br><span class="line"><span class="string">#     &#125; trans;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position = trans.scale * vec4(1.0);</span></span><br><span class="line"><span class="string">#     &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string">#     void main() &#123; color = vec4(1.0); &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">prog</span> = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs, gl::FRAGMENT_SHADER, <span class="literal">true</span>),</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">names</span> = [</span><br><span class="line">        CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.scale&quot;</span>),</span><br><span class="line">        CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.translation&quot;</span>),</span><br><span class="line">        CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.rotate&quot;</span>),</span><br><span class="line">        CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;TransformBlock.projection_matrix&quot;</span>),</span><br><span class="line">      ];</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">names</span> = names.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">       .<span class="title function_ invoke__">map</span>(|s| s.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">       .collect::&lt;<span class="type">Box</span>&lt;[*<span class="keyword">const</span> <span class="type">i8</span>]&gt;&gt;();</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">indices</span> = [<span class="number">0i32</span>; <span class="number">4</span>];</span><br><span class="line">      gl::<span class="title function_ invoke__">GetUniformIndices</span>(prog, <span class="number">4</span>, names.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">                            indices.<span class="title function_ invoke__">as_mut_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line">      <span class="built_in">assert_ne!</span>(indices, [-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>], <span class="string">&quot;glGetUniformIndices() failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">offsets</span> = [<span class="number">0</span>; <span class="number">4</span>];</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">arr_strides</span> = [<span class="number">0</span>; <span class="number">4</span>];</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">mat_strides</span> = [<span class="number">0</span>; <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">      gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(prog, <span class="number">4</span>, indices.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">                              gl::UNIFORM_OFFSET,</span><br><span class="line">                              offsets.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">      gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(prog, <span class="number">4</span>, indices.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">                              gl::UNIFORM_ARRAY_STRIDE,</span><br><span class="line">                              arr_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">      gl::<span class="title function_ invoke__">GetActiveUniformsiv</span>(prog, <span class="number">4</span>, indices.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">                              gl::UNIFORM_MATRIX_STRIDE,</span><br><span class="line">                              mat_strides.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">assert_eq!</span>(offsets[<span class="number">0</span>], <span class="number">0</span>);  <span class="comment">// scale</span></span><br><span class="line">      <span class="built_in">assert_eq!</span>(offsets[<span class="number">1</span>], <span class="number">16</span>); <span class="comment">// translation</span></span><br><span class="line">      <span class="built_in">assert_eq!</span>(offsets[<span class="number">2</span>], <span class="number">32</span>); <span class="comment">// rotate</span></span><br><span class="line">      <span class="built_in">assert_eq!</span>(arr_strides[<span class="number">2</span>], <span class="number">16</span>);</span><br><span class="line">      <span class="built_in">assert_eq!</span>(offsets[<span class="number">3</span>], <span class="number">80</span>); <span class="comment">// projection_matrix</span></span><br><span class="line">      <span class="built_in">assert_eq!</span>(mat_strides[<span class="number">3</span>], <span class="number">16</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><h2 id="着色器存储区块"><a class="markdownIt-Anchor" href="#着色器存储区块"></a> 着色器存储区块</h2><p>和 uniform 区块类似，着色器存储区块也需要绑定一块缓冲区对象以存储数据。除了用来向着色器传递数据以外，着色器也可以向着色器存储区块写入数据。</p><ul><li>和 uniform 区块的相似之处：<ul><li>声明：和 uniform 区块类似，只是将 uniform 关键字替换成 buffer</li><li>绑定缓冲区：也是用 <code>glBindBufferBase()</code>，只是将 <code>GL_UNIFORM_BUFFER</code> 换成 <code>GL_SHADER_STORAGE_BUFFER</code></li><li>可以指定内存布局：std140 std430</li><li>OpenGL 应用程序都可以通过缓冲区映射读取区块内的数据。</li></ul></li><li>不同之处：<ul><li><strong>着色器可以向着色器存储区块写入数据</strong></li><li>支持原子操作(读取-编辑-写入 --&gt; 不可分割)</li></ul></li></ul><p><strong>声明</strong></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line">struct vertex &#123;</span><br><span class="line">  <span class="type">vec4</span> position;</span><br><span class="line">  <span class="type">vec3</span> color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>, <span class="keyword">std430</span>) <span class="keyword">buffer</span> my_vertices &#123;</span><br><span class="line">  vertex <span class="keyword">vertices</span>[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> transform_matrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span> VS_OUT &#123;</span><br><span class="line">  <span class="type">vec3</span> color;</span><br><span class="line">&#125; vs_out;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>) &#123;</span><br><span class="line">  <span class="built_in">gl_Position</span> = transform_matrix * <span class="keyword">vertices</span>[<span class="built_in">gl_VertexID</span>].position;</span><br><span class="line">  vs_out.color = <span class="keyword">vertices</span>[<span class="built_in">gl_VertexID</span>].color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原子操作"><a class="markdownIt-Anchor" href="#原子操作"></a> 原子操作</h3><p>只有 32 位整型（int 和 uint）才支持原子操作，可以避免数据竞争：</p><table><thead><tr><th style="text-align:left">Syntax</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">uint atomicAdd(inout uint mem, uint data)<br>int atomicAdd(inout int mem, int data)</td><td style="text-align:left">从 mem 读数据，将其和 data 相加，结果存入 mem。返回值：mem 之前的值 <br> mem &lt;- mem + data</td></tr><tr><td style="text-align:left">uint atomicMin(inout uint mem, uint data)<br>int atomicMin(inout int mem, int data)</td><td style="text-align:left">从 mem 读数据，将其和 data 取最小值，结果存入 mem。返回值：mem 之前的值 <br> mem &lt;- mem.min(data)</td></tr><tr><td style="text-align:left">uint atomicMax(inout uint mem, uint data)<br>int atomicMax(inout int mem, int data)</td><td style="text-align:left">从 mem 读数据，将其和 data 取最大值，结果存入 mem。返回值：mem 之前的值 <br> mem &lt;- mem.max(data)</td></tr><tr><td style="text-align:left">uint atomicAnd(inout uint mem, uint data)<br>int atomicAnd(inout int mem, int data)</td><td style="text-align:left">从 mem 读数据，将其和 data 按位求逻辑与，结果存入 mem。返回值：mem 之前的值 <br> mem &lt;- mem &amp; data</td></tr><tr><td style="text-align:left">uint atomicOr(inout uint mem, uint data) <br>int atomicOr(inout int mem, int data)</td><td style="text-align:left">从 mem 读数据，将其和 data 按位求逻辑或，结果存入 mem。返回值：mem 之前的值 <br> mem &lt;- mem | data</td></tr><tr><td style="text-align:left">uint atomicXor(inout uint mem, uint data)<br>int atomicXor(inout int mem, int data)</td><td style="text-align:left">从 mem 读数据，将其和 data 按位异或，结果存入 mem。返回值：mem 之前的值 <br> mem &lt;- mem xor data</td></tr><tr><td style="text-align:left">uint atomicExchange(inout uint mem, uint data)<br>int atomicExchange(inout int mem, int data)</td><td style="text-align:left">从 mem 读数据，将 data 写入 mem。返回值：mem 之前的值 <br> mem &lt;- data</td></tr><tr><td style="text-align:left">uint atomicCompSwap(inout uint mem, uint compare, uint data)<br>int atomicCompSwap(inout int mem, int compare, int data)</td><td style="text-align:left">从 mem 读数据，如果读到的数据和 comp 相等，将 data 写入 mem。返回值：mem 之前的值<br> if mem == comp {<br>   mem &lt;- data<br>}</td></tr></tbody></table><h3 id="同步访问内存"><a class="markdownIt-Anchor" href="#同步访问内存"></a> 同步访问内存</h3><p>当着色器开始将数据写入缓冲区时（向着色器存储区块里的成员赋值，或者通过原子操作函数写入着色器存储区块），可能会引发内存风险</p><p>内存风险大概分为三类：</p><ul><li>先读后写(RAW)风险：当程序在写入一块内存后尝试读取时，根据系统架构，读写操作可能被重新排序，使得读在写之前完成，导致旧数据返回应用程序</li><li>先写后写（WRW)风险：当程序连续两次写入同一块内存时，在某些架构下，无法保证第二个数据会覆盖第一个数据，导致最终进入内存的是第一个数据</li><li>先写后读风险（WAR）风险：只在并行处理系统里（如GPU）出现，当一个执行线程在另一线程认为自己已经读取内存后尝试将数据写入内存时会发生此风险。如果这些操作被重新排序，执行读操作的线程会读取到第二个线程写入的数据。</li></ul><p>运行 OpenGL 的系统具有较强的管线和并行特点，包含了大量缓解和控制内存风险的机制。如果没有这些功能，OpenGL实现需要更加保守地重排和并行运行这些着色器。处理内存风险的主要工具为<em>内存屏障（memory barrier）</em>。</p><p>内存屏障基本上是一个助记符，指示 OpenGL “如果准备重新排序，需要先完成之前发送的命令，不要执行之后的命令” ，可以在 OpenGL 应用程序和着色器里插入屏障。</p><h3 id="在-opengl-应用程序内使用屏障"><a class="markdownIt-Anchor" href="#在-opengl-应用程序内使用屏障"></a> 在 OpenGL 应用程序内使用屏障</h3><p>在 OpenGL 应用程序的代码里插入 <code>glMemoryBarrier()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glMemoryBarrier</span><span class="params">(GLbitfield barriers)</span>;</span><br></pre></td></tr></table></figure><p><code>barriers</code> 用来说明哪些内存会受内存屏障的影响，哪些可以忽略内存屏障继续运行：</p><ul><li><code>GL_ALL_BARRIER_BITS</code>：对所有的内存子系统进行同步</li><li><code>GL_SHADER_STORAGE_BARRIER_BIT</code>：只有在屏障之前的着色器完成数据的访问之后，才允许屏障之后的着色器运行</li><li><code>GL_UNIFORM_BARRIER_BIT</code>：只有在写入缓冲的着色器结束后，才允许屏障后以该缓冲作为 uniform 区块的着色器运行</li><li><code>GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT</code>：等待向缓冲写入数据的着色器完成后，才允许将该缓存作为顶点属性输入的着色器运行</li></ul><h3 id="在着色器内使用屏障"><a class="markdownIt-Anchor" href="#在着色器内使用屏障"></a> 在着色器内使用屏障</h3><p>在着色器里插入 <code>memoryBarrier()</code>：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="built_in">memoryBarrier</span>();</span><br></pre></td></tr></table></figure><p>也可以使用更为具体的函数：<code>memoryBarrierBuffer()</code></p><h2 id="原子计数器"><a class="markdownIt-Anchor" href="#原子计数器"></a> 原子计数器</h2><p>一种特殊类型的变量，表示跨多个着色器调用共享的存储。</p><ul><li>原子计数器的值存储在缓冲区对象里，GLSL中提供了递增和递减原子计数器的函数。</li><li>如果两个着色器调用同时递增同一个原子计数器，OpenGL会让它们轮流执行。不能保证这些操f作将发生的顺序，但能保证结果正确。</li></ul><p>在着色器内声明原子计数器：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">atomic_uint</span> my_variable</span><br></pre></td></tr></table></figure><p>binding 代表原子计数器和缓冲区对象之间的绑定点。</p><p>每个原子计数器存储在缓冲区对象中的特定偏移量处。这个偏移量可以通过 offset 限定符指定：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">3</span>, <span class="keyword">offset</span> = <span class="number">8</span>) <span class="keyword">uniform</span> <span class="type">atomic_uint</span> my_variable;</span><br></pre></td></tr></table></figure><p>存储原子计数器的缓冲区对象需要绑定到 <code>GL_ATOMIC_COUNTER_BUFFER</code> 上：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::mem::size_of;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line"></span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferData</span>(buf,</span><br><span class="line">                          <span class="number">16</span> * size_of::&lt;GLuint&gt;() <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                          <span class="title function_ invoke__">null</span>(),</span><br><span class="line">                          gl::DYNAMIC_COPY);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置绑定下标，和 shader 内的原子计数器对应</span></span><br><span class="line">      gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::ATOMIC_COUNTER_BUFFER, <span class="number">3</span>, buf);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>初始化存储原子计数器的缓冲区对象：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> gl::types::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">use</span> std::mem::size_of;</span><br><span class="line"># <span class="keyword">use</span> std::ptr::null;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferData</span>(buf,</span><br><span class="line">#                           <span class="number">16</span> * size_of::&lt;GLuint&gt;() <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">#                           <span class="title function_ invoke__">null</span>(),</span><br><span class="line">#                           gl::DYNAMIC_COPY);</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 设置绑定下标，和 shader 内的原子计数器对应</span></span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::ATOMIC_COUNTER_BUFFER, <span class="number">3</span>, buf);</span><br><span class="line"># </span><br><span class="line">      <span class="keyword">let</span> <span class="variable">zero</span>: GLuint = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法1 - 使用 gl(Named)BufferSubData 命令</span></span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferSubData</span>(buf,</span><br><span class="line">                            <span class="number">2</span> * size_of::&lt;GLuint&gt;() <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                            size_of::&lt;GLuint&gt;() <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                            &amp;zero <span class="keyword">as</span> *<span class="keyword">const</span> _ <span class="keyword">as</span> _);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法2 - 使用 glMap(Named)BufferRange 命令将 buffer 映射到</span></span><br><span class="line">      <span class="comment">//        OpenGL 应用程序的内存空间上，然后直接写入</span></span><br><span class="line">      <span class="keyword">let</span> <span class="variable">data</span>: *<span class="keyword">mut</span> GLuint =</span><br><span class="line">        gl::<span class="title function_ invoke__">MapNamedBufferRange</span>(buf,</span><br><span class="line">                                <span class="number">0</span>, <span class="number">16</span> * size_of::&lt;GLuint&gt;() <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                                gl::MAP_WRITE_BIT |</span><br><span class="line">                                gl::MAP_INVALIDATE_RANGE_BIT) <span class="keyword">as</span> _;</span><br><span class="line">      *data.<span class="title function_ invoke__">add</span>(<span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法3 - 使用 glClear(Named)BufferSubData 命令</span></span><br><span class="line">      gl::<span class="title function_ invoke__">ClearNamedBufferSubData</span>(buf,</span><br><span class="line">                                  gl::R32UI,</span><br><span class="line">                                  <span class="number">2</span> * size_of::&lt;GLuint&gt;() <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                                  <span class="number">2</span> * size_of::&lt;GLuint&gt;() <span class="keyword">as</span> <span class="type">isize</span>,</span><br><span class="line">                                  gl::RED_INTEGER,</span><br><span class="line">                                  gl::UNSIGNED_INT,</span><br><span class="line">                                  &amp;zero <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">u32</span> <span class="keyword">as</span> _);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>在初始化 buffer，并将和原子计数器绑定后，就可以在 shader 内使用原子计数器计数了。</p><p>递增计数器：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint</span> <span class="built_in">atomicCounterIncrement</span>(<span class="type">atomic_uint</span> c);</span><br></pre></td></tr></table></figure><p>这个函数从原子计数器读取值，将其加一，<strong>返回原来读到的值</strong>。</p><p>递减计数器：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint</span> <span class="built_in">atomicCounterDecrement</span>(<span class="type">atomic_uint</span> c);</span><br></pre></td></tr></table></figure><p><strong>这个函数返回减一后的值。</strong></p><p>查询原子计数器的值：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint</span> <span class="built_in">atomicCounter</span>(<span class="type">atomic_uint</span> c);</span><br></pre></td></tr></table></figure><p>通过原子计数器来计算渲染对象在屏幕上的面积：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 450 core</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>, <span class="keyword">offset</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">atomic_uint</span> area;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>) &#123;</span><br><span class="line">  <span class="built_in">atomicCounterIncrement</span>(area);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个片段着色器并没有输出（out 变量），不会向帧缓冲写入任何数据。在运行这个着色器时，可以关闭向帧缓冲的写入：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">ColorMask</span>(GL::FALSE, GL::FALSE, GL::FALSE, GL::FALSE);</span><br></pre></td></tr></table></figure><p>等到需要渲染的时候再重新启用对缓冲区的写入：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">ColorMask</span>(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);</span><br></pre></td></tr></table></figure><p>在使用原子计数器后，存储原子计数器的缓冲区可以绑定到其他目标上，如 <code>GL_UNIFORM_BUFFER</code>，之后就可以通过 uniform 区块来使用原子计数器的值了：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 450 core</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>) <span class="keyword">uniform</span> area_block &#123;</span><br><span class="line">  <span class="type">uint</span> counter_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">float</span> max_area;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>) &#123;</span><br><span class="line">  <span class="type">float</span> brightness = <span class="built_in">clamp</span>(<span class="type">float</span>(counter_value) / max_area,</span><br><span class="line">                           <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">  color = <span class="type">vec4</span>(<span class="type">vec3</span>(brightness), <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>startup()</code> 里可以同时将缓冲区对象绑定到 <code>GL_ATOMIC_COUNTER_BUFFER</code> 和 <code>GL_UNIFORM_BUFFER</code>，这样子这块缓冲就可以同时用作原子计数器和 uniform区块了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::&#123;application::*, vmath::*&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::&#123;</span><br><span class="line">#   ffi::CString,</span><br><span class="line">#   mem::&#123;size_of, size_of_val&#125;,</span><br><span class="line">#   ptr::&#123;addr_of, null&#125;,</span><br><span class="line"># &#125;;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   prog_counter: <span class="type">u32</span>,</span><br><span class="line">#   prog_render: <span class="type">u32</span>,</span><br><span class="line">#   vao: <span class="type">u32</span>,</span><br><span class="line">#   vbo: <span class="type">u32</span>,</span><br><span class="line">#   atombuf: <span class="type">u32</span>,</span><br><span class="line">#   proj_mat: Mat4,</span><br><span class="line">#   max_area: <span class="type">f32</span>,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#       #version 460 core</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       in vec3 position;</span></span><br><span class="line"><span class="string">#       uniform mat4 trans;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#       void main(void) &#123;</span></span><br><span class="line"><span class="string">#         gl_Position = trans * vec4(position, 1.0);</span></span><br><span class="line"><span class="string">#       &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = CString::<span class="title function_ invoke__">new</span>(vs_src).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_counter_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#       #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#       layout (binding = 0, offset = 0) uniform atomic_uint area;</span></span><br><span class="line"><span class="string">#       out vec4 color;</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       void main(void) &#123;</span></span><br><span class="line"><span class="string">#         atomicCounterIncrement(area);</span></span><br><span class="line"><span class="string">#         color = vec4(1.0);</span></span><br><span class="line"><span class="string">#       &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_counter_src</span> = CString::<span class="title function_ invoke__">new</span>(fs_counter_src).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_render_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#       #version 460 core</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       layout (binding = 0) uniform area_block &#123;</span></span><br><span class="line"><span class="string">#       uint counter_value;</span></span><br><span class="line"><span class="string">#       &#125;;</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       out vec4 color;</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       uniform float max_area;</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       void main(void) &#123;</span></span><br><span class="line"><span class="string">#         float brightness = clamp(float(counter_value) / max_area,</span></span><br><span class="line"><span class="string">#                                   0.0, 1.0);</span></span><br><span class="line"><span class="string">#         color = vec4(vec3(brightness), 1.0);</span></span><br><span class="line"><span class="string">#       &#125;&quot;</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_render_src</span> = CString::<span class="title function_ invoke__">new</span>(fs_render_src).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置 shader</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_src.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_counter</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs_counter, <span class="number">1</span>, &amp;fs_counter_src.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs_counter);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_render</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs_render, <span class="number">1</span>, &amp;fs_render_src.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs_render);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">self</span>.prog_counter = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(<span class="keyword">self</span>.prog_counter, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(<span class="keyword">self</span>.prog_counter, fs_counter);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(<span class="keyword">self</span>.prog_counter);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">self</span>.prog_render = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(<span class="keyword">self</span>.prog_render, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(<span class="keyword">self</span>.prog_render, fs_render);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(<span class="keyword">self</span>.prog_render);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs_counter);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs_render);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置 vao</span></span><br><span class="line">#     <span class="meta">#[rustfmt::skip]</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span></span><br><span class="line">#     ];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vbo</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferData</span>(vbo,</span><br><span class="line">#                       <span class="title function_ invoke__">size_of_val</span>(vertex_position) <span class="keyword">as</span> _,</span><br><span class="line">#                       vertex_position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">#                       gl::STATIC_DRAW);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">0</span>, vbo, <span class="number">0</span>, <span class="number">3</span> * size_of::&lt;<span class="type">f32</span>&gt;() <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line">#       <span class="keyword">self</span>.vao = vao;</span><br><span class="line">#       <span class="keyword">self</span>.vbo = vbo;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置存储 原子计数器 的 buffer</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">NamedBufferData</span>(buf, size_of::&lt;<span class="type">u32</span>&gt;() <span class="keyword">as</span> _,</span><br><span class="line">                      &amp;<span class="number">0u32</span> <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">u32</span> <span class="keyword">as</span> _, gl::DYNAMIC_COPY);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">self</span>.atombuf = buf;</span><br><span class="line"></span><br><span class="line">      gl::<span class="title function_ invoke__">BindBuffer</span>(gl::UNIFORM_BUFFER, buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">0</span>, buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ATOMIC_COUNTER_BUFFER, buf);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::ATOMIC_COUNTER_BUFFER, <span class="number">0</span>, buf);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 初始化投影矩阵</span></span><br><span class="line">#     <span class="keyword">self</span>.<span class="title function_ invoke__">on_resize</span>(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 启用深度测试</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">Enable</span>(gl::DEPTH_TEST);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">Self</span> &#123; vao,</span><br><span class="line">#                proj_mat,</span><br><span class="line">#                prog_render,</span><br><span class="line">#                prog_counter,</span><br><span class="line">#                atombuf,</span><br><span class="line">#                max_area,</span><br><span class="line">#                .. &#125; = <span class="keyword">self</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR, <span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, &amp;<span class="number">1.0</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(*vao);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">current_time</span> = current_time <span class="keyword">as</span> <span class="type">f32</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">24</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">f</span> = i <span class="keyword">as</span> <span class="type">f32</span> + current_time * <span class="number">0.3</span>;</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">trans_mat</span> = <span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">6.0</span>)</span><br><span class="line">#                       * <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">45.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>)</span><br><span class="line">#                       * <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">21.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">#                       * <span class="title function_ invoke__">translate</span>((<span class="number">2.1</span> * f).<span class="title function_ invoke__">sin</span>() * <span class="number">2.0</span>,</span><br><span class="line">#                                   (<span class="number">1.7</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">2.0</span>,</span><br><span class="line">#                                   (<span class="number">1.3</span> * f).<span class="title function_ invoke__">sin</span>() * (<span class="number">1.5</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">2.0</span>);</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">trans_mat</span> = *proj_mat * trans_mat;</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#         gl::<span class="title function_ invoke__">ColorMask</span>(gl::FALSE, gl::FALSE, gl::FALSE, gl::FALSE);</span><br><span class="line">#         gl::<span class="title function_ invoke__">DepthMask</span>(gl::FALSE);</span><br><span class="line"># </span><br><span class="line">#         <span class="comment">// 使用 prog_counter 计算面积</span></span><br><span class="line">#         gl::<span class="title function_ invoke__">UseProgram</span>(*prog_counter);</span><br><span class="line"># </span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">cptr</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;trans&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">location</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(*prog_counter, cptr.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#         gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(location, <span class="number">1</span>, gl::FALSE, addr_of!(trans_mat) <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">#         <span class="comment">// 重置原子计数</span></span><br><span class="line">#         gl::<span class="title function_ invoke__">NamedBufferData</span>(*atombuf,</span><br><span class="line">#                         size_of::&lt;<span class="type">u32</span>&gt;() <span class="keyword">as</span> _,</span><br><span class="line">#                         &amp;<span class="number">0u32</span> <span class="keyword">as</span> *<span class="keyword">const</span> _ <span class="keyword">as</span> _,</span><br><span class="line">#                         gl::DYNAMIC_COPY);</span><br><span class="line"># </span><br><span class="line">#         gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line"># </span><br><span class="line">#         <span class="comment">// 等待所有 shader 执行完毕</span></span><br><span class="line">#         gl::<span class="title function_ invoke__">MemoryBarrier</span>(gl::UNIFORM_BARRIER_BIT);</span><br><span class="line"># </span><br><span class="line">#         gl::<span class="title function_ invoke__">ColorMask</span>(gl::TRUE, gl::TRUE, gl::TRUE, gl::TRUE);</span><br><span class="line">#         gl::<span class="title function_ invoke__">DepthMask</span>(gl::TRUE);</span><br><span class="line"># </span><br><span class="line">#         <span class="comment">// 使用 prog_render 渲染</span></span><br><span class="line">#         gl::<span class="title function_ invoke__">UseProgram</span>(*prog_render);</span><br><span class="line"># </span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">cstr</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;trans&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">location</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(*prog_render, cstr.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#         gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(location, <span class="number">1</span>, gl::FALSE, addr_of!(trans_mat) <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">cstr</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;max_area&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">location</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(*prog_render, cstr.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#         gl::<span class="title function_ invoke__">Uniform1f</span>(location, *max_area);</span><br><span class="line"># </span><br><span class="line">#         gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">on_resize</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, w: <span class="type">i32</span>, h: <span class="type">i32</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">aspect</span> = w <span class="keyword">as</span> <span class="type">f32</span> / h <span class="keyword">as</span> <span class="type">f32</span>;</span><br><span class="line">#     <span class="keyword">self</span>.proj_mat = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">45.0</span>, aspect, <span class="number">0.1</span>, <span class="number">1000.0</span>);</span><br><span class="line">#     <span class="keyword">self</span>.max_area = (w * h) <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">0.03</span>;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.prog_counter);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.prog_render);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.atombuf);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>在 render 函数里，先使用原子计数器进行计数，再读取一致区块内的原子计数器的值，来渲染物体：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::&#123;application::*, vmath::*&#125;;</span><br><span class="line"># <span class="keyword">use</span> std::&#123;</span><br><span class="line">#   ffi::CString,</span><br><span class="line">#   mem::&#123;size_of, size_of_val&#125;,</span><br><span class="line">#   ptr::&#123;addr_of, null&#125;,</span><br><span class="line"># &#125;;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   prog_counter: <span class="type">u32</span>,</span><br><span class="line">#   prog_render: <span class="type">u32</span>,</span><br><span class="line">#   vao: <span class="type">u32</span>,</span><br><span class="line">#   vbo: <span class="type">u32</span>,</span><br><span class="line">#   atombuf: <span class="type">u32</span>,</span><br><span class="line">#   proj_mat: Mat4,</span><br><span class="line">#   max_area: <span class="type">f32</span>,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#       #version 460 core</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       in vec3 position;</span></span><br><span class="line"><span class="string">#       uniform mat4 trans;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#       void main(void) &#123;</span></span><br><span class="line"><span class="string">#         gl_Position = trans * vec4(position, 1.0);</span></span><br><span class="line"><span class="string">#       &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = CString::<span class="title function_ invoke__">new</span>(vs_src).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_counter_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#       #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#       layout (binding = 0, offset = 0) uniform atomic_uint area;</span></span><br><span class="line"><span class="string">#       out vec4 color;</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       void main(void) &#123;</span></span><br><span class="line"><span class="string">#         atomicCounterIncrement(area);</span></span><br><span class="line"><span class="string">#         color = vec4(1.0);</span></span><br><span class="line"><span class="string">#       &#125;&quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_counter_src</span> = CString::<span class="title function_ invoke__">new</span>(fs_counter_src).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_render_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#       #version 460 core</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       layout (binding = 0) uniform area_block &#123;</span></span><br><span class="line"><span class="string">#       uint counter_value;</span></span><br><span class="line"><span class="string">#       &#125;;</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       out vec4 color;</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       uniform float max_area;</span></span><br><span class="line"><span class="string">#       </span></span><br><span class="line"><span class="string">#       void main(void) &#123;</span></span><br><span class="line"><span class="string">#         float brightness = clamp(float(counter_value) / max_area,</span></span><br><span class="line"><span class="string">#                                   0.0, 1.0);</span></span><br><span class="line"><span class="string">#         color = vec4(vec3(brightness), 1.0);</span></span><br><span class="line"><span class="string">#       &#125;&quot;</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_render_src</span> = CString::<span class="title function_ invoke__">new</span>(fs_render_src).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置 shader</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::VERTEX_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_src.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_counter</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs_counter, <span class="number">1</span>, &amp;fs_counter_src.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs_counter);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs_render</span> = gl::<span class="title function_ invoke__">CreateShader</span>(gl::FRAGMENT_SHADER);</span><br><span class="line">#       gl::<span class="title function_ invoke__">ShaderSource</span>(fs_render, <span class="number">1</span>, &amp;fs_render_src.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">CompileShader</span>(fs_render);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">self</span>.prog_counter = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(<span class="keyword">self</span>.prog_counter, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(<span class="keyword">self</span>.prog_counter, fs_counter);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(<span class="keyword">self</span>.prog_counter);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">self</span>.prog_render = gl::<span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(<span class="keyword">self</span>.prog_render, vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">AttachShader</span>(<span class="keyword">self</span>.prog_render, fs_render);</span><br><span class="line">#       gl::<span class="title function_ invoke__">LinkProgram</span>(<span class="keyword">self</span>.prog_render);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs_counter);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteShader</span>(fs_render);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置 vao</span></span><br><span class="line">#     <span class="meta">#[rustfmt::skip]</span></span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>, -<span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span>,</span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>,  <span class="number">0.25</span>,</span><br><span class="line">#       -<span class="number">0.25</span>,  <span class="number">0.25</span>, -<span class="number">0.25</span></span><br><span class="line">#     ];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vbo</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferData</span>(vbo,</span><br><span class="line">#                       <span class="title function_ invoke__">size_of_val</span>(vertex_position) <span class="keyword">as</span> _,</span><br><span class="line">#                       vertex_position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">#                       gl::STATIC_DRAW);</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayVertexBuffer</span>(vao, <span class="number">0</span>, vbo, <span class="number">0</span>, <span class="number">3</span> * size_of::&lt;<span class="type">f32</span>&gt;() <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribFormat</span>(vao, <span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexArrayAttribBinding</span>(vao, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(vao, <span class="number">0</span>);</span><br><span class="line">#       <span class="keyword">self</span>.vao = vao;</span><br><span class="line">#       <span class="keyword">self</span>.vbo = vbo;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 设置存储 原子计数器 的 buffer</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferData</span>(buf, size_of::&lt;<span class="type">u32</span>&gt;() <span class="keyword">as</span> _,</span><br><span class="line">#                       &amp;<span class="number">0u32</span> <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">u32</span> <span class="keyword">as</span> _, gl::DYNAMIC_COPY);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">self</span>.atombuf = buf;</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::UNIFORM_BUFFER, buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::UNIFORM_BUFFER, <span class="number">0</span>, buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ATOMIC_COUNTER_BUFFER, buf);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBufferBase</span>(gl::ATOMIC_COUNTER_BUFFER, <span class="number">0</span>, buf);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 初始化投影矩阵</span></span><br><span class="line">#     <span class="keyword">self</span>.<span class="title function_ invoke__">on_resize</span>(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="comment">// 启用深度测试</span></span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">Enable</span>(gl::DEPTH_TEST);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">Self</span> &#123; vao,</span><br><span class="line">#                proj_mat,</span><br><span class="line">#                prog_render,</span><br><span class="line">#                prog_counter,</span><br><span class="line">#                atombuf,</span><br><span class="line">#                max_area,</span><br><span class="line">#                .. &#125; = <span class="keyword">self</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR, <span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0f32</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, &amp;<span class="number">1.0</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(*vao);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">current_time</span> = current_time <span class="keyword">as</span> <span class="type">f32</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">24</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">f</span> = i <span class="keyword">as</span> <span class="type">f32</span> + current_time * <span class="number">0.3</span>;</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">trans_mat</span> = <span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">6.0</span>)</span><br><span class="line">#                       * <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">45.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>)</span><br><span class="line">#                       * <span class="title function_ invoke__">rotate_with_axis</span>(current_time * <span class="number">21.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">#                       * <span class="title function_ invoke__">translate</span>((<span class="number">2.1</span> * f).<span class="title function_ invoke__">sin</span>() * <span class="number">2.0</span>,</span><br><span class="line">#                                   (<span class="number">1.7</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">2.0</span>,</span><br><span class="line">#                                   (<span class="number">1.3</span> * f).<span class="title function_ invoke__">sin</span>() * (<span class="number">1.5</span> * f).<span class="title function_ invoke__">cos</span>() * <span class="number">2.0</span>);</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">trans_mat</span> = *proj_mat * trans_mat;</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        gl::<span class="title function_ invoke__">ColorMask</span>(gl::FALSE, gl::FALSE, gl::FALSE, gl::FALSE);</span><br><span class="line">        gl::<span class="title function_ invoke__">DepthMask</span>(gl::FALSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 prog_counter 计算面积</span></span><br><span class="line">        gl::<span class="title function_ invoke__">UseProgram</span>(*prog_counter);</span><br><span class="line"># </span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">cptr</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;trans&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">location</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(*prog_counter, cptr.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#         gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(location, <span class="number">1</span>, gl::FALSE, addr_of!(trans_mat) <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">        <span class="comment">// 重置原子计数</span></span><br><span class="line">        gl::<span class="title function_ invoke__">NamedBufferData</span>(*atombuf,</span><br><span class="line">                        size_of::&lt;<span class="type">u32</span>&gt;() <span class="keyword">as</span> _,</span><br><span class="line">                        &amp;<span class="number">0u32</span> <span class="keyword">as</span> *<span class="keyword">const</span> _ <span class="keyword">as</span> _,</span><br><span class="line">                        gl::DYNAMIC_COPY);</span><br><span class="line"># </span><br><span class="line">        gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待所有 shader 执行完毕</span></span><br><span class="line">        gl::<span class="title function_ invoke__">MemoryBarrier</span>(gl::UNIFORM_BARRIER_BIT);</span><br><span class="line"></span><br><span class="line">        gl::<span class="title function_ invoke__">ColorMask</span>(gl::TRUE, gl::TRUE, gl::TRUE, gl::TRUE);</span><br><span class="line">        gl::<span class="title function_ invoke__">DepthMask</span>(gl::TRUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 prog_render 渲染</span></span><br><span class="line">        gl::<span class="title function_ invoke__">UseProgram</span>(*prog_render);</span><br><span class="line"># </span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">cstr</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;trans&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">location</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(*prog_render, cstr.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#         gl::<span class="title function_ invoke__">UniformMatrix4fv</span>(location, <span class="number">1</span>, gl::FALSE, addr_of!(trans_mat) <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">cstr</span> = CString::<span class="title function_ invoke__">new</span>(<span class="string">&quot;max_area&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#         <span class="keyword">let</span> <span class="variable">location</span> = gl::<span class="title function_ invoke__">GetUniformLocation</span>(*prog_render, cstr.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#         gl::<span class="title function_ invoke__">Uniform1f</span>(location, *max_area);</span><br><span class="line"># </span><br><span class="line">        gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">on_resize</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, w: <span class="type">i32</span>, h: <span class="type">i32</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">aspect</span> = w <span class="keyword">as</span> <span class="type">f32</span> / h <span class="keyword">as</span> <span class="type">f32</span>;</span><br><span class="line">#     <span class="keyword">self</span>.proj_mat = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">45.0</span>, aspect, <span class="number">0.1</span>, <span class="number">1000.0</span>);</span><br><span class="line">#     <span class="keyword">self</span>.max_area = (w * h) <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">0.03</span>;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.prog_counter);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.prog_render);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.atombuf);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>WebGL 里并没有原子计数器，这里只是使用 gl_FragCoord.z 值模拟上面代码的结果，毕竟跑起来的效果差不多。物体里摄像机越近，在屏幕空间上占据的像素点就越多，亮度越亮：</p><div class="demo_app" id="_ch5_1_1_atom_counter"></div><h3 id="原子计数器的同步访问"><a class="markdownIt-Anchor" href="#原子计数器的同步访问"></a> 原子计数器的同步访问</h3><ul><li>原子计数器其实是缓冲区对象中的一个位置，当着色器执行时，他们的值可能驻留在GPU的特殊内存中，当着色器执行完毕时，原子计数器的值将被写回内存。</li><li>原子计数器的递增和递减被认为是内存操作的一种形式，可能会受到之前描述的内存风险影响。</li></ul><p><code>glMemoryBarrier</code> 可以将对原子计数器的访问与 OpenGL 管道的其他部分进行同步：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glMemoryBarrier(GL_ATOMIC_COUNTER_BARRIER_BIT);</span><br></pre></td></tr></table></figure><ul><li>这个函数调用确保了OpenGL 应用程序对缓冲区对象内的原子计数器进行修改，那么着色器会使用更新后的值。<ul><li>在将数据写入缓冲区时，应该调用这个函数，同步着色器访问到的值。</li></ul></li></ul><p>glsl 内部类似的函数：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memoryBarrierAtomicCounter</span>();</span><br></pre></td></tr></table></figure><p>这个函数会等待，直到对原子计数器的操作结束后才退出。</p><h2 id="纹理"><a class="markdownIt-Anchor" href="#纹理"></a> 纹理</h2><ul><li>一种结构化的存储形式，着色器可以对其进行读写操作</li><li>常用于存储图像数据</li><li>最常见的纹理布局是二维的，但是纹理也可以在一维或三维布局、数组形式（多个纹理堆叠在一起形成一个逻辑对象）、立方体中创建</li></ul><h3 id="创建-初始化纹理"><a class="markdownIt-Anchor" href="#创建-初始化纹理"></a> 创建、初始化纹理</h3><ol><li>创建纹理，设置纹理类型（<code>glCreateTextures()</code>）</li><li>设置纹理大小，分配空间（<code>glTexStorage2D()</code>）</li></ol><p>用 <code>glCreateTextures()</code> 创建纹理对象，然后使用 <code>glTexStorage2D()</code> 函数为纹理分配存储空间，使用<code>glBindTexture()</code> 将其绑定到GL_TEXTURE_2D目标：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> gl::*;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">texture</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建纹理</span></span><br><span class="line"><span class="title function_ invoke__">CreateTextures</span>(TEXTURE_2D, <span class="number">1</span>, &amp;<span class="keyword">mut</span> texture);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为纹理分配空间</span></span><br><span class="line"><span class="title function_ invoke__">TextureStorage2D</span>(texture,   <span class="comment">// 要分配空间的纹理对象</span></span><br><span class="line">                 <span class="number">1</span>,         <span class="comment">// 分级细化等级</span></span><br><span class="line">                 RGBA32F,   <span class="comment">// 纹理的数据格式</span></span><br><span class="line">                 <span class="number">256</span>, <span class="number">256</span>); <span class="comment">// 纹理宽、高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定纹理目标</span></span><br><span class="line"><span class="title function_ invoke__">BindTexture</span>(TEXTURE_2D, texture);</span><br></pre></td></tr></table></figure><p>使用 glTexSubImage2D() 向纹理对象写入数据：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> std::&#123;ffi::CString, ptr::&#123;null, null_mut&#125;&#125;;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"><span class="keyword">use</span> gl::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::gl;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   texture: <span class="type">u32</span>,</span><br><span class="line">#   prog: <span class="type">u32</span>,</span><br><span class="line">#   vao: <span class="type">u32</span>,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">generate_texture</span>(&amp;<span class="keyword">self</span>, data: &amp;<span class="keyword">mut</span> [<span class="type">f32</span>], width: <span class="type">usize</span>, height: <span class="type">usize</span>) &#123;</span><br><span class="line">#     <span class="built_in">assert_eq!</span>(data.<span class="title function_ invoke__">len</span>(), width * height * <span class="number">4</span>);</span><br><span class="line">#     <span class="keyword">for</span> <span class="variable">y</span> <span class="keyword">in</span> <span class="number">0</span>..height &#123;</span><br><span class="line">#       <span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> <span class="number">0</span>..width &#123;</span><br><span class="line">#         data[(y * width + x) * <span class="number">4</span> + <span class="number">0</span>] = ((x &amp; y) &amp; <span class="number">0xFF</span>) <span class="keyword">as</span> <span class="type">f32</span> / <span class="number">255.0</span>;</span><br><span class="line">#         data[(y * width + x) * <span class="number">4</span> + <span class="number">1</span>] = ((x | y) &amp; <span class="number">0xFF</span>) <span class="keyword">as</span> <span class="type">f32</span> / <span class="number">255.0</span>;</span><br><span class="line">#         data[(y * width + x) * <span class="number">4</span> + <span class="number">2</span>] = ((x ^ y) &amp; <span class="number">0xFF</span>) <span class="keyword">as</span> <span class="type">f32</span> / <span class="number">255.0</span>;</span><br><span class="line">#         data[(y * width + x) * <span class="number">4</span> + <span class="number">3</span>] = <span class="number">1.0</span>;</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">log_info</span>(&amp;<span class="keyword">self</span>, obj: <span class="type">u32</span>, log_type: <span class="type">u32</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = [<span class="number">0u8</span>; <span class="number">2048</span>];</span><br><span class="line"># </span><br><span class="line">#     gl! &#123;</span><br><span class="line">#       <span class="keyword">match</span> log_type &#123;</span><br><span class="line">#         COMPILE_STATUS =&gt; <span class="title function_ invoke__">GetShaderInfoLog</span>(obj, <span class="number">2048</span>, <span class="title function_ invoke__">null_mut</span>(), buf.<span class="title function_ invoke__">as_mut_ptr</span>() <span class="keyword">as</span> _),</span><br><span class="line">#         LINK_STATUS =&gt; <span class="title function_ invoke__">GetProgramInfoLog</span>(obj, <span class="number">2048</span>, <span class="title function_ invoke__">null_mut</span>(), buf.<span class="title function_ invoke__">as_mut_ptr</span>() <span class="keyword">as</span> _),</span><br><span class="line">#         _ =&gt; (),</span><br><span class="line">#       &#125;;  </span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">str</span> = std::<span class="type">str</span>::<span class="title function_ invoke__">from_utf8</span>(&amp;buf).<span class="title function_ invoke__">unwrap_or</span>(<span class="string">&quot;invaild utf-8 str&quot;</span>);</span><br><span class="line">#     <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="type">str</span>);</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     gl! &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">texture</span> = <span class="number">0</span>;</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 创建纹理</span></span><br><span class="line">#       <span class="title function_ invoke__">CreateTextures</span>(TEXTURE_2D, <span class="number">1</span>, &amp;<span class="keyword">mut</span> texture);</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 分配空间</span></span><br><span class="line">#       <span class="title function_ invoke__">TextureStorage2D</span>(texture,   <span class="comment">// 要分配空间的纹理对象</span></span><br><span class="line">#                        <span class="number">1</span>,         <span class="comment">// 分级细化等级</span></span><br><span class="line">#                        RGBA32F,   <span class="comment">// 数据格式</span></span><br><span class="line">#                        <span class="number">256</span>, <span class="number">256</span>); <span class="comment">// 纹理宽、高</span></span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// 绑定纹理目标</span></span><br><span class="line">#       <span class="title function_ invoke__">BindTexture</span>(TEXTURE_2D, texture);</span><br><span class="line"># </span><br><span class="line">      <span class="comment">// 在堆上分配空间，这段内存会在离开作用域时自动释放</span></span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">data</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>([<span class="number">0f32</span>; <span class="number">256</span> * <span class="number">256</span> * <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// generate_texture 函数用来向 data 填充数据</span></span><br><span class="line">      <span class="keyword">self</span>.<span class="title function_ invoke__">generate_texture</span>(&amp;<span class="keyword">mut</span> data[..], <span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将生成的数据写入到纹理对象</span></span><br><span class="line">      <span class="title function_ invoke__">TextureSubImage2D</span>(texture,</span><br><span class="line">                        <span class="number">0</span>,        <span class="comment">// 细节等级，等级0代表基本图形级别</span></span><br><span class="line">                        <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// 偏移量 0, 0</span></span><br><span class="line">                        <span class="number">256</span>, <span class="number">256</span>, <span class="comment">// 宽 x 高</span></span><br><span class="line">                        RGBA,     <span class="comment">// 四通道数据</span></span><br><span class="line">                        FLOAT,    <span class="comment">// 数据类型为浮点数</span></span><br><span class="line">                        data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">self</span>.texture = texture;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#       #version 460 core</span></span><br><span class="line"><span class="string">#       void main(void) &#123;</span></span><br><span class="line"><span class="string">#         const vec4 vertices[] = vec4[](vec4( 0.75, -0.75, 0.5, 1.0),</span></span><br><span class="line"><span class="string">#                                        vec4(-0.75, -0.75, 0.5, 1.0),</span></span><br><span class="line"><span class="string">#                                        vec4( 0.75,  0.75, 0.5, 1.0));</span></span><br><span class="line"><span class="string">#         gl_Position = vertices[gl_VertexID];</span></span><br><span class="line"><span class="string">#       &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = CString::<span class="title function_ invoke__">new</span>(vs_src).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#       #version 460 core</span></span><br><span class="line"><span class="string">#       uniform sampler2D s;</span></span><br><span class="line"><span class="string">#       out vec4 color;</span></span><br><span class="line"><span class="string">#       void main(void) &#123;</span></span><br><span class="line"><span class="string">#         color = texture(s, gl_FragCoord.xy / textureSize(s, 0));</span></span><br><span class="line"><span class="string">#       &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_src</span> = CString::<span class="title function_ invoke__">new</span>(fs_src).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#     </span><br><span class="line">#     gl! &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">vs</span> = <span class="title function_ invoke__">CreateShader</span>(VERTEX_SHADER);</span><br><span class="line">#       <span class="title function_ invoke__">ShaderSource</span>(vs, <span class="number">1</span>, &amp;vs_src.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       <span class="title function_ invoke__">CompileShader</span>(vs);</span><br><span class="line">#       <span class="keyword">self</span>.<span class="title function_ invoke__">log_info</span>(vs, COMPILE_STATUS);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">fs</span> = <span class="title function_ invoke__">CreateShader</span>(FRAGMENT_SHADER);</span><br><span class="line">#       <span class="title function_ invoke__">ShaderSource</span>(fs, <span class="number">1</span>, &amp;fs_src.<span class="title function_ invoke__">as_ptr</span>(), <span class="title function_ invoke__">null</span>());</span><br><span class="line">#       <span class="title function_ invoke__">CompileShader</span>(fs);</span><br><span class="line">#       <span class="keyword">self</span>.<span class="title function_ invoke__">log_info</span>(fs, COMPILE_STATUS);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">prog</span> = <span class="title function_ invoke__">CreateProgram</span>();</span><br><span class="line">#       <span class="title function_ invoke__">AttachShader</span>(prog, vs);</span><br><span class="line">#       <span class="title function_ invoke__">AttachShader</span>(prog, fs);</span><br><span class="line">#       <span class="title function_ invoke__">LinkProgram</span>(prog);</span><br><span class="line">#       <span class="keyword">self</span>.<span class="title function_ invoke__">log_info</span>(prog, LINK_STATUS);</span><br><span class="line"># </span><br><span class="line">#       <span class="title function_ invoke__">DeleteShader</span>(vs);</span><br><span class="line">#       <span class="title function_ invoke__">DeleteShader</span>(fs);</span><br><span class="line"># </span><br><span class="line">#       <span class="title function_ invoke__">UseProgram</span>(prog);</span><br><span class="line">#       <span class="keyword">self</span>.prog = prog;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     gl! &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vao</span> = <span class="number">0</span>;</span><br><span class="line">#       <span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> vao);</span><br><span class="line">#       <span class="title function_ invoke__">BindVertexArray</span>(vao);</span><br><span class="line">#       <span class="keyword">self</span>.vao = vao;</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, _current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     gl! &#123;</span><br><span class="line">#       <span class="title function_ invoke__">ClearBufferfv</span>(COLOR, <span class="number">0</span>, [<span class="number">0.0f32</span>, <span class="number">0.25</span>, <span class="number">0.0</span>, <span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       <span class="title function_ invoke__">DrawArrays</span>(TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     gl! &#123;</span><br><span class="line">#       <span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.prog);</span><br><span class="line">#       <span class="title function_ invoke__">DeleteTextures</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.texture);  </span><br><span class="line">#       <span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><h3 id="纹理目标和类型"><a class="markdownIt-Anchor" href="#纹理目标和类型"></a> 纹理目标和类型</h3><table><thead><tr><th style="text-align:left">纹理目标（GL_TEXTURE_*）</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">1D</td><td style="text-align:left">一维纹理</td></tr><tr><td style="text-align:left">2D</td><td style="text-align:left">二维纹理</td></tr><tr><td style="text-align:left">3D</td><td style="text-align:left">三维纹理</td></tr><tr><td style="text-align:left">RECTANGLE</td><td style="text-align:left">矩形纹理</td></tr><tr><td style="text-align:left">1D_ARRAY</td><td style="text-align:left">一维数组纹理</td></tr><tr><td style="text-align:left">2D_ARRAY</td><td style="text-align:left">二维数组纹理</td></tr><tr><td style="text-align:left">CUBE_MAP</td><td style="text-align:left">立方体贴图纹理</td></tr><tr><td style="text-align:left">CUBE_MAP_ARRAY</td><td style="text-align:left">立方体贴图数组纹理</td></tr><tr><td style="text-align:left">BUFFER</td><td style="text-align:left">缓冲区纹理</td></tr><tr><td style="text-align:left">2D_MULTISAMPLE</td><td style="text-align:left">二维多重采样纹理</td></tr><tr><td style="text-align:left">2D_MULTISAMPLE_ARRAY</td><td style="text-align:left">二维数组多重采样纹理</td></tr></tbody></table><ul><li>GL_TEXTURE_2D：最常使用的纹理，标准二维图像，代表一张图片</li><li>GL_TEXTURE_1D、GL_TEXTURE_3D：一维和三维纹理<ul><li>GL_TEXTURE_1D 可以看成高度为 1 的二维纹理</li><li>GL_TEXTURE_3D 可以用来表示<strong>体积</strong>，内部使用三维纹理坐标</li></ul></li><li>GL_TEXTURE_RECTANGLE：是二维纹理的特例，它们在着色器中的读取方式和它们支持的参数方面有细微的差异。</li><li>GL_TEXTURE_1D_ARRAY、GL_TEXTURE_2D_ARRAY：表示聚集到单个对象中的纹理图像数组</li><li>GL_TEXTURE_CUBE_MAP：立方体贴图纹理，形成一个立方体的六个正方形图像的集合，可以用来模拟光照环境</li><li>GL_TEXTURE_CUBE_MAP_ARRAY：和 GL_TEXTURE_1D_ARRAY、GL_TEXTURE_2D_ARRAY 类似，表示一个立方体贴图数组的纹理</li><li>GL_TEXTURE_BUFFER：缓冲区纹理、一种特殊类型的纹理，类似于一维纹理，只不过其存储是由缓冲区对象表示的。最大尺寸可以比一维纹理大得多。</li><li>GL_TEXTURE_2D_MULTISAMPLE、GL_TEXTURE_2D_MULTISAMPLE_ARRAY：用于多重采样抗锯齿（MSAA），提高图像质量</li></ul><h3 id="在着色器里读取纹理数据"><a class="markdownIt-Anchor" href="#在着色器里读取纹理数据"></a> 在着色器里读取纹理数据</h3><ul><li>在创建并向纹理写入数据后，可以在着色器读取纹理数据来为片段着色</li><li>着色器中代表纹理的数据类型为采样器，不同的纹理类型对应不同的采样器类型<ul><li>二维纹理的采样器类型：Sampler2D</li></ul></li></ul><p>在声明采样器变量后，通过 texture() 函数读取纹理坐标下的数据：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> s;</span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> color;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>) &#123;</span><br><span class="line">  color = <span class="built_in">texture</span>(s, <span class="built_in">gl_FragCoord</span>.xy / <span class="built_in">textureSize</span>(s, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="demo_app" id="_ch5_4_simpletexture"></div><h4 id="采样器类型"><a class="markdownIt-Anchor" href="#采样器类型"></a> 采样器类型</h4><p>每种纹理对应的采样器：</p><table><thead><tr><th style="text-align:left">纹理目标</th><th style="text-align:left">采样器类型</th></tr></thead><tbody><tr><td style="text-align:left">GL_TEXTURE_1D</td><td style="text-align:left">sampler1D</td></tr><tr><td style="text-align:left">GL_TEXTURE_2D</td><td style="text-align:left">sampler2D</td></tr><tr><td style="text-align:left">GL_TEXTURE_3D</td><td style="text-align:left">sampler3D</td></tr><tr><td style="text-align:left">GL_TEXTURE_RECTANGLE</td><td style="text-align:left">sampler2DRect</td></tr><tr><td style="text-align:left">GL_TEXTURE_1D_ARRAY</td><td style="text-align:left">sampler1DArray</td></tr><tr><td style="text-align:left">GL_TEXTURE_2D_ARRAY</td><td style="text-align:left">sampler2DArray</td></tr><tr><td style="text-align:left">GL_TEXTURE_CUBE_MAP</td><td style="text-align:left">samplerCube</td></tr><tr><td style="text-align:left">GL_TEXTURE_CUBE_MAP_ARRAY</td><td style="text-align:left">samplerCubeArray</td></tr><tr><td style="text-align:left">GL_TEXTURE_BUFFER</td><td style="text-align:left">samplerBuffer</td></tr><tr><td style="text-align:left">GL_TEXTURE_2D_MULTISAMPLE</td><td style="text-align:left">sampler2DMS</td></tr><tr><td style="text-align:left">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</td><td style="text-align:left">sampler2DMSArray</td></tr></tbody></table><p>纹理存储的数据类型与采样器的关系：</p><ul><li>存储浮点数据的纹理：sampler1D,…</li><li>存储有符号整数的纹理：添加前缀i，isampler1D, …</li><li>存储无符号整数的纹理：添加前缀u，usampler1D, …</li></ul><p>内置函数 texelFetch() 读取着色器中的纹理：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">vec4</span> <span class="built_in">texelFetch</span>(<span class="type">sampler1D</span> s, <span class="type">int</span> P, <span class="type">int</span> lod);</span><br><span class="line"><span class="type">vec4</span> <span class="built_in">texelFetch</span>(<span class="type">sampler2D</span> s, <span class="type">ivec2</span> P, <span class="type">int</span> lod);</span><br><span class="line"><span class="type">ivec4</span> <span class="built_in">texelFetch</span>(<span class="type">isampler2D</span> s, <span class="type">ivec2</span> P, <span class="type">int</span> lod);</span><br><span class="line"><span class="type">uvec4</span> <span class="built_in">texelFetch</span>(<span class="type">usampler3D</span> s, <span class="type">ivec3</span> P, <span class="type">int</span> lod);</span><br></pre></td></tr></table></figure><ul><li>s：纹理的采样器变量</li><li>P：纹理坐标</li><li>lod：分级细化等级</li></ul><p>虽然纹理对象的数据格式不同，这些函数都返回四维向量。如果纹理通道小于 4 (RGBA)，则绿色通道和蓝色通道的默认值为0，而alpha通道的默认值为1</p><p>内置函数 textureSize() 用来查询纹理尺寸：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="built_in">textureSize</span>(<span class="type">sampler1D</span> sampler, <span class="type">int</span> lod);</span><br><span class="line"><span class="type">ivec2</span> <span class="built_in">textureSize</span>(<span class="type">sampler2D</span> sampler, <span class="type">int</span> lod);</span><br><span class="line"><span class="type">ivec3</span> <span class="built_in">textureSize</span>(gsampler3D sampler, <span class="type">int</span> lod);</span><br></pre></td></tr></table></figure><p>查询多重采样纹理的采样数：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> textureSamples(<span class="type">sampler2DMS</span> sampler);</span><br></pre></td></tr></table></figure><h3 id="从文件载入纹理"><a class="markdownIt-Anchor" href="#从文件载入纹理"></a> 从文件载入纹理</h3><ul><li>ktx（Khronos纹理格式）：专门为存储 OpenGL 纹理的东西而设计的。</li><li>.ktx文件包含了大多数需要传递给 OpenGL 的参数，以便直接从文件加载纹理。</li></ul><p>用《OpenGL 超级宝典》里自带的函数载入：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tex</span> = sb7::ktx::file::<span class="title function_ invoke__">load</span>(<span class="string">&quot;media/textures/tree.ktx&quot;</span>).<span class="title function_ invoke__">unwrap</span>().<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>也可以使用第三方库（如 stb_image）自己载入图片，只需要在 Cargo.toml 里添加依赖：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">stb_image</span> = <span class="string">&quot;^0.2.3&quot;</span></span><br></pre></td></tr></table></figure><p>比如要载入这样一张图片：</p><p><img src="./Opengl-logo.png" alt="opegl-logo" /></p><p>读取图片像素过程：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: <span class="type">u32</span>,</span><br><span class="line">#   vbo: <span class="type">u32</span>,</span><br><span class="line">#   prog: <span class="type">u32</span>,</span><br><span class="line">#   uniform_trans: <span class="type">i32</span>,</span><br><span class="line">#   tex: <span class="type">u32</span></span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout (location = 0) in vec3 position;</span></span><br><span class="line"><span class="string">#     layout (location = 1) in vec2 tc;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     out vec2 tex_tc;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     uniform mat4 trans = mat4(1.0);</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position = trans * vec4(position, 1.0);</span></span><br><span class="line"><span class="string">#       tex_tc = vec2(1.0 - tc.x, tc.y);</span></span><br><span class="line"><span class="string">#     &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string">#     </span></span><br><span class="line"><span class="string">#     in vec2 tex_tc;</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     uniform sampler2D s;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       vec4 tex_color = texture(s, tex_tc);</span></span><br><span class="line"><span class="string">#       color = mix(vec4(1.0), tex_color, tex_color.a);</span></span><br><span class="line"><span class="string">#       // color = vec4(1.0);</span></span><br><span class="line"><span class="string">#     &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">self</span>.prog = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs_src, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs_src, gl::FRAGMENT_SHADER, <span class="literal">true</span>),</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">query_name</span> = |name: &amp;<span class="type">str</span>| <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">name</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(name).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetUniformLocation</span>(<span class="keyword">self</span>.prog, name.<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">#     &#125;;</span><br><span class="line">#     <span class="keyword">self</span>.uniform_trans = <span class="title function_ invoke__">query_name</span>(<span class="string">&quot;trans&quot;</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">#       <span class="comment">// position        // tc</span></span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line">#     ];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">use</span> std::mem::&#123; size_of, size_of_val &#125;;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(<span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, <span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferData</span>(<span class="keyword">self</span>.vbo,</span><br><span class="line">#                           <span class="title function_ invoke__">size_of_val</span>(vertex_position) <span class="keyword">as</span> _,</span><br><span class="line">#                           vertex_position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">#                           gl::STATIC_DRAW);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">#                               (<span class="number">5</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _,</span><br><span class="line">#                               <span class="number">0</span> <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">1</span>, <span class="number">2</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">#                               (<span class="number">5</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _,</span><br><span class="line">#                               (<span class="number">3</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(<span class="keyword">self</span>.vao, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(<span class="keyword">self</span>.vao, <span class="number">1</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">let</span> (width, height, img_data, img_depth) = &#123;</span><br><span class="line">      <span class="keyword">use</span> stb_image::image::*;</span><br><span class="line">      <span class="keyword">match</span> <span class="title function_ invoke__">load</span>(<span class="string">&quot;Opengl-logo.png&quot;</span>) &#123;</span><br><span class="line">        LoadResult::<span class="title function_ invoke__">ImageU8</span>(img) =&gt; (</span><br><span class="line">          img.width, img.height, img.data, img.depth</span><br><span class="line">        ),</span><br><span class="line">        _ =&gt; <span class="built_in">unimplemented!</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">#     <span class="built_in">assert_eq!</span>(img_depth, <span class="number">4</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateTextures</span>(gl::TEXTURE_2D, <span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.tex);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindTexture</span>(gl::TEXTURE_2D, <span class="keyword">self</span>.tex);</span><br><span class="line">#       gl::<span class="title function_ invoke__">TexStorage2D</span>(gl::TEXTURE_2D, <span class="number">1</span>,</span><br><span class="line">#                        gl::RGBA8, width <span class="keyword">as</span> _, height <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">TexSubImage2D</span>(gl::TEXTURE_2D, <span class="number">0</span>,</span><br><span class="line">#                         <span class="number">0</span>, <span class="number">0</span>, width <span class="keyword">as</span> _, height <span class="keyword">as</span> _,</span><br><span class="line">#                         gl::RGBA, gl::UNSIGNED_BYTE, img_data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">TexParameteri</span>(gl::TEXTURE_2D, gl::TEXTURE_WRAP_S,</span><br><span class="line">#                         gl::CLAMP_TO_EDGE <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">TexParameteri</span>(gl::TEXTURE_2D, gl::TEXTURE_WRAP_T,</span><br><span class="line">#                         gl::CLAMP_TO_EDGE <span class="keyword">as</span> _);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">Enable</span>(gl::DEPTH_TEST);</span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(<span class="keyword">self</span>.prog);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">t</span> = current_time <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">40.0</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">AppConfig</span> &#123; width, height, .. &#125; = <span class="keyword">self</span>.<span class="title function_ invoke__">info</span>();</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">trans</span> = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">45.0</span>,</span><br><span class="line">#                                         width <span class="keyword">as</span> <span class="type">f32</span> / height <span class="keyword">as</span> <span class="type">f32</span>,</span><br><span class="line">#                                         <span class="number">0.1</span>, <span class="number">1000.0</span>)</span><br><span class="line">#       * sb7::vmath::<span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">3.5</span>)</span><br><span class="line">#       * sb7::vmath::<span class="title function_ invoke__">rotate</span>(t, t, t);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR, <span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, [<span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">ProgramUniformMatrix4fv</span>(<span class="keyword">self</span>.prog,</span><br><span class="line">#                                   <span class="keyword">self</span>.uniform_trans, <span class="number">1</span>,</span><br><span class="line">#                                   gl::FALSE,</span><br><span class="line">#                                   std::ptr::addr_of!(trans) <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.prog);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteTextures</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.tex);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>通过载入的图片数据创建纹理对象：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   vao: <span class="type">u32</span>,</span><br><span class="line">#   vbo: <span class="type">u32</span>,</span><br><span class="line">#   prog: <span class="type">u32</span>,</span><br><span class="line">#   uniform_trans: <span class="type">i32</span>,</span><br><span class="line">#   tex: <span class="type">u32</span></span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout (location = 0) in vec3 position;</span></span><br><span class="line"><span class="string">#     layout (location = 1) in vec2 tc;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     out vec2 tex_tc;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     uniform mat4 trans = mat4(1.0);</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position = trans * vec4(position, 1.0);</span></span><br><span class="line"><span class="string">#       tex_tc = vec2(1.0 - tc.x, tc.y);</span></span><br><span class="line"><span class="string">#     &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string">#     </span></span><br><span class="line"><span class="string">#     in vec2 tex_tc;</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     uniform sampler2D s;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       vec4 tex_color = texture(s, tex_tc);</span></span><br><span class="line"><span class="string">#       color = mix(vec4(1.0), tex_color, tex_color.a);</span></span><br><span class="line"><span class="string">#       // color = vec4(1.0);</span></span><br><span class="line"><span class="string">#     &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">self</span>.prog = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs_src, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs_src, gl::FRAGMENT_SHADER, <span class="literal">true</span>),</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">query_name</span> = |name: &amp;<span class="type">str</span>| <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">name</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(name).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetUniformLocation</span>(<span class="keyword">self</span>.prog, name.<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">#     &#125;;</span><br><span class="line">#     <span class="keyword">self</span>.uniform_trans = <span class="title function_ invoke__">query_name</span>(<span class="string">&quot;trans&quot;</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">#       <span class="comment">// position        // tc</span></span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line">#     ];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">use</span> std::mem::&#123; size_of, size_of_val &#125;;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(<span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, <span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferData</span>(<span class="keyword">self</span>.vbo,</span><br><span class="line">#                           <span class="title function_ invoke__">size_of_val</span>(vertex_position) <span class="keyword">as</span> _,</span><br><span class="line">#                           vertex_position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">#                           gl::STATIC_DRAW);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">#                               (<span class="number">5</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _,</span><br><span class="line">#                               <span class="number">0</span> <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">1</span>, <span class="number">2</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">#                               (<span class="number">5</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _,</span><br><span class="line">#                               (<span class="number">3</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(<span class="keyword">self</span>.vao, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(<span class="keyword">self</span>.vao, <span class="number">1</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> (width, height, img_data, img_depth) = &#123;</span><br><span class="line">#       <span class="keyword">use</span> stb_image::image::*;</span><br><span class="line">#       <span class="keyword">match</span> <span class="title function_ invoke__">load</span>(<span class="string">&quot;Opengl-logo.png&quot;</span>) &#123;</span><br><span class="line">#         LoadResult::<span class="title function_ invoke__">ImageU8</span>(img) =&gt; (</span><br><span class="line">#           img.width, img.height, img.data, img.depth</span><br><span class="line">#         ),</span><br><span class="line">#         _ =&gt; <span class="built_in">unimplemented!</span>()</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;;</span><br><span class="line">#     <span class="built_in">assert_eq!</span>(img_depth, <span class="number">4</span>);</span><br><span class="line"># </span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateTextures</span>(gl::TEXTURE_2D, <span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.tex);</span><br><span class="line">      gl::<span class="title function_ invoke__">BindTexture</span>(gl::TEXTURE_2D, <span class="keyword">self</span>.tex);</span><br><span class="line">      gl::<span class="title function_ invoke__">TexStorage2D</span>(gl::TEXTURE_2D, <span class="number">1</span>,</span><br><span class="line">                       gl::RGBA8, width <span class="keyword">as</span> _, height <span class="keyword">as</span> _);</span><br><span class="line">      gl::<span class="title function_ invoke__">TexSubImage2D</span>(gl::TEXTURE_2D, <span class="number">0</span>,</span><br><span class="line">                        <span class="number">0</span>, <span class="number">0</span>, width <span class="keyword">as</span> _, height <span class="keyword">as</span> _,</span><br><span class="line">                        gl::RGBA, gl::UNSIGNED_BYTE, img_data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">TexParameteri</span>(gl::TEXTURE_2D, gl::TEXTURE_WRAP_S,</span><br><span class="line">#                         gl::CLAMP_TO_EDGE <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">TexParameteri</span>(gl::TEXTURE_2D, gl::TEXTURE_WRAP_T,</span><br><span class="line">#                         gl::CLAMP_TO_EDGE <span class="keyword">as</span> _);</span><br><span class="line">    &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">Enable</span>(gl::DEPTH_TEST);</span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(<span class="keyword">self</span>.prog);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">t</span> = current_time <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">40.0</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">AppConfig</span> &#123; width, height, .. &#125; = <span class="keyword">self</span>.<span class="title function_ invoke__">info</span>();</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">trans</span> = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">45.0</span>,</span><br><span class="line">#                                         width <span class="keyword">as</span> <span class="type">f32</span> / height <span class="keyword">as</span> <span class="type">f32</span>,</span><br><span class="line">#                                         <span class="number">0.1</span>, <span class="number">1000.0</span>)</span><br><span class="line">#       * sb7::vmath::<span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">3.5</span>)</span><br><span class="line">#       * sb7::vmath::<span class="title function_ invoke__">rotate</span>(t, t, t);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR, <span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, [<span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">ProgramUniformMatrix4fv</span>(<span class="keyword">self</span>.prog,</span><br><span class="line">#                                   <span class="keyword">self</span>.uniform_trans, <span class="number">1</span>,</span><br><span class="line">#                                   gl::FALSE,</span><br><span class="line">#                                   std::ptr::addr_of!(trans) <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.prog);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteTextures</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.tex);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>效果大概是这样子：</p><div id="_ch5_4_0_load_png" class="demo_app"></div><h4 id="纹理坐标"><a class="markdownIt-Anchor" href="#纹理坐标"></a> 纹理坐标</h4><p>在着色器里一般会用 texture() 来读取纹理数据，一张纹理对应的坐标范围为 0.0 ~ 1.0：</p><p><img src="tex_coords.png" alt="tex_coord" /></p><ul><li>但其实可以将纹理坐标设置为任意值，超出 0.0 ~ 1.0 的部分，OpenGL 会将纹理按照一定的方式进行平铺处理</li><li>纹理坐标一般会作为顶点属性传入顶点着色器，然后输出到片段着色器，中间的像素的纹理坐标由 GPU 生成</li></ul><p>顶点数据：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">  <span class="comment">// position        // tc</span></span><br><span class="line">  -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">   <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">   <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">   ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>对应的顶点着色器：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 450 core</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> mv_matrix;</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> proj_matrix;</span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">in</span> <span class="type">vec4</span> position;</span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">4</span>) <span class="keyword">in</span> <span class="type">vec2</span> tc;</span><br><span class="line"><span class="keyword">out</span> VS_OUT</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">vec2</span> tc;</span><br><span class="line">&#125; vs_out;</span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Calculate the position of each vertex</span></span><br><span class="line">  <span class="type">vec4</span> pos_vs = mv_matrix * position;</span><br><span class="line">  <span class="comment">// Pass the texture coordinate through unmodified</span></span><br><span class="line">  vs_out.tc = tc;</span><br><span class="line">  <span class="built_in">gl_Position</span> = proj_matrix * pos_vs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>片段着色器：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 450 core</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">sampler2D</span> tex_object;</span><br><span class="line"><span class="comment">// Input from vertex shader</span></span><br><span class="line"><span class="keyword">in</span> VS_OUT</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">vec2</span> tc;</span><br><span class="line">&#125; fs_in;</span><br><span class="line"><span class="comment">// Output to framebuffer</span></span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> color;</span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Simply read from the texture at the (scaled) coordinates and</span></span><br><span class="line">  <span class="comment">// assign the result to the shader&#x27;s output.</span></span><br><span class="line">  color = <span class="built_in">texture</span>(tex_object, fs_in.tc * <span class="type">vec2</span>(<span class="number">3.0</span>, <span class="number">1.0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过向每个顶点传递纹理坐标，可以将纹理环绕在物体周围。</p><p>纹理坐标一般使用建模软件进行分配，并存储模型文件里。将棋盘格图案加载到纹理中，并将其应用到模型上，效果如下:</p><div class="demo_app" id="_ch5_5_simpletexcoords"></div><h3 id="控制纹理数据的读取方式"><a class="markdownIt-Anchor" href="#控制纹理数据的读取方式"></a> 控制纹理数据的读取方式</h3><p>OpenGL 在读取纹理数据的方式十分灵活，纹理坐标的范围一般是规范化的，在0.0 到 1.0之间，在 OpenGL 里，用来控制纹理读取方式的对象为采样器对象，其中包含了两种常用的属性：</p><ul><li>WRAP_MODE：环绕方式，当纹理坐标超出 0.0 ~ 1.0 时，控制 OpenGL 如何读取纹理像素</li><li>FILTER_MODE：过滤方式，当纹理在渲染时被缩放时，控制 OpenGL 对像素的采样方式</li></ul><p>创建采样器对象：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glCreateSamplers</span><span class="params">(GLsizei n, GLuint * samplers)</span>;</span><br></pre></td></tr></table></figure><p>设置采样器属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glSamplerParameteri</span><span class="params">(GLuint sampler,</span></span><br><span class="line"><span class="params">                         GLenum pname,</span></span><br><span class="line"><span class="params">                         GLint param)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">glSamplerParameterf</span><span class="params">(GLuint sampler,</span></span><br><span class="line"><span class="params">                         GLenum pname,</span></span><br><span class="line"><span class="params">                         GLfloat param)</span>;</span><br></pre></td></tr></table></figure><p>您将需要绑定一个采样器对象才能使用它，但在这种情况下，您将它绑定到一个纹理单元，就像您将纹理绑定到一个纹理单元一样。用于将采样器对象绑定到纹理单元之一的函数是glBindSampler()，其原型是:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glBindSampler</span><span class="params">(GLuint unit, GLuint sampler)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> gl::*;</span><br><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># <span class="keyword">use</span> imgui_glfw_rs::glfw;</span><br><span class="line"># <span class="keyword">use</span> std::&#123;ffi::CString, ptr::addr_of&#125;;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">Uniforms</span> &#123;</span><br><span class="line">#   mv_matrix:   <span class="type">i32</span>,</span><br><span class="line">#   proj_matrix: <span class="type">i32</span>,</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   tex_object:     [<span class="type">u32</span>; <span class="number">2</span>],</span><br><span class="line">#   tex_index:      <span class="type">usize</span>,</span><br><span class="line">#   render_prog:    <span class="type">u32</span>,</span><br><span class="line">#   uniforms:       Uniforms,</span><br><span class="line">#   object:         sb7::object::Object,</span><br><span class="line">  sampler_object: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">init</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> AppConfig &#123;</span><br><span class="line">#     AppConfig &#123; title: <span class="string">&quot;OpenGL SuperBible - Texture Coordinates&quot;</span>.<span class="title function_ invoke__">into</span>(),</span><br><span class="line">#                 ..<span class="built_in">Default</span>::<span class="title function_ invoke__">default</span>() &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="built_in">macro_rules!</span> tex_data &#123;</span><br><span class="line">#       (@a W) =&gt; ([ <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFFu8</span> ]);</span><br><span class="line">#       (@a B) =&gt; ([ <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00u8</span> ]);</span><br><span class="line">#       ($($x: ident),+ $(,)?) =&gt; ([$(tex_data!(@a $x),)*].<span class="title function_ invoke__">concat</span>());</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">tex_data</span> = tex_data! &#123;</span><br><span class="line">#       B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,</span><br><span class="line">#       W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,</span><br><span class="line">#       B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,</span><br><span class="line">#       W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,</span><br><span class="line">#       B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,</span><br><span class="line">#       W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,</span><br><span class="line">#       B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,</span><br><span class="line">#       W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,</span><br><span class="line">#       B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,</span><br><span class="line">#       W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,</span><br><span class="line">#       B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,</span><br><span class="line">#       W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,</span><br><span class="line">#       B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,</span><br><span class="line">#       W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,</span><br><span class="line">#       B, W, B, W, B, W, B, W, B, W, B, W, B, W, B, W,</span><br><span class="line">#       W, B, W, B, W, B, W, B, W, B, W, B, W, B, W, B,</span><br><span class="line">#     &#125;;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="title function_ invoke__">GenTextures</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.tex_object[<span class="number">0</span>]);</span><br><span class="line">#       <span class="title function_ invoke__">BindTexture</span>(TEXTURE_2D, <span class="keyword">self</span>.tex_object[<span class="number">0</span>]);</span><br><span class="line">#       <span class="title function_ invoke__">TexStorage2D</span>(TEXTURE_2D, <span class="number">1</span>, RGB8, <span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line">#       <span class="title function_ invoke__">TexSubImage2D</span>(TEXTURE_2D, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">16</span>,</span><br><span class="line">#                     RGBA, UNSIGNED_BYTE,</span><br><span class="line">#                     tex_data[..].<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">      <span class="title function_ invoke__">GenSamplers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.sampler_object);</span><br><span class="line">      <span class="title function_ invoke__">SamplerParameteri</span>(<span class="keyword">self</span>.sampler_object,TEXTURE_MIN_FILTER,</span><br><span class="line">                        NEAREST <span class="keyword">as</span> _);</span><br><span class="line">      <span class="title function_ invoke__">SamplerParameteri</span>(<span class="keyword">self</span>.sampler_object, TEXTURE_MAG_FILTER,</span><br><span class="line">                        NEAREST <span class="keyword">as</span> _);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">self</span>.tex_object[<span class="number">1</span>] = </span><br><span class="line">#       sb7::ktx::file::<span class="title function_ invoke__">load</span>(<span class="string">&quot;media/textures/pattern1.ktx&quot;</span>).<span class="title function_ invoke__">unwrap</span>().<span class="number">0</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">self</span>.object.<span class="title function_ invoke__">load</span>(<span class="string">&quot;media/objects/torus_nrms_tc.sbm&quot;</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">self</span>.<span class="title function_ invoke__">load_shaders</span>();</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="title function_ invoke__">Enable</span>(DEPTH_TEST);</span><br><span class="line">#       <span class="title function_ invoke__">DepthFunc</span>(LEQUAL);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">AppConfig</span> &#123; width, height, .. &#125; = AppConfig::<span class="title function_ invoke__">default</span>();</span><br><span class="line">#     <span class="keyword">self</span>.<span class="title function_ invoke__">on_resize</span>(width <span class="keyword">as</span> _, height <span class="keyword">as</span> _);</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">grey</span> = [<span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">1.0f32</span>].<span class="title function_ invoke__">as_ptr</span>();</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">ones</span> = [<span class="number">1.0f32</span>].<span class="title function_ invoke__">as_ptr</span>();</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="title function_ invoke__">ClearBufferfv</span>(COLOR, <span class="number">0</span>, grey);</span><br><span class="line">#       <span class="title function_ invoke__">ClearBufferfv</span>(DEPTH, <span class="number">0</span>, ones);</span><br><span class="line"># </span><br><span class="line">#       <span class="title function_ invoke__">BindTexture</span>(TEXTURE_2D, <span class="keyword">self</span>.tex_object[<span class="keyword">self</span>.tex_index]);</span><br><span class="line">      <span class="title function_ invoke__">BindSampler</span>(<span class="number">0</span>, <span class="keyword">self</span>.sampler_object);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">mv_proj</span> =</span><br><span class="line">#         sb7::vmath::<span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">3.0</span>)</span><br><span class="line">#         * sb7::vmath::<span class="title function_ invoke__">rotate_with_axis</span>(current_time <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">19.3</span>,</span><br><span class="line">#                                        <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>)</span><br><span class="line">#         * sb7::vmath::<span class="title function_ invoke__">rotate_with_axis</span>(current_time <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">21.1</span>,</span><br><span class="line">#                                        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"># </span><br><span class="line">#       <span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="keyword">self</span>.uniforms.mv_matrix, <span class="number">1</span>, FALSE,</span><br><span class="line">#                        addr_of!(mv_proj) <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">#       <span class="keyword">self</span>.object.<span class="title function_ invoke__">render</span>();</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">on_resize</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, w: <span class="type">i32</span>, h: <span class="type">i32</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">proj_matrix</span> = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">60.0</span>,</span><br><span class="line">#                                               w <span class="keyword">as</span> <span class="type">f32</span> / h <span class="keyword">as</span> <span class="type">f32</span>,</span><br><span class="line">#                                               <span class="number">0.1</span>, <span class="number">1000.0</span>);</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="title function_ invoke__">UniformMatrix4fv</span>(<span class="keyword">self</span>.uniforms.proj_matrix,</span><br><span class="line">#                        <span class="number">1</span>, FALSE, addr_of!(proj_matrix) <span class="keyword">as</span> _);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="title function_ invoke__">DeleteTextures</span>(<span class="number">2</span>, <span class="keyword">self</span>.tex_object.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       <span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.render_prog);</span><br><span class="line">#       <span class="title function_ invoke__">DeleteSamplers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.sampler_object);</span><br><span class="line">#       <span class="keyword">self</span>.object.<span class="title function_ invoke__">free</span>();</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">on_key</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, key: glfw::Key, press: glfw::Action) &#123;</span><br><span class="line">#     <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">glfw</span>::Action::Press = press &#123;</span><br><span class="line">#       <span class="keyword">match</span> key &#123;</span><br><span class="line">#         glfw::Key::R =&gt; <span class="keyword">self</span>.<span class="title function_ invoke__">load_shaders</span>(),</span><br><span class="line">#         glfw::Key::T =&gt; &#123;</span><br><span class="line">#           <span class="keyword">self</span>.tex_index += <span class="number">1</span>;</span><br><span class="line">#           <span class="keyword">if</span> <span class="keyword">self</span>.tex_index &gt; <span class="number">1</span> &#123;</span><br><span class="line">#             <span class="keyword">self</span>.tex_index = <span class="number">0</span>;</span><br><span class="line">#           &#125;</span><br><span class="line">#         &#125;</span><br><span class="line">#         _ =&gt; &#123;&#125;</span><br><span class="line">#       &#125;</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">load_shaders</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">if</span> <span class="keyword">self</span>.render_prog != <span class="number">0</span> &#123;</span><br><span class="line">#       <span class="keyword">unsafe</span> &#123; <span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.render_prog) &#125;;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">self</span>.render_prog = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">load</span>(<span class="string">&quot;media/shaders/simpletexcoords/render.vs.glsl&quot;</span>, </span><br><span class="line">#                         VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">load</span>(<span class="string">&quot;media/shaders/simpletexcoords/render.fs.glsl&quot;</span>, </span><br><span class="line">#                         FRAGMENT_SHADER, <span class="literal">true</span>)</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">location</span> = |name: &amp;<span class="type">str</span>| <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">name</span> = CString::<span class="title function_ invoke__">new</span>(name).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       <span class="title function_ invoke__">GetUniformLocation</span>(<span class="keyword">self</span>.render_prog, name.<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">#     &#125;;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">self</span>.uniforms.mv_matrix = <span class="title function_ invoke__">location</span>(<span class="string">&quot;mv_matrix&quot;</span>);</span><br><span class="line">#     <span class="keyword">self</span>.uniforms.proj_matrix = <span class="title function_ invoke__">location</span>(<span class="string">&quot;proj_matrix&quot;</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="title function_ invoke__">UseProgram</span>(<span class="keyword">self</span>.render_prog);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p><code>glBindSampler()</code> 的第一个参数 <code>unit</code> 指的是<strong>纹理单元</strong>，本质上纹理单元只是一个大于等于 0 的整数，可以看成纹理对象和采样器对象之间的桥梁。除了调用 <code>glBindSampler()</code> 以外，还需要用 <code>glBindTextureUnit()</code> 为纹理对象指定纹理单元：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glBindTextureUnit</span><span class="params">(GLuint unit,</span></span><br><span class="line"><span class="params">                       GLuint texture)</span>;</span><br></pre></td></tr></table></figure><p>纹理单元、纹理对象、采样器对象之间的关系如下，每个纹理单元只能和一个纹理对象绑定：</p><p><img src="sampler_texture.png" alt="test" /></p><p>其实类似的配置过程之前已经用过了，配置 vao 的时候，vbo 和顶点属性之间也隔着一个 binding index。这样的好处是提供了足够的灵活性：</p><ul><li>可以将多个纹理绑定到相同的采样器上，这样就不用为每个纹理对象单独配置</li><li>如果需要修改纹理的参数的话，直接更新绑定点就行</li><li>可以将多个采样器绑到同一个纹理单元上</li></ul><p>其实每个纹理对象已经内置了默认的采样器，用 <code>glTextureParameteri() / glTextureParameterf()</code> 也可以直接设置纹理对象的属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glTextureParameterf</span><span class="params">(GLuint texture,</span></span><br><span class="line"><span class="params">                         GLenum pname,</span></span><br><span class="line"><span class="params">                         GLfloat param)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">glTextureParameteri</span><span class="params">(GLuint texture,</span></span><br><span class="line"><span class="params">                         GLenum pname,</span></span><br><span class="line"><span class="params">                         GLint param)</span>;</span><br></pre></td></tr></table></figure><p>如果需要在同一个着色器中使用多个纹理，需要将纹理绑定到不同的纹理单元：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GLuint textures[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create three 2D textures</span></span><br><span class="line">glCreateTextures(<span class="number">3</span>, GL_TEXTURE_2D, &amp;textures);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind the three textures to the first three texture units</span></span><br><span class="line">glBindTextureUnit(<span class="number">0</span>, textures[<span class="number">0</span>]);</span><br><span class="line">glBindTextureUnit(<span class="number">1</span>, textures[<span class="number">1</span>]);</span><br><span class="line">glBindTextureUnit(<span class="number">2</span>, textures[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>然后在着色器里创建对应的 sampler 变量:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">sampler2D</span> foo;</span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">1</span>) <span class="keyword">uniform</span> <span class="type">sampler2D</span> bar;</span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">2</span>) <span class="keyword">uniform</span> <span class="type">sampler2D</span> baz;</span><br></pre></td></tr></table></figure><p>当然也可以创建 sampler 变量的数组，效果其实是一样的：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">sampler2D</span> samplers[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>下面看一个简单的例子，在着色器里定义 sampler2D 数组，在立方体的每个面渲染下面的图片，每张大小为 24x24：</p><div style="margin: auto"><img src="assert_1.png" style="display: inline-block"/><img src="assert_2.png" style="display: inline-block"/><img src="assert_3.png" style="display: inline-block"/><img src="assert_4.png" style="display: inline-block"/><img src="assert_5.png" style="display: inline-block"/><img src="assert_6.png" style="display: inline-block"/></div><p>在片段着色器里定义 sampler2D 数组：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> <span class="type">vec2</span> tex_tc;</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">flat</span> <span class="type">int</span> face_index;</span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">sampler2D</span> s[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">  color = <span class="built_in">texture</span>(s[face_index], tex_tc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tex_tc</code> 代表纹理坐标，<code>face_index</code> 表示第几个面。对应的顶点着色器：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">in</span> <span class="type">vec3</span> position;</span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">1</span>) <span class="keyword">in</span> <span class="type">vec2</span> tc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span> <span class="type">vec2</span> tex_tc;</span><br><span class="line"><span class="keyword">out</span> <span class="keyword">flat</span> <span class="type">int</span> face_index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> trans = <span class="type">mat4</span>(<span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">gl_Position</span> = trans * <span class="type">vec4</span>(position, <span class="number">1.0</span>);</span><br><span class="line">  tex_tc = <span class="type">vec2</span>(tc.x, <span class="number">1.0</span> - tc.y);</span><br><span class="line">  face_index = <span class="built_in">gl_VertexID</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顶点数据（太长了自行展开，或者点击复制按钮）：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">  <span class="comment">// position        // tc</span></span><br><span class="line">  -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">   <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#   -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#   -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#   -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line"># </span><br><span class="line">#   -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#    <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#   -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>读取纹理数据，分配纹理单元：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   prog: <span class="type">u32</span>,</span><br><span class="line">#   uniform_trans: <span class="type">i32</span>,</span><br><span class="line">#   vao: <span class="type">u32</span>,</span><br><span class="line">#   vbo: <span class="type">u32</span>,</span><br><span class="line">#   texs: [<span class="type">u32</span>; <span class="number">6</span>],</span><br><span class="line">#   samplers: [<span class="type">u32</span>; <span class="number">2</span>],</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">#       <span class="comment">// position        // tc</span></span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line">#     ];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout (location = 0) in vec3 position;</span></span><br><span class="line"><span class="string">#     layout (location = 1) in vec2 tc;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     out vec2 tex_tc;</span></span><br><span class="line"><span class="string">#     out flat int face_index;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     uniform mat4 trans = mat4(1.0);</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position = trans * vec4(position, 1.0);</span></span><br><span class="line"><span class="string">#       tex_tc = vec2(tc.x, 1.0 - tc.y);</span></span><br><span class="line"><span class="string">#       face_index = gl_VertexID / 6;</span></span><br><span class="line"><span class="string">#     &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string">#     </span></span><br><span class="line"><span class="string">#     in vec2 tex_tc;</span></span><br><span class="line"><span class="string">#     in flat int face_index;</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout (binding = 0) uniform sampler2D s[6];</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       color = texture(s[face_index], tex_tc);</span></span><br><span class="line"><span class="string">#     &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">self</span>.prog = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs_src, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs_src, gl::FRAGMENT_SHADER, <span class="literal">true</span>),</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">query_name</span> = |name: &amp;<span class="type">str</span>| <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">name</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(name).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetUniformLocation</span>(<span class="keyword">self</span>.prog, name.<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">#     &#125;;</span><br><span class="line">#     <span class="keyword">self</span>.uniform_trans = <span class="title function_ invoke__">query_name</span>(<span class="string">&quot;trans&quot;</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">use</span> std::mem::&#123; size_of, size_of_val &#125;;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(<span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, <span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferData</span>(<span class="keyword">self</span>.vbo,</span><br><span class="line">#                           <span class="title function_ invoke__">size_of_val</span>(vertex_position) <span class="keyword">as</span> _,</span><br><span class="line">#                           vertex_position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">#                           gl::STATIC_DRAW);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">#                               (<span class="number">5</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _,</span><br><span class="line">#                               <span class="number">0</span> <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">1</span>, <span class="number">2</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">#                               (<span class="number">5</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _,</span><br><span class="line">#                               (<span class="number">3</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(<span class="keyword">self</span>.vao, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(<span class="keyword">self</span>.vao, <span class="number">1</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      gl::<span class="title function_ invoke__">CreateTextures</span>(gl::TEXTURE_2D, <span class="number">6</span>, <span class="keyword">self</span>.texs.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// create samplers</span></span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateSamplers</span>(<span class="number">2</span>, <span class="keyword">self</span>.samplers.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// set filter mode</span></span><br><span class="line">#       gl::<span class="title function_ invoke__">SamplerParameteri</span>(<span class="keyword">self</span>.samplers[<span class="number">0</span>],</span><br><span class="line">#                             gl::TEXTURE_MAG_FILTER,</span><br><span class="line">#                             gl::LINEAR <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">SamplerParameteri</span>(<span class="keyword">self</span>.samplers[<span class="number">1</span>],</span><br><span class="line">#                             gl::TEXTURE_MAG_FILTER,</span><br><span class="line">#                             gl::NEAREST <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">      <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">6</span> &#123;</span><br><span class="line">        <span class="keyword">use</span> stb_image::image::&#123; load, LoadResult::*&#125;;</span><br><span class="line">        <span class="keyword">let</span> (w, h, data) = <span class="keyword">match</span> <span class="title function_ invoke__">load</span>(&amp;<span class="built_in">format!</span>(<span class="string">&quot;assert_&#123;&#125;.png&quot;</span>, i + <span class="number">1</span>)) &#123;</span><br><span class="line">          <span class="title function_ invoke__">ImageU8</span>(img) =&gt; (img.width, img.height, img.data),</span><br><span class="line">          _ =&gt; <span class="built_in">unimplemented!</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">        gl::<span class="title function_ invoke__">BindTexture</span>(gl::TEXTURE_2D, <span class="keyword">self</span>.texs[i]);</span><br><span class="line">        gl::<span class="title function_ invoke__">TextureStorage2D</span>(<span class="keyword">self</span>.texs[i], <span class="number">1</span>, gl::RGBA8, w <span class="keyword">as</span> _, h <span class="keyword">as</span> _);</span><br><span class="line">        gl::<span class="title function_ invoke__">TexSubImage2D</span>(gl::TEXTURE_2D, <span class="number">0</span>,</span><br><span class="line">                          <span class="number">0</span>, <span class="number">0</span>, w <span class="keyword">as</span> _, h <span class="keyword">as</span> _,</span><br><span class="line">                          gl::RGBA, gl::UNSIGNED_BYTE, data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bind texture to texture unit</span></span><br><span class="line">        gl::<span class="title function_ invoke__">BindTextureUnit</span>(i <span class="keyword">as</span> _, <span class="keyword">self</span>.texs[i]);</span><br><span class="line"># </span><br><span class="line">#         <span class="comment">// bind texture unit to sampler object</span></span><br><span class="line">#         gl::<span class="title function_ invoke__">BindSampler</span>(i <span class="keyword">as</span> _, <span class="keyword">self</span>.samplers[i % <span class="number">2</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">Enable</span>(gl::DEPTH_TEST);</span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(<span class="keyword">self</span>.prog);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">t</span> = current_time <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">40.0</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">AppConfig</span> &#123; width, height, .. &#125; = <span class="keyword">self</span>.<span class="title function_ invoke__">info</span>();</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">trans</span> = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">45.0</span>,</span><br><span class="line">#                                         width <span class="keyword">as</span> <span class="type">f32</span> / height <span class="keyword">as</span> <span class="type">f32</span>,</span><br><span class="line">#                                         <span class="number">0.1</span>, <span class="number">1000.0</span>)</span><br><span class="line">#       * sb7::vmath::<span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">3.5</span>)</span><br><span class="line">#       * sb7::vmath::<span class="title function_ invoke__">rotate</span>(t, t, t);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR, <span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, [<span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">ProgramUniformMatrix4fv</span>(<span class="keyword">self</span>.prog,</span><br><span class="line">#                                   <span class="keyword">self</span>.uniform_trans, <span class="number">1</span>,</span><br><span class="line">#                                   gl::FALSE,</span><br><span class="line">#                                   std::ptr::addr_of!(trans) <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindTexture</span>(gl::TEXTURE_2D, <span class="keyword">self</span>.texs[<span class="number">0</span>]);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.prog);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.prog);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteTextures</span>(<span class="number">6</span>, <span class="keyword">self</span>.texs.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteSamplers</span>(<span class="number">2</span>, <span class="keyword">self</span>.samplers.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>创建采样器对象，设置参数，将采样器对象绑定到纹理对象上：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> sb7::application::*;</span><br><span class="line"># </span><br><span class="line"># <span class="meta">#[derive(Default)]</span></span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   prog: <span class="type">u32</span>,</span><br><span class="line">#   uniform_trans: <span class="type">i32</span>,</span><br><span class="line">#   vao: <span class="type">u32</span>,</span><br><span class="line">#   vbo: <span class="type">u32</span>,</span><br><span class="line">#   texs: [<span class="type">u32</span>; <span class="number">6</span>],</span><br><span class="line">#   samplers: [<span class="type">u32</span>; <span class="number">2</span>],</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vertex_position</span> : &amp;[<span class="type">f32</span>]= &amp;[</span><br><span class="line">#       <span class="comment">// position        // tc</span></span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line"># </span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#        <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">#       -<span class="number">0.5</span>,  <span class="number">0.5</span>, -<span class="number">0.5</span>,  <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line">#     ];</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">vs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout (location = 0) in vec3 position;</span></span><br><span class="line"><span class="string">#     layout (location = 1) in vec2 tc;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     out vec2 tex_tc;</span></span><br><span class="line"><span class="string">#     out flat int face_index;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     uniform mat4 trans = mat4(1.0);</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       gl_Position = trans * vec4(position, 1.0);</span></span><br><span class="line"><span class="string">#       tex_tc = vec2(tc.x, 1.0 - tc.y);</span></span><br><span class="line"><span class="string">#       face_index = gl_VertexID / 6;</span></span><br><span class="line"><span class="string">#     &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">fs_src</span> = <span class="string">&quot;</span></span><br><span class="line"><span class="string">#     #version 460 core</span></span><br><span class="line"><span class="string">#     </span></span><br><span class="line"><span class="string">#     in vec2 tex_tc;</span></span><br><span class="line"><span class="string">#     in flat int face_index;</span></span><br><span class="line"><span class="string">#     out vec4 color;</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     layout (binding = 0) uniform sampler2D s[6];</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">#     void main() &#123;</span></span><br><span class="line"><span class="string">#       color = texture(s[face_index], tex_tc);</span></span><br><span class="line"><span class="string">#     &#125;</span></span><br><span class="line"><span class="string">#     &quot;</span>;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">self</span>.prog = sb7::program::<span class="title function_ invoke__">link_from_shaders</span>(&amp;[</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(vs_src, gl::VERTEX_SHADER, <span class="literal">true</span>),</span><br><span class="line">#       sb7::shader::<span class="title function_ invoke__">from_str</span>(fs_src, gl::FRAGMENT_SHADER, <span class="literal">true</span>),</span><br><span class="line">#     ], <span class="literal">true</span>);</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">query_name</span> = |name: &amp;<span class="type">str</span>| <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">let</span> <span class="variable">name</span> = std::ffi::CString::<span class="title function_ invoke__">new</span>(name).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">#       gl::<span class="title function_ invoke__">GetUniformLocation</span>(<span class="keyword">self</span>.prog, name.<span class="title function_ invoke__">as_ptr</span>())</span><br><span class="line">#     &#125;;</span><br><span class="line">#     <span class="keyword">self</span>.uniform_trans = <span class="title function_ invoke__">query_name</span>(<span class="string">&quot;trans&quot;</span>);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       <span class="keyword">use</span> std::mem::&#123; size_of, size_of_val &#125;;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindVertexArray</span>(<span class="keyword">self</span>.vao);</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindBuffer</span>(gl::ARRAY_BUFFER, <span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">NamedBufferData</span>(<span class="keyword">self</span>.vbo,</span><br><span class="line">#                           <span class="title function_ invoke__">size_of_val</span>(vertex_position) <span class="keyword">as</span> _,</span><br><span class="line">#                           vertex_position.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _,</span><br><span class="line">#                           gl::STATIC_DRAW);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">#                               (<span class="number">5</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _,</span><br><span class="line">#                               <span class="number">0</span> <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">VertexAttribPointer</span>(<span class="number">1</span>, <span class="number">2</span>, gl::FLOAT, gl::FALSE,</span><br><span class="line">#                               (<span class="number">5</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _,</span><br><span class="line">#                               (<span class="number">3</span> * size_of::&lt;<span class="type">f32</span>&gt;()) <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(<span class="keyword">self</span>.vao, <span class="number">0</span>);</span><br><span class="line">#       gl::<span class="title function_ invoke__">EnableVertexArrayAttrib</span>(<span class="keyword">self</span>.vao, <span class="number">1</span>);</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">CreateTextures</span>(gl::TEXTURE_2D, <span class="number">6</span>, <span class="keyword">self</span>.texs.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// create samplers</span></span><br><span class="line">      gl::<span class="title function_ invoke__">CreateSamplers</span>(<span class="number">2</span>, <span class="keyword">self</span>.samplers.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line"># </span><br><span class="line">#       <span class="comment">// set filter mode</span></span><br><span class="line">      gl::<span class="title function_ invoke__">SamplerParameteri</span>(<span class="keyword">self</span>.samplers[<span class="number">0</span>],</span><br><span class="line">                            gl::TEXTURE_MAG_FILTER,</span><br><span class="line">                            gl::LINEAR <span class="keyword">as</span> _);</span><br><span class="line">      gl::<span class="title function_ invoke__">SamplerParameteri</span>(<span class="keyword">self</span>.samplers[<span class="number">1</span>],</span><br><span class="line">                            gl::TEXTURE_MAG_FILTER,</span><br><span class="line">                            gl::NEAREST <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">      <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">6</span> &#123;</span><br><span class="line">#         <span class="keyword">use</span> stb_image::image::&#123; load, LoadResult::*&#125;;</span><br><span class="line">#         <span class="keyword">let</span> (w, h, data) = <span class="keyword">match</span> <span class="title function_ invoke__">load</span>(&amp;<span class="built_in">format!</span>(<span class="string">&quot;assert_&#123;&#125;.png&quot;</span>, i + <span class="number">1</span>)) &#123;</span><br><span class="line">#           <span class="title function_ invoke__">ImageU8</span>(img) =&gt; (img.width, img.height, img.data),</span><br><span class="line">#           _ =&gt; <span class="built_in">unimplemented!</span>()</span><br><span class="line">#         &#125;;</span><br><span class="line">#         gl::<span class="title function_ invoke__">BindTexture</span>(gl::TEXTURE_2D, <span class="keyword">self</span>.texs[i]);</span><br><span class="line">#         gl::<span class="title function_ invoke__">TextureStorage2D</span>(<span class="keyword">self</span>.texs[i], <span class="number">1</span>, gl::RGBA8, w <span class="keyword">as</span> _, h <span class="keyword">as</span> _);</span><br><span class="line">#         gl::<span class="title function_ invoke__">TexSubImage2D</span>(gl::TEXTURE_2D, <span class="number">0</span>,</span><br><span class="line">#                           <span class="number">0</span>, <span class="number">0</span>, w <span class="keyword">as</span> _, h <span class="keyword">as</span> _,</span><br><span class="line">#                           gl::RGBA, gl::UNSIGNED_BYTE, data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line"># </span><br><span class="line">#         <span class="comment">// bind texture to texture unit</span></span><br><span class="line">#         gl::<span class="title function_ invoke__">BindTextureUnit</span>(i <span class="keyword">as</span> _, <span class="keyword">self</span>.texs[i]);</span><br><span class="line"># </span><br><span class="line">        <span class="comment">// bind texture unit to sampler object</span></span><br><span class="line">        gl::<span class="title function_ invoke__">BindSampler</span>(i <span class="keyword">as</span> _, <span class="keyword">self</span>.samplers[i % <span class="number">2</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">#     &#125;</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">Enable</span>(gl::DEPTH_TEST);</span><br><span class="line">#       gl::<span class="title function_ invoke__">UseProgram</span>(<span class="keyword">self</span>.prog);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>, current_time: <span class="type">f64</span>) &#123;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">t</span> = current_time <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">40.0</span>;</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">AppConfig</span> &#123; width, height, .. &#125; = <span class="keyword">self</span>.<span class="title function_ invoke__">info</span>();</span><br><span class="line">#     <span class="keyword">let</span> <span class="variable">trans</span> = sb7::vmath::<span class="title function_ invoke__">perspective</span>(<span class="number">45.0</span>,</span><br><span class="line">#                                         width <span class="keyword">as</span> <span class="type">f32</span> / height <span class="keyword">as</span> <span class="type">f32</span>,</span><br><span class="line">#                                         <span class="number">0.1</span>, <span class="number">1000.0</span>)</span><br><span class="line">#       * sb7::vmath::<span class="title function_ invoke__">translate</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">3.5</span>)</span><br><span class="line">#       * sb7::vmath::<span class="title function_ invoke__">rotate</span>(t, t, t);</span><br><span class="line"># </span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::COLOR, <span class="number">0</span>, [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">ClearBufferfv</span>(gl::DEPTH, <span class="number">0</span>, [<span class="number">1.0</span>].<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line"># </span><br><span class="line">#       gl::<span class="title function_ invoke__">ProgramUniformMatrix4fv</span>(<span class="keyword">self</span>.prog,</span><br><span class="line">#                                   <span class="keyword">self</span>.uniform_trans, <span class="number">1</span>,</span><br><span class="line">#                                   gl::FALSE,</span><br><span class="line">#                                   std::ptr::addr_of!(trans) <span class="keyword">as</span> _);</span><br><span class="line">#       gl::<span class="title function_ invoke__">BindTexture</span>(gl::TEXTURE_2D, <span class="keyword">self</span>.texs[<span class="number">0</span>]);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DrawArrays</span>(gl::TRIANGLES, <span class="number">0</span>, <span class="number">36</span>);</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># </span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">shutdown</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteProgram</span>(<span class="keyword">self</span>.prog);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteVertexArrays</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.prog);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">self</span>.vbo);</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteTextures</span>(<span class="number">6</span>, <span class="keyword">self</span>.texs.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#       gl::<span class="title function_ invoke__">DeleteSamplers</span>(<span class="number">2</span>, <span class="keyword">self</span>.samplers.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App::<span class="title function_ invoke__">default</span>().<span class="title function_ invoke__">run</span>();</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><div class="demo_app" id="_ch5_6_0_texture_unit"></div><h4 id="纹理过滤"><a class="markdownIt-Anchor" href="#纹理过滤"></a> 纹理过滤</h4><p>纹理的大小与实际上渲染在屏幕上的大小一般都不是一比一的关系，会进行缩放与拉伸。<code>GL_TEXTURE_MIN_FILTER / GL_TEXTURE_MAG_FILTER</code> 用来设置纹理的缩放方式，<code>MIN</code> 表示纹理被缩小时采用的缩放方式，<code>MAG</code> 代表纹理放大时采用的方式，可能的取值：</p><ul><li>GL_NEAREST：邻近采样，纹理缩放时会使用离纹理坐标最近的像素点</li><li>GL_LINEAR：线性采样，纹理缩放时会将纹理坐标附近的点求和取平均值</li></ul><p>用 <code>glTexParameter() / glSamplerParameter()</code> 来设置纹理的过滤方式：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">TextureParameteri</span>(gl::TEXTURE_2D,</span><br><span class="line">                      gl::TEXTURE_MAG_FILTER, gl::NEAREST <span class="keyword">as</span> _);</span><br><span class="line">gl::<span class="title function_ invoke__">TextureParameteri</span>(gl::TEXTURE_2D,</span><br><span class="line">                      gl::TEXTURE_MIN_FILTER, gl::LINEAR <span class="keyword">as</span> _);</span><br></pre></td></tr></table></figure><p>效果如下，左边是 <code>GL_LINEAR</code> ，右边是 <code>GL_NEARST</code>，原图是一张很小的图片，在渲染时被放大了：</p><div class="demo_app" id="_ch5_6_texturefilter"></div><h4 id="多级渐远纹理mipmap"><a class="markdownIt-Anchor" href="#多级渐远纹理mipmap"></a> 多级渐远纹理（mipmap）</h4><p>在书里被翻译成 mip 贴图。是一种强大的纹理技术，在可以提高渲染性能同时提高场景质量，主要解决了渲染纹理时遇到的两个问题：</p><ul><li>闪烁：纹理在屏幕上的显示大小远远小于纹理的实际大小的时候发生，在移动场景的时候会更加明显：  <div class="demo_app" id="_ch5_7_0_tunnel_scintillation"></div>  可以点击 <code>Enable mipmap filter</code> 查看启用多级渐远纹理之后的效果</li><li>性能问题：渲染远处纹理时，往往只读取纹理的一小部分数据（浪费）</li></ul><p>解决办法是在渲染远处纹理时，使用较小的纹理贴图，这其实也就是多级渐远纹理的功能。多级渐远纹理由一系列纹理图像组成，每一层在各轴上缩小二分之一：</p><p><img src="mipmaps.png" alt="mipmaps" /></p><p>分级细化纹理的总层数在分配空间时通过 <code>glTexStorage2D()</code> 的 <code>levels</code> 参数指定：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glTexStorage2D</span><span class="params">(GLenum target,</span></span><br><span class="line"><span class="params">                    GLsizei levels,</span></span><br><span class="line"><span class="params">                    GLenum internalformat,</span></span><br><span class="line"><span class="params">                    GLsizei width,</span></span><br><span class="line"><span class="params">                    GLsizei height)</span>;</span><br></pre></td></tr></table></figure><p>将 256x256 的 2D 纹理的多级渐远纹理设置为 5：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">TexStorage2D</span>(gl::TEXTURE_2D,  <span class="comment">// 已经绑到 TEXTURE_2D 的纹理</span></span><br><span class="line">                 <span class="number">5</span>,               <span class="comment">// 多级渐远纹理的总层数</span></span><br><span class="line">                 gl::RGBA,        <span class="comment">// 纹理格式</span></span><br><span class="line">                 <span class="number">256</span>, <span class="number">256</span>);       <span class="comment">// 256x256</span></span><br></pre></td></tr></table></figure><p>这里将总层数设置成 5，第 0 层大小为 256x256，即原始数据，第 1 层大小为 128x128，第二层大小为 64x64，以此类推，第 4 层的大小为 16x16。因为总层数是 5，多级渐远纹理渲染最小图像大小为 16x16。</p><p>向多级渐远纹理设置图像数据，一般有两种方式：</p><ul><li>用 <code>glTexSubImage2D()</code> 写入第 0 层的数据（原始数据，之前一直用的这种方式设置纹理数据），然后用 <code>glGenerateMipmap()</code> 让 OpenGL 自己生成纹理的缩小版本，生成剩下的层数（方便）：</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">TexSubImage2D</span>(gl::TEXTURE_2D, <span class="number">0</span>,</span><br><span class="line">                  <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">256</span>,</span><br><span class="line">                  gl::RGBA, gl::UNSIGNED_BYTE,</span><br><span class="line">                  img_data_256 <span class="keyword">as</span> _);</span><br><span class="line">gl::<span class="title function_ invoke__">GenerateMipmap</span>(gl::TEXTURE_2D);</span><br></pre></td></tr></table></figure><ul><li>用 <code>glTexSubImage2D()</code> 手动为每一层写入图像数据，书上用来<a href="https://github.com/openglsuperbible/sb7code/blob/3f80b7a829442e2de9199a15e08ce7d09fd9260e/src/sb7/sb7ktx.cpp#L257">载入 ktx 文件的代码</a>里也有类似的逻辑：</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">TexSubImage2D</span>(gl::TEXTURE_2D, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">256</span>,</span><br><span class="line">                  gl::RGBA, gl::UNSIGNED_BYTE,</span><br><span class="line">                  img_data_256 <span class="keyword">as</span> _);</span><br><span class="line">gl::<span class="title function_ invoke__">TexSubImage2D</span>(gl::TEXTURE_2D, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">                  gl::RGBA, gl::UNSIGNED_BYTE,</span><br><span class="line">                  img_data_128 <span class="keyword">as</span> _);</span><br><span class="line">gl::<span class="title function_ invoke__">TexSubImage2D</span>(gl::TEXTURE_2D, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">                  gl::RGBA, gl::UNSIGNED_BYTE,</span><br><span class="line">                  img_data_64 <span class="keyword">as</span> _);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>多级渐远纹理需要设置过滤方式后才会生效，<code>GL_TEXTURE_MIN_FILTER</code> 需要设置成以下选项之一：</p><table><thead><tr><th style="text-align:left">过滤方式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">GL_NEAREST_MIPMAP_NEAREST</td><td style="text-align:left">使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样</td></tr><tr><td style="text-align:left">GL_LINEAR_MIPMAP_NEAREST</td><td style="text-align:left">使用最邻近的多级渐远纹理来匹配像素大小，并使用线性插值进行纹理采样</td></tr><tr><td style="text-align:left">GL_NEAREST_MIPMAP_LINEAR</td><td style="text-align:left">在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样</td></tr><tr><td style="text-align:left">GL_LINEAR_MIPMAP_LINEAR</td><td style="text-align:left">在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用线性插值进行采样</td></tr></tbody></table><p>格式类似于 <code>GL_&lt;selector&gt;_MIPMAP_&lt;filter&gt;</code>，<code>selector</code> 用来说明用哪一层，<code>filter</code> 用来说明选好哪层后，如何缩放纹理。</p><p><code>GL_TEXTURE_MIN_FILTER</code> 只需要设置成 <code>GL_NEARST</code> 或 <code>GL_LINEAR</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">TexParameteri</span>(gl::GL_TEXTURE_2D,gl::GL_TEXTURE_MIN_FILTER,</span><br><span class="line">                  gl::GL_LINEAR_MIPMAP_LINEAR);</span><br><span class="line">gl::<span class="title function_ invoke__">TexParameteri</span>(gl::GL_TEXTURE_2D, gl::GL_TEXTURE_MAG_FILTER,</span><br><span class="line">                  gl::GL_LINEAR);</span><br></pre></td></tr></table></figure><p>启用 <code>GL_LINEAR_MIPMAP_LINEAR</code> 效果如下：</p><div class="demo_app" id="_ch5_7_tunnel"></div><h4 id="环绕方式"><a class="markdownIt-Anchor" href="#环绕方式"></a> 环绕方式</h4><p>环绕方式指定了当纹理坐标超出 0.0 ~ 1.0 的范围时，OpenGL 以何种方式平铺图像。</p><p>需要将 <code>GL_TEXTURE_WRAP_S / GL_TEXTURE_WRAP_T / GL_TEXTURE_WRAP_R</code> 作为 <code>glTexParameter() / glSamplerParameter()</code> 的 <code>pname</code> 参数传入。<code>GL_TEXTURE_WRAP_S</code>、<code>GL_TEXTURE_WRAP_T</code> 代表纹理坐标的方向，<code>str</code> 与 <code>xyz</code> 是等价的。对应的取值如下：</p><table><thead><tr><th style="text-align:left">环绕方式</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">GL_REPEAT</td><td style="text-align:left">正常平铺</td></tr><tr><td style="text-align:left">GL_MIRRORED_REPEAT</td><td style="text-align:left">镜像平铺</td></tr><tr><td style="text-align:left">GL_CLAMP_TO_EDGE</td><td style="text-align:left">拉伸边缘像素</td></tr><tr><td style="text-align:left">GL_CLAMP_TO_BORDER</td><td style="text-align:left">在 0~1 内绘制纹理，超出的部分用纯色填充</td></tr></tbody></table><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gl::<span class="title function_ invoke__">TexParameteri</span>(gl::TEXTURE_2D, gl::TEXTURE_WRAP_S, gl::REPEAT <span class="keyword">as</span> _);</span><br><span class="line">gl::<span class="title function_ invoke__">TexParameteri</span>(gl::TEXTURE_2D, gl::TEXTURE_WRAP_T, gl::REPEAT <span class="keyword">as</span> _);</span><br></pre></td></tr></table></figure><p>如果要使用 <code>GL_CLAMP_TO_BORDER</code>，需要先将 <code>GL_TEXTURE_BORDER_COLOR</code> 传入 <code>glSamplerParameterfv() / glTexParameterfv()</code> 来设置要填充的纯色：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">color</span> = [<span class="number">0.0</span>, <span class="number">0.1</span>, <span class="number">0.6</span>, <span class="number">1.0f32</span>];</span><br><span class="line">gl::<span class="title function_ invoke__">TexParameterfv</span>(gl::TEXTURE_2D,</span><br><span class="line">                   gl::TEXTURE_BORDER_COLOR, color.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">gl::<span class="title function_ invoke__">TexParameteri</span>(gl::TEXTURE_2D, gl::TEXTURE_WRAP_S,</span><br><span class="line">                  gl::GL_TEXTURE_BORDER_COLOR <span class="keyword">as</span> _);</span><br><span class="line">gl::<span class="title function_ invoke__">TexParameteri</span>(gl::TEXTURE_2D, gl::TEXTURE_WRAP_T,</span><br><span class="line">                  gl::GL_TEXTURE_BORDER_COLOR <span class="keyword">as</span> _);</span><br></pre></td></tr></table></figure><p><code>GL_TEXTURE_BORDER_COLOR</code>、<code>GL_MIRRORED_REPEAT</code>、<code>GL_CLAMP_TO_EDGE</code>、<code>GL_REPEAT</code> 对应的效果：</p><div class="demo_app" id="_ch5_8_wrapmodes"></div><p>还有一种特殊的环绕方式：<code>GL_MIRROR_CLAMP_TO_EDGE</code>，可以看成 <code>GL_MIRRORED_REPEAT</code> 和 <code>GL_CLAMP_TO_EDGE</code> 的组合，只将纹理进行一次镜像平铺，之后拉伸边缘像素：</p><div class="demo_app" id="_ch5_9_mirrorclampedge"></div><h3 id="数组纹理"><a class="markdownIt-Anchor" href="#数组纹理"></a> 数组纹理</h3><p>可以类比为一个相册，将相同尺寸的纹理数据塞到一个对象里，这个对象就是数组纹理，和数组类似，可以根据元素的下标访问里面的元素。其实和多级渐远纹理类似，都是在同一个对象里存储多张纹理数据。</p><p>OpenGL 支持 1D、 2D 数组纹理，也支持立方体贴图数组纹理。但还不支持 3D 数组纹理。</p><p>创建、初始化 2D 数组纹理：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">tex</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">gl::<span class="title function_ invoke__">CreateTextures</span>(gl::TEXTURE_2D_ARRAY, <span class="number">1</span>, &amp;<span class="keyword">mut</span> tex);</span><br><span class="line"></span><br><span class="line">gl::<span class="title function_ invoke__">TexStorage3D</span>(gl::TEXTURE_2D_ARRAY,</span><br><span class="line">                 <span class="number">1</span>, <span class="comment">// 有多少层多级渐远纹理</span></span><br><span class="line">                 gl::RGBA8,</span><br><span class="line">                 <span class="number">256</span>, <span class="number">256</span>,</span><br><span class="line">                 <span class="number">100</span>);  <span class="comment">// 元素个数</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">100</span> &#123;</span><br><span class="line">  gl::<span class="title function_ invoke__">TexSubImage3D</span>(gl::TEXTURE_2D_ARRAY,</span><br><span class="line">                    <span class="number">0</span>, <span class="comment">// 第 0 层渐远纹理</span></span><br><span class="line">                    <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                    i,  <span class="comment">// 第 i 个元素</span></span><br><span class="line">                    <span class="number">256</span>, <span class="number">256</span>,</span><br><span class="line">                    <span class="number">1</span>,  <span class="comment">// 元素大小 256x256 像素</span></span><br><span class="line">                    gl::RGBA, gl::UNSIGNED_BYTE,</span><br><span class="line">                    img_data[i].<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> _);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有意思的是，分配空间，填充数据用的函数是 <code>glTexStorage3D()</code> / <code>TexSubImage3D()</code>，参数 <code>depth</code> / <code>z</code> 用来表示元素的下标。</p><p>在着色器里和 2D 数组纹理对应的采样器是 <code>sampler2DArray</code>，可以用 <code>texture()</code> 来读取数组元素：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">vec4</span> <span class="built_in">texture</span> (<span class="type">sampler2DArray</span> sampler, <span class="type">vec3</span> P)</span><br></pre></td></tr></table></figure><p><code>P</code> 的 xy 分量代表 2D 纹理的纹理坐标，z 分量表示数组纹理的下标：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">out</span> <span class="type">vec4</span> color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> VS_OUT &#123;</span><br><span class="line">  <span class="keyword">flat</span> <span class="type">int</span> alien;</span><br><span class="line">  <span class="type">vec2</span> tc;</span><br><span class="line">&#125; fs_in;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2DArray</span> tex_aliens;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>) &#123;</span><br><span class="line">  color = <span class="built_in">texture</span>(tex_aliens, <span class="type">vec3</span>(fs_in.tc, <span class="type">float</span>(fs_in.alien)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是书里示例 <a href="https://github.com/openglsuperbible/sb7code/blob/3f80b7a829442e2de9199a15e08ce7d09fd9260e/src/alienrain/alienrain.cpp#L106">alienrain</a> 的片段着色器，传入片段着色器的变量里，<code>tc</code> 表示要读取的纹理坐标，<code>alien</code> 表示要读取的纹理下标。</p><p>这个示例大概长这样：</p><div class="demo_app" id="_ch5_10_alienrain"></div><h3 id="在着色器中向纹理写入数据"><a class="markdownIt-Anchor" href="#在着色器中向纹理写入数据"></a> 在着色器中向纹理写入数据</h3><p>OpenGL 里通过 image 变量来向纹理写入数据。sampler 变量代表整个纹理，而 image 变量代表纹理持有的图像数据。</p><p>image 变量的类型与其对应的纹理：</p><table><thead><tr><th style="text-align:left">变量类型</th><th style="text-align:left">对应纹理</th></tr></thead><tbody><tr><td style="text-align:left">iamge1D</td><td style="text-align:left">1D 纹理</td></tr><tr><td style="text-align:left">iamge2D</td><td style="text-align:left">2D 纹理</td></tr><tr><td style="text-align:left">iamge3D</td><td style="text-align:left">3D 纹理</td></tr><tr><td style="text-align:left">iamgeCube</td><td style="text-align:left">立方体贴图纹理</td></tr><tr><td style="text-align:left">iamgeCubeArray</td><td style="text-align:left">立方体贴图数组纹理</td></tr><tr><td style="text-align:left">iamgeRect</td><td style="text-align:left">矩形纹理</td></tr><tr><td style="text-align:left">iamge1DArray</td><td style="text-align:left">1D 数组纹理</td></tr><tr><td style="text-align:left">iamge2DArray</td><td style="text-align:left">2D 数组纹理</td></tr><tr><td style="text-align:left">iamgeBuffer</td><td style="text-align:left">缓冲纹理</td></tr><tr><td style="text-align:left">iamge2DMS</td><td style="text-align:left">2D 多重采样纹理</td></tr><tr><td style="text-align:left">iamge2DMSArray</td><td style="text-align:left">2D 多重采样数组纹理</td></tr></tbody></table><p>在着色器里声明 image 变量：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">image2D</span> my_image</span><br></pre></td></tr></table></figure><p>在着色器里 载入 / 写入 image 变量：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">vec4</span> <span class="built_in">imageLoad</span>(<span class="keyword">readonly</span> <span class="type">image2D</span> image, <span class="type">ivec2</span> P);</span><br><span class="line"><span class="type">void</span> <span class="built_in">imageStore</span>(<span class="type">image2D</span> image, <span class="type">ivec2</span> P, <span class="type">vec4</span> data);</span><br></pre></td></tr></table></figure><p>这里坐标纹理 <code>P</code> 是整数向量，说明其范围是在整个纹理数据里查找的。假设纹理的大小为 256x256，那么 P 的有效范围为 (0, 0) ~ (255, 255)。</p><p>iimage 和 uimage 变量代表内部存储整型的纹理图像，对应的存取函数为：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ivec4</span> <span class="built_in">imageLoad</span>(<span class="keyword">readonly</span> <span class="type">iimage2D</span> image, <span class="type">ivec2</span> P);</span><br><span class="line"><span class="type">void</span> <span class="built_in">imageStore</span>(<span class="type">iimage2D</span> image, <span class="type">ivec2</span> P, <span class="type">ivec4</span> data);</span><br><span class="line"><span class="type">uvec4</span> <span class="built_in">imageLoad</span>(<span class="keyword">readonly</span> <span class="type">uimage2D</span> image, <span class="type">ivec2</span> P);</span><br><span class="line"><span class="type">void</span> <span class="built_in">imageStore</span>(<span class="type">uimage2D</span> image, <span class="type">ivec2</span> P, <span class="type">uvec4</span> data);</span><br></pre></td></tr></table></figure><p>用 <code>glBindImageTexture()</code> 将纹理对象绑到 <strong>图像单元</strong> 上，这样就可以指定 image 变量存取的纹理了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">glBindImageTexture</span><span class="params">(GLuint unit,</span></span><br><span class="line"><span class="params">                        GLuint texture,</span></span><br><span class="line"><span class="params">                        GLint level,</span></span><br><span class="line"><span class="params">                        GLboolean layered,</span></span><br><span class="line"><span class="params">                        GLint layer,</span></span><br><span class="line"><span class="params">                        GLenum access,</span></span><br><span class="line"><span class="params">                        GLenum format)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>uint</code>：图像单元，大于等于 0 的整数，类似与纹理单元，和 image 变量相关</li><li><code>texture</code>：要绑定的纹理对象，用来存储 image 变量的数据</li><li><code>level</code>：要绑定哪一层多级渐远纹理</li><li><code>layered</code>：与数组纹理有关，如果设置为 <code>gl_FALSE</code>，将绑定整个数组，设置为 <code>GL_TRUE</code> 则绑定其中一个元素</li><li><code>layer</code>：与数组纹理有关，指定要要绑定的数组元素。<code>layered</code> 为 <code>GL_FALSE</code> 时忽略</li><li><code>access</code>：权限：<code>GL_READ_ONLY</code>、<code>GL_WRITE_ONLY</code>、<code>GL_READ_WRITE</code></li><li><code>format</code>：image 变量存取的数据格式，与 <code>glTextureStorage**()</code> 里设置的格式相关，常用的格式有 <code>GL_RGBA32F</code>、<code>GL_RGBA8</code>，完整的列表可以查阅 <a href="https://docs.gl/gl4/glBindImageTexture">docs.gl</a></li></ul><p>需要给 image 变量添加格式修饰符，和 <code>glBindImageTexture()</code> 的 <code>format</code> 对应：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>, <span class="keyword">rgba32ui</span>) <span class="keyword">readonly</span> <span class="keyword">uniform</span> <span class="type">uimage2D</span> image_in;</span><br></pre></td></tr></table></figure><p>在 image 对象之间复制数据：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Uniform image variables:</span></span><br><span class="line"><span class="comment">// Input image - note use of format qualifier because of loads</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>, <span class="keyword">rgba32ui</span>) <span class="keyword">readonly</span> <span class="keyword">uniform</span> <span class="type">uimage2D</span> image_in;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output image</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">1</span>) <span class="keyword">uniform</span> <span class="keyword">writeonly</span> <span class="type">uimage2D</span> image_out;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>) &#123;</span><br><span class="line">  <span class="comment">// Use fragment coordinate as image coordinate</span></span><br><span class="line">  <span class="type">ivec2</span> P = <span class="type">ivec2</span>(<span class="built_in">gl_FragCoord</span>.xy);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Read from input image</span></span><br><span class="line">  <span class="type">uvec4</span> data = <span class="built_in">imageLoad</span>(image_in, P);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Write inverted data to output image</span></span><br><span class="line">  <span class="built_in">imageStore</span>(image_out, P, ~data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在多个着色器调用同时读写 image 变量时，需要通过原子操作来保证结果的正确性。</p><h3 id="在-image-变量上的原子操作"><a class="markdownIt-Anchor" href="#在-image-变量上的原子操作"></a> 在 image 变量上的原子操作</h3><p>原子操作是指一段不可分割的读取——修改——写入序列。重点在于不可分割，多个对象对同一存储进行原子操作可以保证结果正确。image 变量上支持的原子操作：</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">uint imageAtomicAdd (image2D image, ivec2 P, uint data)</td><td style="text-align:left">在 P 处读取数据，与 data 相加，结果写入 image，返回原来读到的值</td></tr><tr><td style="text-align:left">uint imageAtomicMin (image2D image, ivec2 P, uint data)</td><td style="text-align:left">在 P 处读取数据，与 data 求最小值，结果写入 image，返回原来读到的值</td></tr><tr><td style="text-align:left">uint imageAtomicMax (image2D image, ivec2 P, uint data)</td><td style="text-align:left">在 P 处读取数据，与 data 求最大值，结果写入 image，返回原来读到的值</td></tr><tr><td style="text-align:left">uint imageAtomicAnd (image2D image, ivec2 P, uint data)</td><td style="text-align:left">在 P 处读取数据，与 data 求逻辑与，结果写入 image，返回原来读到的值</td></tr><tr><td style="text-align:left">uint imageAtomicOr (image2D image, ivec2 P, uint data)</td><td style="text-align:left">在 P 处读取数据，与 data 求逻辑或，结果写入 image，返回原来读到的值</td></tr><tr><td style="text-align:left">uint imageAtomicXor (image2D image, ivec2 P, uint data)</td><td style="text-align:left">在 P 处读取数据，与 data 进行异或，结果写入 image，返回原来读到的值</td></tr><tr><td style="text-align:left">uint imageAtomicExchange (image2D image, ivec2 P, uint data)</td><td style="text-align:left">在 P 处读取数据，将 data 写入 image，返回原来读到的值</td></tr><tr><td style="text-align:left">uint imageAtomicCompSwap (image2D image, ivec2 P, uint compare, uint data)</td><td style="text-align:left">将在 P 处读取的数据和 compare 比较，如果相等，将 data 写入 image，image，返回原来读到的值</td></tr></tbody></table><p>可以通过 image 变量的原子操作，在着色器内实现一些数据结构，如单向链表。虽然着色器内没有指针类型，但可以通过数组实现链表。数组表示的链表结构如下：</p><img src="linklist.png" style="scale: 80%"><p>key 代表存储的元素，next 代表下一个元素的位置，header为头指针，指向第一个元素。上面链表存储的元素：[7, 2, 8, 4]</p><p>着色器内链表的实现需要三块内存：</p><ol><li>第一块用来存储链表元素，可以用着色器存储区块存储</li><li>第二块用来存储元素个数，可以用原子计数器存储</li><li>第三块用来存储头指针，可以用 image 变量存储，同时存储大量链表</li></ol><p>添加元素的过程（头插法）：</p><ol><li>用 <code>atomicCounterIncrement()</code> 将元素个数加1，返回要插入的下标</li><li>用 <code>imageAtomicExchange()</code> 更新头指针，返回前一个元素的下标</li><li>填充数据，将新元素的 next 设置为前一个元素的下标</li></ol><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Atomic counter for filled size</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>, <span class="keyword">offset</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">atomic_uint</span> fill_counter;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2D image to store header pointer</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">uimage2D</span> head_pointer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// element struct</span></span><br><span class="line">struct list_item &#123;</span><br><span class="line">  <span class="type">vec4</span> color;</span><br><span class="line">  <span class="type">float</span> depth;</span><br><span class="line">  <span class="type">int</span> facing;</span><br><span class="line">  <span class="type">uint</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array to storage elements</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>, <span class="keyword">std430</span>) <span class="keyword">buffer</span> list_item_block &#123;</span><br><span class="line">  list_item item[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input from vertex shader</span></span><br><span class="line"><span class="keyword">in</span> VS_OUT &#123;</span><br><span class="line">  <span class="type">vec4</span> <span class="keyword">in</span>;</span><br><span class="line">&#125; fs_in;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>) &#123;</span><br><span class="line">  <span class="type">ivec2</span> P = <span class="type">ivec2</span>(<span class="built_in">gl_FragCoord</span>.xy);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// index of new element</span></span><br><span class="line">  <span class="type">uint</span> <span class="keyword">index</span> = <span class="built_in">atomicCounterIncrement</span>(fill_counter);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get index of prev element</span></span><br><span class="line">  <span class="comment">// update header pointer</span></span><br><span class="line">  <span class="type">uint</span> old_index = <span class="built_in">imageAtomicExchange</span>(head_pointer, P, <span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fill data</span></span><br><span class="line">  item[<span class="keyword">index</span>].color = fs_in.color;</span><br><span class="line">  item[<span class="keyword">index</span>].depth = <span class="built_in">gl_FragCoord</span>.z;</span><br><span class="line">  item[<span class="keyword">index</span>].facing = <span class="built_in">gl_FrontFacing</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set next pointer</span></span><br><span class="line">  item[<span class="keyword">index</span>].next = old_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gl_FrontFacing</code> 是着色器的内置变量，判断图形是否处于正面</p><p>在初始化时，原子计数器内的值为 0，head_pointer 内的数据可以设置为 uint 的最大值 0xFFFFFFFF，表示 nil。插入第一个元素，index = 0，old_index = nil，item[0].next = nil</p><p>遍历链表，只需要查询 next 是不是 nil 就行：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 460 core</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Atomic counter for filled size</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>, <span class="keyword">offset</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">atomic_uint</span> fill_counter;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2D image to store header pointer</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>) <span class="keyword">uniform</span> <span class="type">uimage2D</span> head_pointer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// element struct</span></span><br><span class="line">struct list_item &#123;</span><br><span class="line">  <span class="type">vec4</span> color;</span><br><span class="line">  <span class="type">float</span> depth;</span><br><span class="line">  <span class="type">int</span> facing;</span><br><span class="line">  <span class="type">uint</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array to storage elements</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">binding</span> = <span class="number">0</span>, <span class="keyword">std430</span>) <span class="keyword">buffer</span> list_item_block &#123;</span><br><span class="line">  list_item item[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">out</span> <span class="type">vec4</span> color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="type">uint</span> max_fragments = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main(<span class="type">void</span>) &#123;</span><br><span class="line">  <span class="type">uint</span> frag_count = <span class="number">0</span>;</span><br><span class="line">  <span class="type">float</span> depth_accum = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">ivec2</span> P = <span class="type">ivec2</span>(<span class="built_in">gl_FragCoord</span>.xy);</span><br><span class="line"></span><br><span class="line">  <span class="type">uint</span> <span class="keyword">index</span> = <span class="built_in">imageLoad</span>(head_pointer, P);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (frag_count &lt; max_fragments &amp;&amp; <span class="keyword">index</span> != <span class="number">0xFFFFFFFFFF</span>) &#123;</span><br><span class="line">    list_item this_item = item[<span class="keyword">index</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (this_item.facing != <span class="number">0</span>) &#123;</span><br><span class="line">      depth_accum -= this_item.depth;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      depth_accum += this_item.depth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">index</span> = this_item.next;</span><br><span class="line">    frag_count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  depth_accum *= <span class="number">3000.0</span>;</span><br><span class="line"></span><br><span class="line">  color = <span class="type">vec3</span>(depth_accum, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行截图（<a href="https://github.com/openglsuperbible/sb7code/blob/master/src/fragmentlist/fragmentlist.cpp">源码</a>）：</p><p><img src="fragmentlist.png" alt="fragmentlists" /></p><h3 id="同步存取图像"><a class="markdownIt-Anchor" href="#同步存取图像"></a> 同步存取图像</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="comment">// glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT)</span></span><br><span class="line">gl::<span class="title function_ invoke__">MemoryBarrier</span>(gl::SHADER_IMAGE_ACCESS_BARRIER_BIT);</span><br></pre></td></tr></table></figure><p>对应的着色器函数：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memoryBarrierImage</span>()</span><br></pre></td></tr></table></figure><p>用来保证屏障前所有对 image 对象的读写的着色器都完成后，才执行之后使用 image 对象的着色器。</p><!--摸了，以后需要用到的时候再嗦### 纹理压缩### 纹理视图--><script type="module" src="/js/openglsb7th/ch5/index.js" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust code hide Test</title>
      <link href="/2022/01/21/Rust-code-hide-Test/"/>
      <url>/2022/01/21/Rust-code-hide-Test/</url>
      
        <content type="html"><![CDATA[<p>Add <code>#</code> at start of line to hiding with rust code block:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># use std::ffi::c_void;</span><br><span class="line"># </span><br><span class="line"># use sb7::application::Application;</span><br><span class="line"># struct App;</span><br><span class="line"># </span><br><span class="line"># impl Application for App &#123;</span><br><span class="line">#   fn startup(&amp;mut self) &#123;</span><br><span class="line">#     unsafe &#123;</span><br><span class="line">      let mut buf = 0;</span><br><span class="line">      let mut data = Vec::from(&quot;hello world&quot;);</span><br><span class="line">      data.resize(1024 * 1024, 0);</span><br><span class="line"></span><br><span class="line">      gl::CreateBuffers(1, &amp;mut buf);</span><br><span class="line">      &#123;</span><br><span class="line">        let data = data.as_ptr() as *const c_void;</span><br><span class="line">        gl::NamedBufferStorage(buf, 1024 * 1024, data, gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">      &#125;</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># fn main() &#123;</span><br><span class="line">#   App.run()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>it will be render to:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">use</span> std::ffi::c_void;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">use</span> sb7::application::Application;</span><br><span class="line"># <span class="keyword">struct</span> <span class="title class_">App</span>;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">impl</span> <span class="title class_">Application</span> <span class="keyword">for</span> <span class="title class_">App</span> &#123;</span><br><span class="line">#   <span class="keyword">fn</span> <span class="title function_">startup</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">#     <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">data</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">      data.<span class="title function_ invoke__">resize</span>(<span class="number">1024</span> * <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      gl::<span class="title function_ invoke__">CreateBuffers</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> buf);</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">data</span> = data.<span class="title function_ invoke__">as_ptr</span>() <span class="keyword">as</span> *<span class="keyword">const</span> c_void;</span><br><span class="line">        gl::<span class="title function_ invoke__">NamedBufferStorage</span>(buf, <span class="number">1024</span> * <span class="number">1024</span>, data, gl::DYNAMIC_STORAGE_BIT);</span><br><span class="line">      &#125;</span><br><span class="line">#     &#125;</span><br><span class="line">#   &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># </span><br><span class="line"># <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">#   App.<span class="title function_ invoke__">run</span>()</span><br><span class="line"># &#125;</span><br></pre></td></tr></table></figure><p>Click eye-btn to expand / fold the code. copy-btn will copy all code into clipboard.</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch Linux 安装 Anbox 笔记</title>
      <link href="/2021/10/18/Arch-Linux-%E5%AE%89%E8%A3%85-Anbox-%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/18/Arch-Linux-%E5%AE%89%E8%A3%85-Anbox-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>根据 arch wiki 整理的 Anbox 安装笔记：<br />wiki 地址：<a href="https://wiki.archlinux.org/title/Anbox">https://wiki.archlinux.org/title/Anbox</a></p></blockquote><h2 id="安装内核模块"><a class="markdownIt-Anchor" href="#安装内核模块"></a> 安装内核模块</h2><p>需要将内核更换为 <code>linux-tls</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S linux-lts linux-lts-headers</span><br><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>安装内核模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S anbox-modules-dkms</span><br></pre></td></tr></table></figure><p>加载内核模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe binder_linux devices=binder,hwbinder,vndbinder,anbox-binder,anbox-hwbinder,anbox-vndbinder</span><br><span class="line">sudo modprobe ashmem_linux</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /dev/binderfs</span><br><span class="line">sudo mount -t binder binder /dev/binderfs</span><br></pre></td></tr></table></figure><p>编辑 <code>/etc/modules-load.d/anbox.conf</code>，以便开机时启用内核模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ashmem_linux</span><br><span class="line">binder_linux</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/tmpfiles.d/anbox.conf</code>，下面的文件，以便开机时挂载 <code>binderfs</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/tmpfiles.d/anbox.conf</span></span><br><span class="line">d! /dev/binderfs 0755 root root</span><br></pre></td></tr></table></figure><p>在 <code>/etc/fstab</code> 末尾添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">none                         /dev/binderfs binder   nofail  0      0</span><br></pre></td></tr></table></figure><h2 id="安装-anbox"><a class="markdownIt-Anchor" href="#安装-anbox"></a> 安装 anbox</h2><p>使用 <code>Archlinuxcn</code> 源安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S anbox-git anbox-image</span><br></pre></td></tr></table></figure><p>设置网络。我电脑上使用 <code>NetworkManager</code> 作为网络管理，因此只需要这样就完成 Anbox 的网络配置了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli con add <span class="built_in">type</span> bridge ifname anbox0 -- connection.id anbox-net ipv4.method shared ipv4.addresses 192.168.250.1/24</span><br></pre></td></tr></table></figure><p>这里只需要执行一次，以后开机时，NetworkManger 会自动配置网络。 其他配置网络的方法自行参考 Arch Wiki。</p><p>启用服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start anbox-container-manager.service  <span class="comment"># 启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> anbox-container-manager.service <span class="comment"># 设置开机启动</span></span><br></pre></td></tr></table></figure><p>检查 Anbox 状态，如果显示为 running，那应该没什么太大的问题了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status anbox-container-manager.service</span><br></pre></td></tr></table></figure><p>这时候从桌面的 Anbox 图标点进去就能看到 Anbox 的界面了。</p><h2 id="安装应用"><a class="markdownIt-Anchor" href="#安装应用"></a> 安装应用</h2><p>需要确保 <code>adb</code> 命令存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S android-tools</span><br></pre></td></tr></table></figure><p>之后使用 <code>adb install</code> 就可以安装 app 了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install /path/to/app.apk</span><br></pre></td></tr></table></figure><h2 id="arm-支持"><a class="markdownIt-Anchor" href="#arm-支持"></a> ARM 支持</h2><p>目前没看出来有多大用，一些 ARM 构架的 apk 是能安装，但启动不了。</p><h3 id="安装前准备"><a class="markdownIt-Anchor" href="#安装前准备"></a> 安装前准备</h3><p>先安装一些依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S squashfs-tools tar unzip curl wget lzip </span><br></pre></td></tr></table></figure><blockquote><p>接下来的内容在将来可能会过时，建议参考原项目的地址：<a href="https://github.com/geeks-r-us/anbox-playstore-installer">https://github.com/geeks-r-us/anbox-playstore-installer</a></p></blockquote><p>ARM 的安装脚本在 Arch 上并不能直接使用，在此之前需要进行手动干预。需要手动修改 <code>/usr/lib/systemd/system/anbox-container-manager.service</code> 文件，在 <code>ExecStart</code> 这一行的末尾加上 <code>--use-rootfs-overlay</code>，修改后的文件大概长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Anbox Container Manager</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/anbox container-manager --daemon --privileged --data-path=/var/lib/anbox --use-rootfs-overlay</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后重启 Anbox 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart anbox-container-manager.service</span><br></pre></td></tr></table></figure><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>接下来只需要下载脚本，运行就行，这个过程需要下载一些文件，可能需要翻越 GFW：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> a</span><br><span class="line"><span class="built_in">cd</span> a</span><br><span class="line">wget https://raw.githubusercontent.com/geeks-r-us/anbox-playstore-installer/master/install-playstore.sh</span><br><span class="line"><span class="built_in">chmod</span> +x install-playstore.sh</span><br><span class="line">./install-playstore.sh</span><br></pre></td></tr></table></figure><p>没问题的话，打开 Anbox 应该就能发现多了一个 Google 引用市场，arm 构架的 apk 也能成功安装。</p><p><img src="./arm-res.png" alt="arm-res" /></p><h2 id="代理设置"><a class="markdownIt-Anchor" href="#代理设置"></a> 代理设置</h2><h3 id="设置代理"><a class="markdownIt-Anchor" href="#设置代理"></a> 设置代理</h3><p>主机使用的是 Qv2ray进行代理，它默认监听 127.0.0.1 ，此时 anbox 是不能访问电脑上的代理服务器的。解决办法也很简单，在主界面点击<code>首选项</code>，将<code>入站设置</code>里的<code>监听地址</code>改成 0.0.0.0 就行了：</p><p><img src="./qv2ray-setting.png" alt="qv2ray-setting.png" /></p><p>现在通过 adb 设置代理应该就没有问题了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy &lt;ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p><img src="./result.png" alt="result.png" /></p><h3 id="取消代理"><a class="markdownIt-Anchor" href="#取消代理"></a> 取消代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy :0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 git 在 vps 上部署 hexo 博客</title>
      <link href="/2021/10/17/hello-world/"/>
      <url>/2021/10/17/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="在-vps-上创建-git-仓库"><a class="markdownIt-Anchor" href="#在-vps-上创建-git-仓库"></a> 在 VPS 上创建 git 仓库</h2><ol><li><p>安装 git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></li><li><p>为 git 创建用户，并为其设置密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd git</span><br><span class="line">sudo passwd git      <span class="comment"># 为 git 用户创建密码，之后上传博客时使用</span></span><br></pre></td></tr></table></figure><p>安全起见，需要禁止git 用户的登陆权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh git -s /usr/bin/git-shell</span><br></pre></td></tr></table></figure><p>这样 git 用户就能通过 ssh 使用 git，但不能通过 ssh 登陆服务器。</p></li><li><p>为博客创建一个 git 仓库，假设 git 仓库位于 /home 目录，并将仓库的 owner 设置为 git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line"><span class="comment"># 在 /home 目录下创建名为 `site.git` 的仓库 </span></span><br><span class="line">sudo git init --bare site.git</span><br><span class="line">sudo <span class="built_in">chown</span> -R git ./site.git</span><br></pre></td></tr></table></figure><p>这里 git 命令在 /home 文件夹下创建了一个裸仓库 site.git，裸仓库没有工作区，放在服务器纯粹是拿来上传博客内容。</p></li><li><p>cd 进博客仓库，可以看到 site.git 文件夹的目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/site.git</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment">#  branches  config  description  HEAD  hooks  info  objects  refs</span></span><br></pre></td></tr></table></figure><p>因为是裸仓库，里面的文件普通仓库下 <code>.git</code> 文件夹是一样的，只是用来存储仓库的历史记录。这里需要给仓库创建一个 <code>hook</code>， 在 <code>hooks</code> 文件夹下创建 <code>post-receive</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/site.git</span><br><span class="line">sudo <span class="built_in">touch</span> hooks/post-receive    <span class="comment"># 创建一个 hook</span></span><br><span class="line">sudo nano hooks/post-receive     <span class="comment"># 编辑这个文件</span></span><br></pre></td></tr></table></figure><p>将 <code>hooks/post-receive</code> 文件修改为下面内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree=/var/www/html --git-dir=/home/site.git checkout -f main</span><br></pre></td></tr></table></figure><p>这里 <code>--work-tree</code> 为 html 服务器部署的目录， <code>git-dir</code> 为 git 仓库的位置。这里每当通过 git 上传博客内容时，git 会自动检出仓库 <code>/home/site.git</code> 的内容，将其部署到 <code>/var/www/html</code>。</p><p>不要忘了给 <code>hook</code> 添加执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x hooks/post-receive</span><br></pre></td></tr></table></figure><p>这样子 git 服务器就算配置完成了。</p></li><li><p>为了确保 git 能够将文件部署到 html 服务器，需要保证 git 用户可以读写 <code>/var/www/html</code> 这个文件夹，可以将 <code>/var/www/html</code> 的 owner 修改为 git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> -R git /var/www/html</span><br></pre></td></tr></table></figure></li></ol><h2 id="将博客内容上传到服务器"><a class="markdownIt-Anchor" href="#将博客内容上传到服务器"></a> 将博客内容上传到服务器</h2><ol><li><p>cd 到博客所在的位置，使用 git 命令将服务器上的 git 仓库 clone 到本地。clone 的时候 git 命令会提示你输入服务器上 git 用户的密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd 到 hexo 博客的位置</span></span><br><span class="line">git <span class="built_in">clone</span> git@xxx.xxx.xxx.xxx:/home/site.git public</span><br></pre></td></tr></table></figure><p>这里需要将 <code>xxx.xxx.xxx.xxx</code> 替换成你 vps 仓库的 ip。这样子 vps 服务器上的仓库就被 clone 到博客文件夹下的 public 目录了。</p></li><li><p>接下来只需要生成静态内容，上传到 vps 上的 git 服务器了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo generate             <span class="comment"># 生成静态内容</span></span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git add *</span><br><span class="line">git commit -m <span class="string">&#x27;第一次提交&#x27;</span>  <span class="comment"># 提交更改</span></span><br><span class="line">git push                  <span class="comment"># 上传</span></span><br></pre></td></tr></table></figure><p>在 git push 之后，之前 vps 上设置的 hook 会被调用，git 会自动将博客更新到 vps 上的 <code>/var/www/html</code> 下。</p><p>以后更新博客时，只需要用 <code>hexo generate</code> 命令生成静态内容，之后再通过 git 上传到 vps 就行了。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
